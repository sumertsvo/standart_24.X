

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed May 18 12:47:23 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext15,global,class=STRCODE,delta=2,noexec
    19                           	psect	stringtext16,global,class=STRCODE,delta=2,noexec
    20                           	psect	stringtext17,global,class=STRCODE,delta=2,noexec
    21                           	psect	stringtext18,global,class=STRCODE,delta=2,noexec
    22                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
    25                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    26                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    82                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    83                           	dabs	1,0x7E,2
    84  0000                     
    85                           ; Version 2.40
    86                           ; Generated 17/11/2021 GMT
    87                           ; 
    88                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution. Publication is not required when
   102                           ;        this file is used in an embedded application.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16F1823 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000E                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0095                     	;# 
   152  0096                     	;# 
   153  0097                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009A                     	;# 
   157  009B                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  010C                     	;# 
   163  010E                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0115                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0118                     	;# 
   172  0119                     	;# 
   173  011A                     	;# 
   174  011B                     	;# 
   175  011D                     	;# 
   176  011D                     	;# 
   177  018C                     	;# 
   178  018E                     	;# 
   179  0191                     	;# 
   180  0191                     	;# 
   181  0192                     	;# 
   182  0193                     	;# 
   183  0193                     	;# 
   184  0193                     	;# 
   185  0194                     	;# 
   186  0195                     	;# 
   187  0196                     	;# 
   188  0199                     	;# 
   189  019A                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019D                     	;# 
   197  019E                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0291                     	;# 
   217  0291                     	;# 
   218  0292                     	;# 
   219  0293                     	;# 
   220  0294                     	;# 
   221  0295                     	;# 
   222  0295                     	;# 
   223  0296                     	;# 
   224  0391                     	;# 
   225  0392                     	;# 
   226  0393                     	;# 
   227  039A                     	;# 
   228  039C                     	;# 
   229  039D                     	;# 
   230  039E                     	;# 
   231  039F                     	;# 
   232  0FE4                     	;# 
   233  0FE5                     	;# 
   234  0FE6                     	;# 
   235  0FE7                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEB                     	;# 
   240  0FED                     	;# 
   241  0FEE                     	;# 
   242  0FEF                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000E                     	;# 
   257  0011                     	;# 
   258  0012                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001E                     	;# 
   269  001F                     	;# 
   270  008C                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  010C                     	;# 
   286  010E                     	;# 
   287  0111                     	;# 
   288  0112                     	;# 
   289  0113                     	;# 
   290  0114                     	;# 
   291  0115                     	;# 
   292  0116                     	;# 
   293  0117                     	;# 
   294  0118                     	;# 
   295  0119                     	;# 
   296  011A                     	;# 
   297  011B                     	;# 
   298  011D                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  018E                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0194                     	;# 
   309  0195                     	;# 
   310  0196                     	;# 
   311  0199                     	;# 
   312  019A                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019C                     	;# 
   318  019C                     	;# 
   319  019D                     	;# 
   320  019E                     	;# 
   321  019F                     	;# 
   322  020C                     	;# 
   323  020E                     	;# 
   324  0211                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0212                     	;# 
   328  0213                     	;# 
   329  0213                     	;# 
   330  0214                     	;# 
   331  0214                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0216                     	;# 
   336  0216                     	;# 
   337  0217                     	;# 
   338  0217                     	;# 
   339  0291                     	;# 
   340  0291                     	;# 
   341  0292                     	;# 
   342  0293                     	;# 
   343  0294                     	;# 
   344  0295                     	;# 
   345  0295                     	;# 
   346  0296                     	;# 
   347  0391                     	;# 
   348  0392                     	;# 
   349  0393                     	;# 
   350  039A                     	;# 
   351  039C                     	;# 
   352  039D                     	;# 
   353  039E                     	;# 
   354  039F                     	;# 
   355  0FE4                     	;# 
   356  0FE5                     	;# 
   357  0FE6                     	;# 
   358  0FE7                     	;# 
   359  0FE8                     	;# 
   360  0FE9                     	;# 
   361  0FEA                     	;# 
   362  0FEB                     	;# 
   363  0FED                     	;# 
   364  0FEE                     	;# 
   365  0FEF                     	;# 
   366  0000                     	;# 
   367  0001                     	;# 
   368  0002                     	;# 
   369  0003                     	;# 
   370  0004                     	;# 
   371  0005                     	;# 
   372  0006                     	;# 
   373  0007                     	;# 
   374  0008                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0016                     	;# 
   385  0017                     	;# 
   386  0018                     	;# 
   387  0019                     	;# 
   388  001A                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  001E                     	;# 
   392  001F                     	;# 
   393  008C                     	;# 
   394  008E                     	;# 
   395  0091                     	;# 
   396  0092                     	;# 
   397  0095                     	;# 
   398  0096                     	;# 
   399  0097                     	;# 
   400  0098                     	;# 
   401  0099                     	;# 
   402  009A                     	;# 
   403  009B                     	;# 
   404  009B                     	;# 
   405  009C                     	;# 
   406  009D                     	;# 
   407  009E                     	;# 
   408  010C                     	;# 
   409  010E                     	;# 
   410  0111                     	;# 
   411  0112                     	;# 
   412  0113                     	;# 
   413  0114                     	;# 
   414  0115                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  0118                     	;# 
   418  0119                     	;# 
   419  011A                     	;# 
   420  011B                     	;# 
   421  011D                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019C                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019F                     	;# 
   445  020C                     	;# 
   446  020E                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0216                     	;# 
   459  0216                     	;# 
   460  0217                     	;# 
   461  0217                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0294                     	;# 
   467  0295                     	;# 
   468  0295                     	;# 
   469  0296                     	;# 
   470  0391                     	;# 
   471  0392                     	;# 
   472  0393                     	;# 
   473  039A                     	;# 
   474  039C                     	;# 
   475  039D                     	;# 
   476  039E                     	;# 
   477  039F                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000E                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  008C                     	;# 
   517  008E                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0098                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010E                     	;# 
   533  0111                     	;# 
   534  0112                     	;# 
   535  0113                     	;# 
   536  0114                     	;# 
   537  0115                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  0118                     	;# 
   541  0119                     	;# 
   542  011A                     	;# 
   543  011B                     	;# 
   544  011D                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020C                     	;# 
   569  020E                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0294                     	;# 
   590  0295                     	;# 
   591  0295                     	;# 
   592  0296                     	;# 
   593  0391                     	;# 
   594  0392                     	;# 
   595  0393                     	;# 
   596  039A                     	;# 
   597  039C                     	;# 
   598  039D                     	;# 
   599  039E                     	;# 
   600  039F                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000E                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  001E                     	;# 
   638  001F                     	;# 
   639  008C                     	;# 
   640  008E                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0098                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010E                     	;# 
   656  0111                     	;# 
   657  0112                     	;# 
   658  0113                     	;# 
   659  0114                     	;# 
   660  0115                     	;# 
   661  0116                     	;# 
   662  0117                     	;# 
   663  0118                     	;# 
   664  0119                     	;# 
   665  011A                     	;# 
   666  011B                     	;# 
   667  011D                     	;# 
   668  011D                     	;# 
   669  018C                     	;# 
   670  018E                     	;# 
   671  0191                     	;# 
   672  0191                     	;# 
   673  0192                     	;# 
   674  0193                     	;# 
   675  0193                     	;# 
   676  0193                     	;# 
   677  0194                     	;# 
   678  0195                     	;# 
   679  0196                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019E                     	;# 
   690  019F                     	;# 
   691  020C                     	;# 
   692  020E                     	;# 
   693  0211                     	;# 
   694  0211                     	;# 
   695  0212                     	;# 
   696  0212                     	;# 
   697  0213                     	;# 
   698  0213                     	;# 
   699  0214                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0294                     	;# 
   713  0295                     	;# 
   714  0295                     	;# 
   715  0296                     	;# 
   716  0391                     	;# 
   717  0392                     	;# 
   718  0393                     	;# 
   719  039A                     	;# 
   720  039C                     	;# 
   721  039D                     	;# 
   722  039E                     	;# 
   723  039F                     	;# 
   724  0FE4                     	;# 
   725  0FE5                     	;# 
   726  0FE6                     	;# 
   727  0FE7                     	;# 
   728  0FE8                     	;# 
   729  0FE9                     	;# 
   730  0FEA                     	;# 
   731  0FEB                     	;# 
   732  0FED                     	;# 
   733  0FEE                     	;# 
   734  0FEF                     	;# 
   735  0000                     	;# 
   736  0001                     	;# 
   737  0002                     	;# 
   738  0003                     	;# 
   739  0004                     	;# 
   740  0005                     	;# 
   741  0006                     	;# 
   742  0007                     	;# 
   743  0008                     	;# 
   744  0009                     	;# 
   745  000A                     	;# 
   746  000B                     	;# 
   747  000C                     	;# 
   748  000E                     	;# 
   749  0011                     	;# 
   750  0012                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008E                     	;# 
   764  0091                     	;# 
   765  0092                     	;# 
   766  0095                     	;# 
   767  0096                     	;# 
   768  0097                     	;# 
   769  0098                     	;# 
   770  0099                     	;# 
   771  009A                     	;# 
   772  009B                     	;# 
   773  009B                     	;# 
   774  009C                     	;# 
   775  009D                     	;# 
   776  009E                     	;# 
   777  010C                     	;# 
   778  010E                     	;# 
   779  0111                     	;# 
   780  0112                     	;# 
   781  0113                     	;# 
   782  0114                     	;# 
   783  0115                     	;# 
   784  0116                     	;# 
   785  0117                     	;# 
   786  0118                     	;# 
   787  0119                     	;# 
   788  011A                     	;# 
   789  011B                     	;# 
   790  011D                     	;# 
   791  011D                     	;# 
   792  018C                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0193                     	;# 
   800  0194                     	;# 
   801  0195                     	;# 
   802  0196                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019C                     	;# 
   810  019C                     	;# 
   811  019D                     	;# 
   812  019E                     	;# 
   813  019F                     	;# 
   814  020C                     	;# 
   815  020E                     	;# 
   816  0211                     	;# 
   817  0211                     	;# 
   818  0212                     	;# 
   819  0212                     	;# 
   820  0213                     	;# 
   821  0213                     	;# 
   822  0214                     	;# 
   823  0214                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0216                     	;# 
   828  0216                     	;# 
   829  0217                     	;# 
   830  0217                     	;# 
   831  0291                     	;# 
   832  0291                     	;# 
   833  0292                     	;# 
   834  0293                     	;# 
   835  0294                     	;# 
   836  0295                     	;# 
   837  0295                     	;# 
   838  0296                     	;# 
   839  0391                     	;# 
   840  0392                     	;# 
   841  0393                     	;# 
   842  039A                     	;# 
   843  039C                     	;# 
   844  039D                     	;# 
   845  039E                     	;# 
   846  039F                     	;# 
   847  0FE4                     	;# 
   848  0FE5                     	;# 
   849  0FE6                     	;# 
   850  0FE7                     	;# 
   851  0FE8                     	;# 
   852  0FE9                     	;# 
   853  0FEA                     	;# 
   854  0FEB                     	;# 
   855  0FED                     	;# 
   856  0FEE                     	;# 
   857  0FEF                     	;# 
   858  0000                     	;# 
   859  0001                     	;# 
   860  0002                     	;# 
   861  0003                     	;# 
   862  0004                     	;# 
   863  0005                     	;# 
   864  0006                     	;# 
   865  0007                     	;# 
   866  0008                     	;# 
   867  0009                     	;# 
   868  000A                     	;# 
   869  000B                     	;# 
   870  000C                     	;# 
   871  000E                     	;# 
   872  0011                     	;# 
   873  0012                     	;# 
   874  0015                     	;# 
   875  0016                     	;# 
   876  0016                     	;# 
   877  0017                     	;# 
   878  0018                     	;# 
   879  0019                     	;# 
   880  001A                     	;# 
   881  001B                     	;# 
   882  001C                     	;# 
   883  001E                     	;# 
   884  001F                     	;# 
   885  008C                     	;# 
   886  008E                     	;# 
   887  0091                     	;# 
   888  0092                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0097                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  010C                     	;# 
   901  010E                     	;# 
   902  0111                     	;# 
   903  0112                     	;# 
   904  0113                     	;# 
   905  0114                     	;# 
   906  0115                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  0118                     	;# 
   910  0119                     	;# 
   911  011A                     	;# 
   912  011B                     	;# 
   913  011D                     	;# 
   914  011D                     	;# 
   915  018C                     	;# 
   916  018E                     	;# 
   917  0191                     	;# 
   918  0191                     	;# 
   919  0192                     	;# 
   920  0193                     	;# 
   921  0193                     	;# 
   922  0193                     	;# 
   923  0194                     	;# 
   924  0195                     	;# 
   925  0196                     	;# 
   926  0199                     	;# 
   927  019A                     	;# 
   928  019B                     	;# 
   929  019B                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019C                     	;# 
   933  019C                     	;# 
   934  019D                     	;# 
   935  019E                     	;# 
   936  019F                     	;# 
   937  020C                     	;# 
   938  020E                     	;# 
   939  0211                     	;# 
   940  0211                     	;# 
   941  0212                     	;# 
   942  0212                     	;# 
   943  0213                     	;# 
   944  0213                     	;# 
   945  0214                     	;# 
   946  0214                     	;# 
   947  0215                     	;# 
   948  0215                     	;# 
   949  0215                     	;# 
   950  0216                     	;# 
   951  0216                     	;# 
   952  0217                     	;# 
   953  0217                     	;# 
   954  0291                     	;# 
   955  0291                     	;# 
   956  0292                     	;# 
   957  0293                     	;# 
   958  0294                     	;# 
   959  0295                     	;# 
   960  0295                     	;# 
   961  0296                     	;# 
   962  0391                     	;# 
   963  0392                     	;# 
   964  0393                     	;# 
   965  039A                     	;# 
   966  039C                     	;# 
   967  039D                     	;# 
   968  039E                     	;# 
   969  039F                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000E                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  001E                     	;# 
  1007  001F                     	;# 
  1008  008C                     	;# 
  1009  008E                     	;# 
  1010  0091                     	;# 
  1011  0092                     	;# 
  1012  0095                     	;# 
  1013  0096                     	;# 
  1014  0097                     	;# 
  1015  0098                     	;# 
  1016  0099                     	;# 
  1017  009A                     	;# 
  1018  009B                     	;# 
  1019  009B                     	;# 
  1020  009C                     	;# 
  1021  009D                     	;# 
  1022  009E                     	;# 
  1023  010C                     	;# 
  1024  010E                     	;# 
  1025  0111                     	;# 
  1026  0112                     	;# 
  1027  0113                     	;# 
  1028  0114                     	;# 
  1029  0115                     	;# 
  1030  0116                     	;# 
  1031  0117                     	;# 
  1032  0118                     	;# 
  1033  0119                     	;# 
  1034  011A                     	;# 
  1035  011B                     	;# 
  1036  011D                     	;# 
  1037  011D                     	;# 
  1038  018C                     	;# 
  1039  018E                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0194                     	;# 
  1047  0195                     	;# 
  1048  0196                     	;# 
  1049  0199                     	;# 
  1050  019A                     	;# 
  1051  019B                     	;# 
  1052  019B                     	;# 
  1053  019B                     	;# 
  1054  019B                     	;# 
  1055  019C                     	;# 
  1056  019C                     	;# 
  1057  019D                     	;# 
  1058  019E                     	;# 
  1059  019F                     	;# 
  1060  020C                     	;# 
  1061  020E                     	;# 
  1062  0211                     	;# 
  1063  0211                     	;# 
  1064  0212                     	;# 
  1065  0212                     	;# 
  1066  0213                     	;# 
  1067  0213                     	;# 
  1068  0214                     	;# 
  1069  0214                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0215                     	;# 
  1073  0216                     	;# 
  1074  0216                     	;# 
  1075  0217                     	;# 
  1076  0217                     	;# 
  1077  0291                     	;# 
  1078  0291                     	;# 
  1079  0292                     	;# 
  1080  0293                     	;# 
  1081  0294                     	;# 
  1082  0295                     	;# 
  1083  0295                     	;# 
  1084  0296                     	;# 
  1085  0391                     	;# 
  1086  0392                     	;# 
  1087  0393                     	;# 
  1088  039A                     	;# 
  1089  039C                     	;# 
  1090  039D                     	;# 
  1091  039E                     	;# 
  1092  039F                     	;# 
  1093  0FE4                     	;# 
  1094  0FE5                     	;# 
  1095  0FE6                     	;# 
  1096  0FE7                     	;# 
  1097  0FE8                     	;# 
  1098  0FE9                     	;# 
  1099  0FEA                     	;# 
  1100  0FEB                     	;# 
  1101  0FED                     	;# 
  1102  0FEE                     	;# 
  1103  0FEF                     	;# 
  1104  0000                     	;# 
  1105  0001                     	;# 
  1106  0002                     	;# 
  1107  0003                     	;# 
  1108  0004                     	;# 
  1109  0005                     	;# 
  1110  0006                     	;# 
  1111  0007                     	;# 
  1112  0008                     	;# 
  1113  0009                     	;# 
  1114  000A                     	;# 
  1115  000B                     	;# 
  1116  000C                     	;# 
  1117  000E                     	;# 
  1118  0011                     	;# 
  1119  0012                     	;# 
  1120  0015                     	;# 
  1121  0016                     	;# 
  1122  0016                     	;# 
  1123  0017                     	;# 
  1124  0018                     	;# 
  1125  0019                     	;# 
  1126  001A                     	;# 
  1127  001B                     	;# 
  1128  001C                     	;# 
  1129  001E                     	;# 
  1130  001F                     	;# 
  1131  008C                     	;# 
  1132  008E                     	;# 
  1133  0091                     	;# 
  1134  0092                     	;# 
  1135  0095                     	;# 
  1136  0096                     	;# 
  1137  0097                     	;# 
  1138  0098                     	;# 
  1139  0099                     	;# 
  1140  009A                     	;# 
  1141  009B                     	;# 
  1142  009B                     	;# 
  1143  009C                     	;# 
  1144  009D                     	;# 
  1145  009E                     	;# 
  1146  010C                     	;# 
  1147  010E                     	;# 
  1148  0111                     	;# 
  1149  0112                     	;# 
  1150  0113                     	;# 
  1151  0114                     	;# 
  1152  0115                     	;# 
  1153  0116                     	;# 
  1154  0117                     	;# 
  1155  0118                     	;# 
  1156  0119                     	;# 
  1157  011A                     	;# 
  1158  011B                     	;# 
  1159  011D                     	;# 
  1160  011D                     	;# 
  1161  018C                     	;# 
  1162  018E                     	;# 
  1163  0191                     	;# 
  1164  0191                     	;# 
  1165  0192                     	;# 
  1166  0193                     	;# 
  1167  0193                     	;# 
  1168  0193                     	;# 
  1169  0194                     	;# 
  1170  0195                     	;# 
  1171  0196                     	;# 
  1172  0199                     	;# 
  1173  019A                     	;# 
  1174  019B                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019B                     	;# 
  1178  019C                     	;# 
  1179  019C                     	;# 
  1180  019D                     	;# 
  1181  019E                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020E                     	;# 
  1185  0211                     	;# 
  1186  0211                     	;# 
  1187  0212                     	;# 
  1188  0212                     	;# 
  1189  0213                     	;# 
  1190  0213                     	;# 
  1191  0214                     	;# 
  1192  0214                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0216                     	;# 
  1197  0216                     	;# 
  1198  0217                     	;# 
  1199  0217                     	;# 
  1200  0291                     	;# 
  1201  0291                     	;# 
  1202  0292                     	;# 
  1203  0293                     	;# 
  1204  0294                     	;# 
  1205  0295                     	;# 
  1206  0295                     	;# 
  1207  0296                     	;# 
  1208  0391                     	;# 
  1209  0392                     	;# 
  1210  0393                     	;# 
  1211  039A                     	;# 
  1212  039C                     	;# 
  1213  039D                     	;# 
  1214  039E                     	;# 
  1215  039F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227                           
  1228                           	psect	stringtext1
  1229  044E                     __pstringtext1:
  1230  044E                     _GOOD_WSP_VOLTAGE:
  1231  044E  348E               	retlw	142
  1232  044F  3400               	retlw	0
  1233  0450                     __end_of_GOOD_WSP_VOLTAGE:
  1234                           
  1235                           	psect	stringtext2
  1236  0450                     __pstringtext2:
  1237  0450                     _BAD_WSP_VOLTAGE:
  1238  0450  3480               	retlw	128
  1239  0451  3400               	retlw	0
  1240  0452                     __end_of_BAD_WSP_VOLTAGE:
  1241                           
  1242                           	psect	stringtext3
  1243  0452                     __pstringtext3:
  1244  0452                     _AUTOROTATION_DELAY:
  1245  0452  3478               	retlw	120
  1246  0453  3400               	retlw	0
  1247  0454                     __end_of_AUTOROTATION_DELAY:
  1248                           
  1249                           	psect	stringtext4
  1250  0454                     __pstringtext4:
  1251  0454                     _UP_RESISTANSE:
  1252  0454  3420               	retlw	32
  1253  0455  344E               	retlw	78
  1254  0456                     __end_of_UP_RESISTANSE:
  1255                           
  1256                           	psect	stringtext5
  1257  045A                     __pstringtext5:
  1258  045A                     _MELODY_REPEAT_DELAY:
  1259  045A  3403               	retlw	3
  1260  045B                     __end_of_MELODY_REPEAT_DELAY:
  1261                           
  1262                           	psect	stringtext6
  1263  045B                     __pstringtext6:
  1264  045B                     _MOVING_WAIT_DELAY:
  1265  045B  3402               	retlw	2
  1266  045C                     __end_of_MOVING_WAIT_DELAY:
  1267                           
  1268                           	psect	stringtext7
  1269  045C                     __pstringtext7:
  1270  045C                     _AUTOROTATION_DAYS:
  1271  045C  340E               	retlw	14
  1272  045D                     __end_of_AUTOROTATION_DAYS:
  1273                           
  1274                           	psect	stringtext8
  1275  045D                     __pstringtext8:
  1276  045D                     _FRIMWARE_VERSION_EEPROM_ADR:
  1277  045D  3401               	retlw	1
  1278  045E                     __end_of_FRIMWARE_VERSION_EEPROM_ADR:
  1279                           
  1280                           	psect	stringtext9
  1281  0456                     __pstringtext9:
  1282  0456                     _HIGH_WATER_RESISTANSE:
  1283  0456  34A8               	retlw	168
  1284  0457  3461               	retlw	97
  1285  0458                     __end_of_HIGH_WATER_RESISTANSE:
  1286                           
  1287                           	psect	stringtext10
  1288  0458                     __pstringtext10:
  1289  0458                     _LOW_WATER_RESISTANSE:
  1290  0458  3420               	retlw	32
  1291  0459  344E               	retlw	78
  1292  045A                     __end_of_LOW_WATER_RESISTANSE:
  1293                           
  1294                           	psect	stringtext11
  1295  045E                     __pstringtext11:
  1296  045E                     _RELE_GAP:
  1297  045E  3402               	retlw	2
  1298  045F                     __end_of_RELE_GAP:
  1299                           
  1300                           	psect	stringtext12
  1301  045F                     __pstringtext12:
  1302  045F                     _RELE_POWER_AUTOROTATION_DELAY:
  1303  045F  3405               	retlw	5
  1304  0460                     __end_of_RELE_POWER_AUTOROTATION_DELAY:
  1305                           
  1306                           	psect	stringtext13
  1307  0460                     __pstringtext13:
  1308  0460                     _RELE_POWER_WORK_DELAY:
  1309  0460  340F               	retlw	15
  1310  0461                     __end_of_RELE_POWER_WORK_DELAY:
  1311                           
  1312                           	psect	stringtext14
  1313  0461                     __pstringtext14:
  1314  0461                     _JUMP_MEAS_COUNT:
  1315  0461  340A               	retlw	10
  1316  0462                     __end_of_JUMP_MEAS_COUNT:
  1317                           
  1318                           	psect	stringtext15
  1319  0462                     __pstringtext15:
  1320  0462                     _FUN_MEAS_COUNT:
  1321  0462  340A               	retlw	10
  1322  0463                     __end_of_FUN_MEAS_COUNT:
  1323                           
  1324                           	psect	stringtext16
  1325  0463                     __pstringtext16:
  1326  0463                     _WSP_MEAS_COUNT:
  1327  0463  3404               	retlw	4
  1328  0464                     __end_of_WSP_MEAS_COUNT:
  1329                           
  1330                           	psect	stringtext17
  1331  0464                     __pstringtext17:
  1332  0464                     _LONG_ZUMMER_DELAY:
  1333  0464  3482               	retlw	130
  1334  0465                     __end_of_LONG_ZUMMER_DELAY:
  1335                           
  1336                           	psect	stringtext18
  1337  0465                     __pstringtext18:
  1338  0465                     _SHORT_ZUMMER_DELAY:
  1339  0465  341E               	retlw	30
  1340  0466                     __end_of_SHORT_ZUMMER_DELAY:
  1341                           
  1342                           	psect	nvBANK0
  1343  003F                     __pnvBANK0:
  1344  003F                     _TMR0_InterruptHandler:
  1345  003F                     	ds	2
  1346  0041                     _TMR2_InterruptHandler:
  1347  0041                     	ds	2
  1348  0043                     _timer0ReloadVal:
  1349  0043                     	ds	1
  1350  000C                     _PORTAbits	set	12
  1351  000E                     _PORTCbits	set	14
  1352  0015                     _TMR0	set	21
  1353  001C                     _T2CONbits	set	28
  1354  001C                     _T2CON	set	28
  1355  001A                     _TMR2	set	26
  1356  001B                     _PR2	set	27
  1357  0011                     _PIR1bits	set	17
  1358  000B                     _INTCONbits	set	11
  1359  005F                     _GIE	set	95
  1360  008C                     _TRISAbits	set	140
  1361  008E                     _TRISCbits	set	142
  1362  0095                     _OPTION_REG	set	149
  1363  0091                     _PIE1bits	set	145
  1364  0095                     _OPTION_REGbits	set	149
  1365  008E                     _TRISC	set	142
  1366  008C                     _TRISA	set	140
  1367  009D                     _ADCON0bits	set	157
  1368  009D                     _ADCON0	set	157
  1369  009C                     _ADRESH	set	156
  1370  009B                     _ADRESL	set	155
  1371  009E                     _ADCON1	set	158
  1372  0097                     _WDTCON	set	151
  1373  0098                     _OSCTUNE	set	152
  1374  0099                     _OSCCON	set	153
  1375  010C                     _LATAbits	set	268
  1376  010E                     _LATCbits	set	270
  1377  011D                     _APFCON	set	285
  1378  010E                     _LATC	set	270
  1379  010C                     _LATA	set	268
  1380  0116                     _BORCON	set	278
  1381  0191                     _EEADR	set	401
  1382  0196                     _EECON2	set	406
  1383  0193                     _EEDATA	set	403
  1384  018C                     _ANSELAbits	set	396
  1385  018E                     _ANSELCbits	set	398
  1386  018C                     _ANSELA	set	396
  1387  018E                     _ANSELC	set	398
  1388  0CA8                     _RD	set	3240
  1389  0CAA                     _WREN	set	3242
  1390  0CA9                     _WR	set	3241
  1391  020E                     _WPUC	set	526
  1392  020C                     _WPUA	set	524
  1393                           
  1394                           	psect	cinit
  1395  0017                     start_initialization:	
  1396                           ; #config settings
  1397                           
  1398  0017                     __initialization:
  1399                           
  1400                           ; Clear objects allocated to BITCOMMON
  1401  0017  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1402                           
  1403                           ; Clear objects allocated to COMMON
  1404  0018  01F6               	clrf	__pbssCOMMON& (0+127)
  1405  0019  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1406  001A  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1407  001B  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1408  001C  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  1409                           
  1410                           ; Clear objects allocated to BANK0
  1411  001D  3020               	movlw	low __pbssBANK0
  1412  001E  0084               	movwf	4
  1413  001F  3000               	movlw	high __pbssBANK0
  1414  0020  0085               	movwf	5
  1415  0021  301F               	movlw	31
  1416  0022  241E               	fcall	clear_ram0
  1417  0023                     end_of_initialization:	
  1418                           ;End of C runtime variable initialization code
  1419                           
  1420  0023                     __end_of__initialization:
  1421  0023  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1422  0024  0020               	movlb	0
  1423  0025  2B8A               	ljmp	_main	;jump to C main() function
  1424                           
  1425                           	psect	bitbssCOMMON
  1426  03D8                     __pbitbssCOMMON:
  1427  03D8                     EEPROM_WriteByte@status:
  1428  03D8                     	ds	1
  1429                           
  1430                           	psect	bssCOMMON
  1431  0076                     __pbssCOMMON:
  1432  0076                     _ff:
  1433  0076                     	ds	4
  1434  007A                     _beep_short_count:
  1435  007A                     	ds	1
  1436                           
  1437                           	psect	bssBANK0
  1438  0020                     __pbssBANK0:
  1439  0020                     _time_rotation:
  1440  0020                     	ds	3
  1441  0023                     ms_tick@s_count:
  1442  0023                     	ds	2
  1443  0025                     ms_tick@ms_count:
  1444  0025                     	ds	2
  1445  0027                     _time_zummer_long:
  1446  0027                     	ds	2
  1447  0029                     _time_zummer_short:
  1448  0029                     	ds	2
  1449  002B                     _time_tone:
  1450  002B                     	ds	2
  1451  002D                     _time_rele_gap:
  1452  002D                     	ds	2
  1453  002F                     _time_rele_control:
  1454  002F                     	ds	2
  1455  0031                     _time_rele_power:
  1456  0031                     	ds	2
  1457  0033                     _ADC_InterruptHandler:
  1458  0033                     	ds	2
  1459  0035                     get_jump@jump_counter:
  1460  0035                     	ds	1
  1461  0036                     get_fun@fun_counter:
  1462  0036                     	ds	1
  1463  0037                     get_wsp@bad_measures_counter:
  1464  0037                     	ds	1
  1465  0038                     sec_work@iled:
  1466  0038                     	ds	1
  1467  0039                     _beep_double_count:
  1468  0039                     	ds	1
  1469  003A                     _beep_long_count:
  1470  003A                     	ds	1
  1471  003B                     _time_meas:
  1472  003B                     	ds	1
  1473  003C                     _time_moving_wait:
  1474  003C                     	ds	1
  1475  003D                     _time_melody:
  1476  003D                     	ds	1
  1477  003E                     _sec_count:
  1478  003E                     	ds	1
  1479                           
  1480                           	psect	clrtext
  1481  041E                     clear_ram0:	
  1482                           ;	Called with FSR0 containing the base address, and
  1483                           ;	WREG with the size to clear
  1484                           
  1485  041E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1486  041F                     clrloop0:
  1487  041F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1488  0420  3101               	addfsr 0,1
  1489  0421  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1490  0422  2C1F               	goto	clrloop0	;have we reached the end yet?
  1491  0423  3400               	retlw	0	;all done for this memory range, return
  1492                           
  1493                           	psect	cstackCOMMON
  1494  0070                     __pcstackCOMMON:
  1495  0070                     ?_PIN_MANAGER_Initialize:
  1496  0070                     ?_OSCILLATOR_Initialize:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_WDT_Initialize:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ?_TMR2_Initialize:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_ADC_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_TMR0_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_TMR0_ISR:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ??_TMR0_ISR:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_ISR:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR2_DefaultInterruptHandler:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ??_TMR2_DefaultInterruptHandler:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ?_TMR0_DefaultInterruptHandler:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ??_TMR0_DefaultInterruptHandler:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_EEPROM_ReadByte:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_SYSTEM_Initialize:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_ADC_GetConversion:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_INTERRUPT_InterruptManager:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ?_TMR2_StartTimer:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_start_tone:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ??_start_tone:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_stop_tone:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ??_stop_tone:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_beep_short:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ??_beep_short:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ?_beep_long:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ??_beep_long:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_beep_double:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ??_beep_double:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_close:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_go_close_short:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_go_open:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_go_close_alt:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_go_open_alt:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_rele_off:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_close:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_open:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ??_rele_tick:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_start_alarm:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_clear_alarm:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_fun_work:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_switch_wm:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_autorotation_work:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_minute_tick:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ??_minute_tick:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_sec_30_work:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ??_sec_30_work:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?_sec_work:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ?_ms_200_work:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ??_ms_200_work:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ?_ms_100_work:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ??_ms_100_work:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ?_ms_tick:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?_eeprom_set:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655  0070                     ?_hardware_work:	
  1656                           ; 1 bytes @ 0x0
  1657                           
  1658  0070                     ?_zummer_switch:	
  1659                           ; 1 bytes @ 0x0
  1660                           
  1661  0070                     ??_zummer_switch:	
  1662                           ; 1 bytes @ 0x0
  1663                           
  1664  0070                     ?_get_wsp:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0070                     ?_get_fun:	
  1668                           ; 1 bytes @ 0x0
  1669                           
  1670  0070                     ?_get_jump:	
  1671                           ; 1 bytes @ 0x0
  1672                           
  1673  0070                     ?_start_setup:	
  1674                           ; 1 bytes @ 0x0
  1675                           
  1676  0070                     ?_main:	
  1677                           ; 1 bytes @ 0x0
  1678                           
  1679                           
  1680                           ; 1 bytes @ 0x0
  1681  0070                     	ds	1
  1682  0071                     ??_sec_work:
  1683                           
  1684                           ; 1 bytes @ 0x1
  1685  0071                     	ds	1
  1686  0072                     ??_PIN_MANAGER_Initialize:
  1687  0072                     ??_OSCILLATOR_Initialize:	
  1688                           ; 1 bytes @ 0x2
  1689                           
  1690  0072                     ??_WDT_Initialize:	
  1691                           ; 1 bytes @ 0x2
  1692                           
  1693  0072                     ??_ADC_Initialize:	
  1694                           ; 1 bytes @ 0x2
  1695                           
  1696  0072                     ??_TMR2_ISR:	
  1697                           ; 1 bytes @ 0x2
  1698                           
  1699  0072                     ?_TMR2_SetInterruptHandler:	
  1700                           ; 1 bytes @ 0x2
  1701                           
  1702  0072                     ?_TMR0_SetInterruptHandler:	
  1703                           ; 1 bytes @ 0x2
  1704                           
  1705  0072                     ??_EEPROM_ReadByte:	
  1706                           ; 1 bytes @ 0x2
  1707                           
  1708  0072                     ?_EEPROM_WriteByte:	
  1709                           ; 1 bytes @ 0x2
  1710                           
  1711  0072                     ??_ADC_GetConversion:	
  1712                           ; 1 bytes @ 0x2
  1713                           
  1714  0072                     ??_INTERRUPT_InterruptManager:	
  1715                           ; 1 bytes @ 0x2
  1716                           
  1717  0072                     ??_TMR2_StartTimer:	
  1718                           ; 1 bytes @ 0x2
  1719                           
  1720  0072                     ??_go_close:	
  1721                           ; 1 bytes @ 0x2
  1722                           
  1723  0072                     ??_go_close_short:	
  1724                           ; 1 bytes @ 0x2
  1725                           
  1726  0072                     ??_go_open:	
  1727                           ; 1 bytes @ 0x2
  1728                           
  1729  0072                     ??_go_close_alt:	
  1730                           ; 1 bytes @ 0x2
  1731                           
  1732  0072                     ??_go_open_alt:	
  1733                           ; 1 bytes @ 0x2
  1734                           
  1735  0072                     ??_rele_off:	
  1736                           ; 1 bytes @ 0x2
  1737                           
  1738  0072                     ??_start_alarm:	
  1739                           ; 1 bytes @ 0x2
  1740                           
  1741  0072                     ??_clear_alarm:	
  1742                           ; 1 bytes @ 0x2
  1743                           
  1744  0072                     ??_autorotation_work:	
  1745                           ; 1 bytes @ 0x2
  1746                           
  1747  0072                     ??_ms_tick:	
  1748                           ; 1 bytes @ 0x2
  1749                           
  1750  0072                     ??_hardware_work:	
  1751                           ; 1 bytes @ 0x2
  1752                           
  1753  0072                     ??_get_fun:	
  1754                           ; 1 bytes @ 0x2
  1755                           
  1756  0072                     ??_get_jump:	
  1757                           ; 1 bytes @ 0x2
  1758                           
  1759  0072                     EEPROM_WriteByte@dt:	
  1760                           ; 1 bytes @ 0x2
  1761                           
  1762  0072                     TMR2_SetInterruptHandler@InterruptHandler:	
  1763                           ; 1 bytes @ 0x2
  1764                           
  1765  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1766                           ; 2 bytes @ 0x2
  1767                           
  1768                           
  1769                           ; 2 bytes @ 0x2
  1770  0072                     	ds	1
  1771  0073                     ??_EEPROM_WriteByte:
  1772  0073                     ??_close:	
  1773                           ; 1 bytes @ 0x3
  1774                           
  1775  0073                     ??_open:	
  1776                           ; 1 bytes @ 0x3
  1777                           
  1778  0073                     ??_fun_work:	
  1779                           ; 1 bytes @ 0x3
  1780                           
  1781  0073                     ??_switch_wm:	
  1782                           ; 1 bytes @ 0x3
  1783                           
  1784  0073                     ADC_GetConversion@channel:	
  1785                           ; 1 bytes @ 0x3
  1786                           
  1787                           
  1788                           ; 1 bytes @ 0x3
  1789  0073                     	ds	1
  1790  0074                     ??_TMR2_Initialize:
  1791  0074                     ??_TMR0_Initialize:	
  1792                           ; 1 bytes @ 0x4
  1793                           
  1794  0074                     ??_TMR2_SetInterruptHandler:	
  1795                           ; 1 bytes @ 0x4
  1796                           
  1797  0074                     ??_TMR0_SetInterruptHandler:	
  1798                           ; 1 bytes @ 0x4
  1799                           
  1800  0074                     ??_get_wsp:	
  1801                           ; 1 bytes @ 0x4
  1802                           
  1803  0074                     EEPROM_ReadByte@addr:	
  1804                           ; 1 bytes @ 0x4
  1805                           
  1806                           
  1807                           ; 1 bytes @ 0x4
  1808  0074                     	ds	1
  1809  0075                     ??_SYSTEM_Initialize:
  1810  0075                     EEPROM_WriteByte@addr:	
  1811                           ; 1 bytes @ 0x5
  1812                           
  1813                           
  1814                           ; 1 bytes @ 0x5
  1815  0075                     	ds	1
  1816  0076                     ??_start_setup:
  1817  0076                     ??_main:	
  1818                           ; 1 bytes @ 0x6
  1819                           
  1820                           
  1821                           	psect	cstackBANK0
  1822  0044                     __pcstackBANK0:	
  1823                           ; 1 bytes @ 0x6
  1824                           
  1825  0044                     ??_eeprom_set:
  1826  0044                     get_wsp@res:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829                           
  1830                           ; 2 bytes @ 0x0
  1831  0044                     	ds	1
  1832  0045                     eeprom_set@vers:
  1833                           
  1834                           ; 1 bytes @ 0x1
  1835  0045                     	ds	1
  1836                           
  1837                           	psect	maintext
  1838  038A                     __pmaintext:	
  1839 ;;
  1840 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1841 ;;
  1842 ;; *************** function _main *****************
  1843 ;; Defined at:
  1844 ;;		line 829 in file "main.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : B1F/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1
  1858 ;;      Params:         0       0       0
  1859 ;;      Locals:         0       0       0
  1860 ;;      Temps:          0       0       0
  1861 ;;      Totals:         0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels required when called: 11
  1864 ;; This function calls:
  1865 ;;		_autorotation_work
  1866 ;;		_close
  1867 ;;		_fun_work
  1868 ;;		_get_fun
  1869 ;;		_get_jump
  1870 ;;		_get_wsp
  1871 ;;		_hardware_work
  1872 ;;		_start_setup
  1873 ;;		_switch_wm
  1874 ;; This function is called by:
  1875 ;;		Startup code after reset
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879  038A                     _main:	
  1880                           ;psect for function _main
  1881                           
  1882                           
  1883                           ;main.c: 831:     start_setup();
  1884                           
  1885                           ;incstack = 0
  1886                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1887  038A  2141               	fcall	_start_setup
  1888  038B  2B92               	goto	l548
  1889  038C                     l2683:
  1890                           
  1891                           ;main.c: 844:             get_jump();
  1892  038C  2202               	fcall	_get_jump
  1893                           
  1894                           ;main.c: 845:             switch_wm();
  1895  038D  22C3               	fcall	_switch_wm
  1896                           
  1897                           ;main.c: 847:             get_fun();
  1898  038E  2176               	fcall	_get_fun
  1899                           
  1900                           ;main.c: 848:             fun_work();
  1901  038F  22A7               	fcall	_fun_work
  1902                           
  1903                           ;main.c: 850:             get_wsp();
  1904  0390  207F               	fcall	_get_wsp
  1905                           
  1906                           ;main.c: 852:                autorotation_work();
  1907  0391  20C7               	fcall	_autorotation_work
  1908  0392                     l548:	
  1909                           ;main.c: 834:     while (1) {
  1910                           
  1911                           ;main.c: 854:         } else {
  1912                           
  1913  0392  0064               	clrwdt	;# 
  1914                           
  1915                           ;main.c: 838:         hardware_work();
  1916  0393  21D8               	fcall	_hardware_work
  1917                           
  1918                           ;main.c: 842:         if (!ff.bits.ALARM_ON) {
  1919  0394  1C76               	btfss	_ff,0
  1920  0395  2B8C               	goto	l2683
  1921                           
  1922                           ;main.c: 855:             close();
  1923  0396  23C0               	fcall	_close
  1924  0397  2B92               	goto	l548
  1925  0398                     __end_of_main:
  1926                           
  1927                           	psect	text1
  1928  02C3                     __ptext1:	
  1929 ;; *************** function _switch_wm *****************
  1930 ;; Defined at:
  1931 ;;		line 358 in file "main.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1
  1945 ;;      Params:         0       0       0
  1946 ;;      Locals:         0       0       0
  1947 ;;      Temps:          1       0       0
  1948 ;;      Totals:         1       0       0
  1949 ;;Total ram usage:        1 bytes
  1950 ;; Hardware stack levels used: 1
  1951 ;; Hardware stack levels required when called: 8
  1952 ;; This function calls:
  1953 ;;		_rele_off
  1954 ;; This function is called by:
  1955 ;;		_main
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959  02C3                     _switch_wm:	
  1960                           ;psect for function _switch_wm
  1961                           
  1962                           
  1963                           ;main.c: 359:     if (ff.bits.JUMP_LOW) {
  1964                           
  1965                           ;incstack = 0
  1966                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  1967  02C3  1FF6               	btfss	_ff,7
  1968  02C4  2AD0               	goto	l390
  1969                           
  1970                           ;main.c: 360:         if (!ff.bits.UNIVERSAL_VORK_MODE_ON) {
  1971  02C5  18F9               	btfsc	_ff+3,1
  1972  02C6  0008               	return
  1973                           
  1974                           ;main.c: 361:             ff.bits.NORMAL_WORK_MODE_ON = 0;
  1975  02C7  1079               	bcf	_ff+3,0
  1976                           
  1977                           ;main.c: 362:             ff.bits.UNIVERSAL_VORK_MODE_ON = 1;
  1978  02C8  14F9               	bsf	_ff+3,1
  1979                           
  1980                           ;main.c: 363:             rele_off();
  1981  02C9  232C               	fcall	_rele_off
  1982                           
  1983                           ;main.c: 365:             beep_long_count = 2;
  1984  02CA  3002               	movlw	2
  1985  02CB  00F3               	movwf	??_switch_wm
  1986  02CC  0873               	movf	??_switch_wm,w
  1987  02CD  0020               	movlb	0	; select bank0
  1988  02CE  00BA               	movwf	_beep_long_count
  1989  02CF  0008               	return
  1990  02D0                     l390:
  1991  02D0  1C77               	btfss	_ff+1,0
  1992  02D1  0008               	return
  1993                           
  1994                           ;main.c: 368:         if (!ff.bits.NORMAL_WORK_MODE_ON) {
  1995  02D2  1879               	btfsc	_ff+3,0
  1996  02D3  0008               	return
  1997                           
  1998                           ;main.c: 369:             ff.bits.NORMAL_WORK_MODE_ON = 1;
  1999  02D4  1479               	bsf	_ff+3,0
  2000                           
  2001                           ;main.c: 370:             ff.bits.UNIVERSAL_VORK_MODE_ON = 0;
  2002  02D5  10F9               	bcf	_ff+3,1
  2003                           
  2004                           ;main.c: 371:             rele_off();
  2005  02D6  232C               	fcall	_rele_off
  2006                           
  2007                           ;main.c: 373:             beep_long_count = 1;
  2008  02D7  0020               	movlb	0	; select bank0
  2009  02D8  01BA               	clrf	_beep_long_count
  2010  02D9  0ABA               	incf	_beep_long_count,f
  2011  02DA  0008               	return
  2012  02DB                     __end_of_switch_wm:
  2013                           
  2014                           	psect	text2
  2015  0141                     __ptext2:	
  2016 ;; *************** function _start_setup *****************
  2017 ;; Defined at:
  2018 ;;		line 749 in file "main.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0, pclath, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0   BANK1
  2032 ;;      Params:         0       0       0
  2033 ;;      Locals:         0       0       0
  2034 ;;      Temps:          0       0       0
  2035 ;;      Totals:         0       0       0
  2036 ;;Total ram usage:        0 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 10
  2039 ;; This function calls:
  2040 ;;		_SYSTEM_Initialize
  2041 ;;		_TMR0_SetInterruptHandler
  2042 ;;		_TMR2_SetInterruptHandler
  2043 ;;		_TMR2_StartTimer
  2044 ;;		_eeprom_set
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050  0141                     _start_setup:	
  2051                           ;psect for function _start_setup
  2052                           
  2053                           
  2054                           ;main.c: 751:     SYSTEM_Initialize();
  2055                           
  2056                           ;incstack = 0
  2057                           ; Regs used in _start_setup: [wreg+status,2+status,0+pclath+cstack]
  2058  0141  2409               	fcall	_SYSTEM_Initialize
  2059                           
  2060                           ;main.c: 752:     (INTCONbits.GIE = 1);
  2061  0142  178B               	bsf	11,7	;volatile
  2062                           
  2063                           ;main.c: 753:     (INTCONbits.PEIE = 1);
  2064  0143  170B               	bsf	11,6	;volatile
  2065                           
  2066                           ;main.c: 756:     eeprom_set();
  2067  0144  2398               	fcall	_eeprom_set
  2068                           
  2069                           ;main.c: 758:     TMR0_SetInterruptHandler(zummer_switch);
  2070  0145  30D8               	movlw	low _zummer_switch
  2071  0146  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2072  0147  3003               	movlw	high _zummer_switch
  2073  0148  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2074  0149  242A               	fcall	_TMR0_SetInterruptHandler
  2075                           
  2076                           ;main.c: 759:     TMR2_SetInterruptHandler(ms_tick);
  2077  014A  30AB               	movlw	low _ms_tick
  2078  014B  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2079  014C  3001               	movlw	high _ms_tick
  2080  014D  00F3               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2081  014E  2424               	fcall	_TMR2_SetInterruptHandler
  2082                           
  2083                           ;main.c: 760:     TMR2_StartTimer();
  2084  014F  2448               	fcall	_TMR2_StartTimer
  2085                           
  2086                           ;main.c: 777:     INTCONbits.TMR0IE = 0;
  2087  0150  128B               	bcf	11,5	;volatile
  2088                           
  2089                           ;main.c: 778:     ff.value = 0;
  2090  0151  3000               	movlw	0
  2091  0152  00F9               	movwf	_ff+3
  2092  0153  3000               	movlw	0
  2093  0154  00F8               	movwf	_ff+2
  2094  0155  3000               	movlw	0
  2095  0156  00F7               	movwf	_ff+1
  2096  0157  3000               	movlw	0
  2097  0158  00F6               	movwf	_ff
  2098  0159  0022               	movlb	2	; select bank2
  2099  015A  128E               	bcf	14,5	;volatile
  2100  015B  120E               	bcf	14,4	;volatile
  2101  015C  100E               	bcf	14,0	;volatile
  2102  015D  108E               	bcf	14,1	;volatile
  2103  015E  128C               	bcf	12,5	;volatile
  2104  015F  120C               	bcf	12,4	;volatile
  2105                           
  2106                           ;main.c: 787:     time_rotation = 0;
  2107  0160  3000               	movlw	0
  2108  0161  0020               	movlb	0	; select bank0
  2109  0162  00A0               	movwf	_time_rotation
  2110  0163  3000               	movlw	0
  2111  0164  00A1               	movwf	_time_rotation+1
  2112  0165  3000               	movlw	0
  2113  0166  00A2               	movwf	_time_rotation+2
  2114                           
  2115                           ;main.c: 788:     time_rele_power = 0;
  2116  0167  01B1               	clrf	_time_rele_power
  2117  0168  01B2               	clrf	_time_rele_power+1
  2118                           
  2119                           ;main.c: 789:     time_rele_control = 0;
  2120  0169  01AF               	clrf	_time_rele_control
  2121  016A  01B0               	clrf	_time_rele_control+1
  2122                           
  2123                           ;main.c: 790:     time_rele_gap = 0;
  2124  016B  01AD               	clrf	_time_rele_gap
  2125  016C  01AE               	clrf	_time_rele_gap+1
  2126                           
  2127                           ;main.c: 791:     time_tone = 0;
  2128  016D  01AB               	clrf	_time_tone
  2129  016E  01AC               	clrf	_time_tone+1
  2130                           
  2131                           ;main.c: 796:     time_melody = 0;
  2132  016F  01BD               	clrf	_time_melody
  2133                           
  2134                           ;main.c: 797:     time_zummer_short = 0;
  2135  0170  01A9               	clrf	_time_zummer_short
  2136  0171  01AA               	clrf	_time_zummer_short+1
  2137                           
  2138                           ;main.c: 798:     time_zummer_long = 0;
  2139  0172  01A7               	clrf	_time_zummer_long
  2140  0173  01A8               	clrf	_time_zummer_long+1
  2141                           
  2142                           ;main.c: 801:     time_meas = 0;
  2143  0174  01BB               	clrf	_time_meas
  2144  0175  0008               	return
  2145  0176                     __end_of_start_setup:
  2146                           
  2147                           	psect	text3
  2148  0398                     __ptext3:	
  2149 ;; *************** function _eeprom_set *****************
  2150 ;; Defined at:
  2151 ;;		line 557 in file "main.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  vers            1    1[BANK0 ] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, status,2, status,0, pclath, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1
  2165 ;;      Params:         0       0       0
  2166 ;;      Locals:         0       1       0
  2167 ;;      Temps:          0       1       0
  2168 ;;      Totals:         0       2       0
  2169 ;;Total ram usage:        2 bytes
  2170 ;; Hardware stack levels used: 1
  2171 ;; Hardware stack levels required when called: 8
  2172 ;; This function calls:
  2173 ;;		_EEPROM_ReadByte
  2174 ;;		_EEPROM_WriteByte
  2175 ;; This function is called by:
  2176 ;;		_start_setup
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180  0398                     _eeprom_set:	
  2181                           ;psect for function _eeprom_set
  2182                           
  2183                           
  2184                           ;main.c: 558:     char vers = EEPROM_ReadByte(FRIMWARE_VERSION_EEPROM_ADR);
  2185                           
  2186                           ;incstack = 0
  2187                           ; Regs used in _eeprom_set: [wreg+status,2+status,0+pclath+cstack]
  2188  0398  3001               	movlw	1
  2189  0399  233D               	fcall	_EEPROM_ReadByte
  2190  039A  0020               	movlb	0	; select bank0
  2191  039B  00C4               	movwf	??_eeprom_set
  2192  039C  0844               	movf	??_eeprom_set,w
  2193  039D  00C5               	movwf	eeprom_set@vers
  2194                           
  2195                           ;main.c: 559:     if (vers == 0xFF) {
  2196  039E  0A45               	incf	eeprom_set@vers,w
  2197  039F  1D03               	btfss	3,2
  2198  03A0  0008               	return
  2199                           
  2200                           ;main.c: 560:         EEPROM_WriteByte(FRIMWARE_VERSION_EEPROM_ADR, 1);
  2201  03A1  01F2               	clrf	EEPROM_WriteByte@dt
  2202  03A2  0AF2               	incf	EEPROM_WriteByte@dt,f
  2203  03A3  3001               	movlw	1
  2204  03A4  222A               	fcall	_EEPROM_WriteByte
  2205  03A5  0008               	return
  2206  03A6                     __end_of_eeprom_set:
  2207                           
  2208                           	psect	text4
  2209  022A                     __ptext4:	
  2210 ;; *************** function _EEPROM_WriteByte *****************
  2211 ;; Defined at:
  2212 ;;		line 6 in file "eeprom.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  addr            1    wreg     unsigned char 
  2215 ;;  dt              1    2[COMMON] unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  addr            1    5[COMMON] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMMON   BANK0   BANK1
  2227 ;;      Params:         1       0       0
  2228 ;;      Locals:         1       0       0
  2229 ;;      Temps:          2       0       0
  2230 ;;      Totals:         4       0       0
  2231 ;;Total ram usage:        4 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; Hardware stack levels required when called: 7
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_eeprom_set
  2238 ;;		_EEPROM_WriteWord
  2239 ;;		_EEPROM_Writeint24
  2240 ;;		_EEPROM_WriteString
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244  022A                     _EEPROM_WriteByte:	
  2245                           ;psect for function _EEPROM_WriteByte
  2246                           
  2247                           
  2248                           ;incstack = 0
  2249                           ; Regs used in _EEPROM_WriteByte: [wreg]
  2250                           ;EEPROM_WriteByte@addr stored from wreg
  2251  022A  00F5               	movwf	EEPROM_WriteByte@addr
  2252  022B                     l572:	
  2253                           ;eeprom.c: 7:    static __bit status;;eeprom.c: 8:     while (WR);
  2254                           
  2255  022B  0023               	movlb	3	; select bank3
  2256  022C  1895               	btfsc	21,1	;volsfr
  2257  022D  2A2B               	goto	l572
  2258                           
  2259                           ;eeprom.c: 9:     status = GIE;
  2260  022E  107B               	bcf	EEPROM_WriteByte@status/(0+8),EEPROM_WriteByte@status& (0+7)
  2261  022F  1B8B               	btfsc	11,7	;volatile
  2262  0230  147B               	bsf	EEPROM_WriteByte@status/(0+8),EEPROM_WriteByte@status& (0+7)
  2263                           
  2264                           ;eeprom.c: 10:     GIE = 0;
  2265  0231  138B               	bcf	11,7	;volatile
  2266                           
  2267                           ;eeprom.c: 11:     EEADR = addr;
  2268  0232  0875               	movf	EEPROM_WriteByte@addr,w
  2269  0233  00F3               	movwf	??_EEPROM_WriteByte
  2270  0234  01F4               	clrf	??_EEPROM_WriteByte+1
  2271  0235  0873               	movf	??_EEPROM_WriteByte,w
  2272  0236  0023               	movlb	3	; select bank3
  2273  0237  0091               	movwf	17	;volatile
  2274  0238  0874               	movf	??_EEPROM_WriteByte+1,w
  2275  0239  0092               	movwf	18	;volatile
  2276                           
  2277                           ;eeprom.c: 12:     EEDATA = dt;
  2278  023A  0872               	movf	EEPROM_WriteByte@dt,w
  2279  023B  0093               	movwf	19	;volatile
  2280                           
  2281                           ;eeprom.c: 13:     WREN = 1;
  2282  023C  1515               	bsf	21,2	;volsfr
  2283                           
  2284                           ;eeprom.c: 14:     EECON2 = 0x55;
  2285  023D  3055               	movlw	85
  2286  023E  0096               	movwf	22	;volsfr
  2287                           
  2288                           ;eeprom.c: 15:     EECON2 = 0xAA;
  2289  023F  30AA               	movlw	170
  2290  0240  0096               	movwf	22	;volsfr
  2291                           
  2292                           ;eeprom.c: 16:     WR = 1;
  2293  0241  1495               	bsf	21,1	;volsfr
  2294                           
  2295                           ;eeprom.c: 17:     GIE = status;
  2296  0242  1C7B               	btfss	EEPROM_WriteByte@status/(0+8),EEPROM_WriteByte@status& (0+7)
  2297  0243  2A46               	goto	u2660
  2298  0244  178B               	bsf	11,7	;volatile
  2299  0245  2A47               	goto	l2567
  2300  0246                     u2660:
  2301  0246  138B               	bcf	11,7	;volatile
  2302  0247                     l2567:
  2303                           
  2304                           ;eeprom.c: 18:     WREN = 0;
  2305  0247  0023               	movlb	3	; select bank3
  2306  0248  1115               	bcf	21,2	;volsfr
  2307  0249  0008               	return
  2308  024A                     __end_of_EEPROM_WriteByte:
  2309                           
  2310                           	psect	text5
  2311  033D                     __ptext5:	
  2312 ;; *************** function _EEPROM_ReadByte *****************
  2313 ;; Defined at:
  2314 ;;		line 21 in file "eeprom.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;  addr            1    wreg     unsigned char 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  addr            1    4[COMMON] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      unsigned char 
  2321 ;; Registers used:
  2322 ;;		wreg
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMMON   BANK0   BANK1
  2328 ;;      Params:         0       0       0
  2329 ;;      Locals:         1       0       0
  2330 ;;      Temps:          2       0       0
  2331 ;;      Totals:         3       0       0
  2332 ;;Total ram usage:        3 bytes
  2333 ;; Hardware stack levels used: 1
  2334 ;; Hardware stack levels required when called: 7
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_eeprom_set
  2339 ;;		_EEPROM_ReadWord
  2340 ;;		_EEPROM_Readint24
  2341 ;;		_EEPROM_ReadString
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345  033D                     _EEPROM_ReadByte:	
  2346                           ;psect for function _EEPROM_ReadByte
  2347                           
  2348                           
  2349                           ;incstack = 0
  2350                           ; Regs used in _EEPROM_ReadByte: [wreg]
  2351                           ;EEPROM_ReadByte@addr stored from wreg
  2352  033D  00F4               	movwf	EEPROM_ReadByte@addr
  2353  033E                     l578:	
  2354                           ;eeprom.c: 22:     while (RD || WR);
  2355                           
  2356  033E  0023               	movlb	3	; select bank3
  2357  033F  1815               	btfsc	21,0	;volsfr
  2358  0340  2B3E               	goto	l578
  2359  0341  1895               	btfsc	21,1	;volsfr
  2360  0342  2B3E               	goto	l578
  2361                           
  2362                           ;eeprom.c: 23:     EEADR = addr;
  2363  0343  0874               	movf	EEPROM_ReadByte@addr,w
  2364  0344  00F2               	movwf	??_EEPROM_ReadByte
  2365  0345  01F3               	clrf	??_EEPROM_ReadByte+1
  2366  0346  0872               	movf	??_EEPROM_ReadByte,w
  2367  0347  0091               	movwf	17	;volatile
  2368  0348  0873               	movf	??_EEPROM_ReadByte+1,w
  2369  0349  0092               	movwf	18	;volatile
  2370                           
  2371                           ;eeprom.c: 24:     RD = 1;
  2372  034A  1415               	bsf	21,0	;volsfr
  2373                           
  2374                           ;eeprom.c: 25:     return EEDATA;
  2375  034B  0813               	movf	19,w	;volatile
  2376  034C  0008               	return
  2377  034D                     __end_of_EEPROM_ReadByte:
  2378                           
  2379                           	psect	text6
  2380  0448                     __ptext6:	
  2381 ;; *************** function _TMR2_StartTimer *****************
  2382 ;; Defined at:
  2383 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		None
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1
  2397 ;;      Params:         0       0       0
  2398 ;;      Locals:         0       0       0
  2399 ;;      Temps:          0       0       0
  2400 ;;      Totals:         0       0       0
  2401 ;;Total ram usage:        0 bytes
  2402 ;; Hardware stack levels used: 1
  2403 ;; Hardware stack levels required when called: 7
  2404 ;; This function calls:
  2405 ;;		Nothing
  2406 ;; This function is called by:
  2407 ;;		_start_setup
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411  0448                     _TMR2_StartTimer:	
  2412                           ;psect for function _TMR2_StartTimer
  2413                           
  2414                           
  2415                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _TMR2_StartTimer: []
  2419  0448  0020               	movlb	0	; select bank0
  2420  0449  151C               	bsf	28,2	;volatile
  2421  044A  0008               	return
  2422  044B                     __end_of_TMR2_StartTimer:
  2423                           
  2424                           	psect	text7
  2425  0409                     __ptext7:	
  2426 ;; *************** function _SYSTEM_Initialize *****************
  2427 ;; Defined at:
  2428 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0, pclath, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0   BANK1
  2442 ;;      Params:         0       0       0
  2443 ;;      Locals:         0       0       0
  2444 ;;      Temps:          0       0       0
  2445 ;;      Totals:         0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used: 1
  2448 ;; Hardware stack levels required when called: 9
  2449 ;; This function calls:
  2450 ;;		_ADC_Initialize
  2451 ;;		_OSCILLATOR_Initialize
  2452 ;;		_PIN_MANAGER_Initialize
  2453 ;;		_TMR0_Initialize
  2454 ;;		_TMR2_Initialize
  2455 ;;		_WDT_Initialize
  2456 ;; This function is called by:
  2457 ;;		_start_setup
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461  0409                     _SYSTEM_Initialize:	
  2462                           ;psect for function _SYSTEM_Initialize
  2463                           
  2464                           
  2465                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2469  0409  22F1               	fcall	_PIN_MANAGER_Initialize
  2470                           
  2471                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2472  040A  2410               	fcall	_OSCILLATOR_Initialize
  2473                           
  2474                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  2475  040B  243C               	fcall	_WDT_Initialize
  2476                           
  2477                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  2478  040C  234D               	fcall	_TMR2_Initialize
  2479                           
  2480                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  2481  040D  2401               	fcall	_ADC_Initialize
  2482                           
  2483                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  2484  040E  2306               	fcall	_TMR0_Initialize
  2485  040F  0008               	return
  2486  0410                     __end_of_SYSTEM_Initialize:
  2487                           
  2488                           	psect	text8
  2489  043C                     __ptext8:	
  2490 ;; *************** function _WDT_Initialize *****************
  2491 ;; Defined at:
  2492 ;;		line 71 in file "mcc_generated_files/mcc.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;		None
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		wreg
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1
  2506 ;;      Params:         0       0       0
  2507 ;;      Locals:         0       0       0
  2508 ;;      Temps:          0       0       0
  2509 ;;      Totals:         0       0       0
  2510 ;;Total ram usage:        0 bytes
  2511 ;; Hardware stack levels used: 1
  2512 ;; Hardware stack levels required when called: 7
  2513 ;; This function calls:
  2514 ;;		Nothing
  2515 ;; This function is called by:
  2516 ;;		_SYSTEM_Initialize
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520  043C                     _WDT_Initialize:	
  2521                           ;psect for function _WDT_Initialize
  2522                           
  2523                           
  2524                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x0A;
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _WDT_Initialize: [wreg]
  2528  043C  300A               	movlw	10
  2529  043D  0021               	movlb	1	; select bank1
  2530  043E  0097               	movwf	23	;volatile
  2531  043F  0008               	return
  2532  0440                     __end_of_WDT_Initialize:
  2533                           
  2534                           	psect	text9
  2535  034D                     __ptext9:	
  2536 ;; *************** function _TMR2_Initialize *****************
  2537 ;; Defined at:
  2538 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0, pclath, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMMON   BANK0   BANK1
  2552 ;;      Params:         0       0       0
  2553 ;;      Locals:         0       0       0
  2554 ;;      Temps:          0       0       0
  2555 ;;      Totals:         0       0       0
  2556 ;;Total ram usage:        0 bytes
  2557 ;; Hardware stack levels used: 1
  2558 ;; Hardware stack levels required when called: 8
  2559 ;; This function calls:
  2560 ;;		_TMR2_SetInterruptHandler
  2561 ;; This function is called by:
  2562 ;;		_SYSTEM_Initialize
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566  034D                     _TMR2_Initialize:	
  2567                           ;psect for function _TMR2_Initialize
  2568                           
  2569                           
  2570                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x63;
  2571                           
  2572                           ;incstack = 0
  2573                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2574  034D  3063               	movlw	99
  2575  034E  0020               	movlb	0	; select bank0
  2576  034F  009B               	movwf	27	;volatile
  2577                           
  2578                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  2579  0350  019A               	clrf	26	;volatile
  2580                           
  2581                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  2582  0351  1091               	bcf	17,1	;volatile
  2583                           
  2584                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  2585  0352  0021               	movlb	1	; select bank1
  2586  0353  1491               	bsf	17,1	;volatile
  2587                           
  2588                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  2589  0354  3066               	movlw	low _TMR2_DefaultInterruptHandler
  2590  0355  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2591  0356  3004               	movlw	high _TMR2_DefaultInterruptHandler
  2592  0357  00F3               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2593  0358  2424               	fcall	_TMR2_SetInterruptHandler
  2594                           
  2595                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4D;
  2596  0359  304D               	movlw	77
  2597  035A  0020               	movlb	0	; select bank0
  2598  035B  009C               	movwf	28	;volatile
  2599  035C  0008               	return
  2600  035D                     __end_of_TMR2_Initialize:
  2601                           
  2602                           	psect	text10
  2603  0424                     __ptext10:	
  2604 ;; *************** function _TMR2_SetInterruptHandler *****************
  2605 ;; Defined at:
  2606 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2609 ;;		 -> ms_tick(1), TMR2_DefaultInterruptHandler(1), 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1
  2621 ;;      Params:         2       0       0
  2622 ;;      Locals:         0       0       0
  2623 ;;      Temps:          0       0       0
  2624 ;;      Totals:         2       0       0
  2625 ;;Total ram usage:        2 bytes
  2626 ;; Hardware stack levels used: 1
  2627 ;; Hardware stack levels required when called: 7
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_TMR2_Initialize
  2632 ;;		_start_setup
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636  0424                     _TMR2_SetInterruptHandler:	
  2637                           ;psect for function _TMR2_SetInterruptHandler
  2638                           
  2639                           
  2640                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  2641                           
  2642                           ;incstack = 0
  2643                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  2644  0424  0873               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  2645  0425  0020               	movlb	0	; select bank0
  2646  0426  00C2               	movwf	_TMR2_InterruptHandler+1
  2647  0427  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  2648  0428  00C1               	movwf	_TMR2_InterruptHandler
  2649  0429  0008               	return
  2650  042A                     __end_of_TMR2_SetInterruptHandler:
  2651                           
  2652                           	psect	text11
  2653  0306                     __ptext11:	
  2654 ;; *************** function _TMR0_Initialize *****************
  2655 ;; Defined at:
  2656 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0, pclath, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMMON   BANK0   BANK1
  2670 ;;      Params:         0       0       0
  2671 ;;      Locals:         0       0       0
  2672 ;;      Temps:          1       0       0
  2673 ;;      Totals:         1       0       0
  2674 ;;Total ram usage:        1 bytes
  2675 ;; Hardware stack levels used: 1
  2676 ;; Hardware stack levels required when called: 8
  2677 ;; This function calls:
  2678 ;;		_TMR0_SetInterruptHandler
  2679 ;; This function is called by:
  2680 ;;		_SYSTEM_Initialize
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684  0306                     _TMR0_Initialize:	
  2685                           ;psect for function _TMR0_Initialize
  2686                           
  2687                           
  2688                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  2689                           
  2690                           ;incstack = 0
  2691                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2692  0306  0021               	movlb	1	; select bank1
  2693  0307  0815               	movf	21,w	;volatile
  2694  0308  39C0               	andlw	192
  2695  0309  3811               	iorlw	17
  2696  030A  0095               	movwf	21	;volatile
  2697                           
  2698                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
  2699  030B  3083               	movlw	131
  2700  030C  0020               	movlb	0	; select bank0
  2701  030D  0095               	movwf	21	;volatile
  2702                           
  2703                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
  2704  030E  3083               	movlw	131
  2705  030F  00F4               	movwf	??_TMR0_Initialize
  2706  0310  0874               	movf	??_TMR0_Initialize,w
  2707  0311  00C3               	movwf	_timer0ReloadVal	;volatile
  2708                           
  2709                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  2710  0312  110B               	bcf	11,2	;volatile
  2711                           
  2712                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  2713  0313  168B               	bsf	11,5	;volatile
  2714                           
  2715                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  2716  0314  3067               	movlw	low _TMR0_DefaultInterruptHandler
  2717  0315  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2718  0316  3004               	movlw	high _TMR0_DefaultInterruptHandler
  2719  0317  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2720  0318  242A               	fcall	_TMR0_SetInterruptHandler
  2721  0319  0008               	return
  2722  031A                     __end_of_TMR0_Initialize:
  2723                           
  2724                           	psect	text12
  2725  042A                     __ptext12:	
  2726 ;; *************** function _TMR0_SetInterruptHandler *****************
  2727 ;; Defined at:
  2728 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2731 ;;		 -> zummer_switch(1), TMR0_DefaultInterruptHandler(1), 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1
  2743 ;;      Params:         2       0       0
  2744 ;;      Locals:         0       0       0
  2745 ;;      Temps:          0       0       0
  2746 ;;      Totals:         2       0       0
  2747 ;;Total ram usage:        2 bytes
  2748 ;; Hardware stack levels used: 1
  2749 ;; Hardware stack levels required when called: 7
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_TMR0_Initialize
  2754 ;;		_start_setup
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758  042A                     _TMR0_SetInterruptHandler:	
  2759                           ;psect for function _TMR0_SetInterruptHandler
  2760                           
  2761                           
  2762                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  2763                           
  2764                           ;incstack = 0
  2765                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2766  042A  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2767  042B  0020               	movlb	0	; select bank0
  2768  042C  00C0               	movwf	_TMR0_InterruptHandler+1
  2769  042D  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2770  042E  00BF               	movwf	_TMR0_InterruptHandler
  2771  042F  0008               	return
  2772  0430                     __end_of_TMR0_SetInterruptHandler:
  2773                           
  2774                           	psect	text13
  2775  02F1                     __ptext13:	
  2776 ;; *************** function _PIN_MANAGER_Initialize *****************
  2777 ;; Defined at:
  2778 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1
  2792 ;;      Params:         0       0       0
  2793 ;;      Locals:         0       0       0
  2794 ;;      Temps:          0       0       0
  2795 ;;      Totals:         0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used: 1
  2798 ;; Hardware stack levels required when called: 7
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_SYSTEM_Initialize
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806  02F1                     _PIN_MANAGER_Initialize:	
  2807                           ;psect for function _PIN_MANAGER_Initialize
  2808                           
  2809                           
  2810                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2811                           
  2812                           ;incstack = 0
  2813                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2814  02F1  0022               	movlb	2	; select bank2
  2815  02F2  018C               	clrf	12	;volatile
  2816                           
  2817                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  2818  02F3  018E               	clrf	14	;volatile
  2819                           
  2820                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  2821  02F4  300F               	movlw	15
  2822  02F5  0021               	movlb	1	; select bank1
  2823  02F6  008C               	movwf	12	;volatile
  2824                           
  2825                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  2826  02F7  300C               	movlw	12
  2827  02F8  008E               	movwf	14	;volatile
  2828                           
  2829                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x08;
  2830  02F9  3008               	movlw	8
  2831  02FA  0023               	movlb	3	; select bank3
  2832  02FB  008E               	movwf	14	;volatile
  2833                           
  2834                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x05;
  2835  02FC  3005               	movlw	5
  2836  02FD  008C               	movwf	12	;volatile
  2837                           
  2838                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  2839  02FE  0024               	movlb	4	; select bank4
  2840  02FF  018C               	clrf	12	;volatile
  2841                           
  2842                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  2843  0300  018E               	clrf	14	;volatile
  2844                           
  2845                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  2846  0301  0021               	movlb	1	; select bank1
  2847  0302  1795               	bsf	21,7	;volatile
  2848                           
  2849                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  2850  0303  0022               	movlb	2	; select bank2
  2851  0304  019D               	clrf	29	;volatile
  2852  0305  0008               	return
  2853  0306                     __end_of_PIN_MANAGER_Initialize:
  2854                           
  2855                           	psect	text14
  2856  0410                     __ptext14:	
  2857 ;; *************** function _OSCILLATOR_Initialize *****************
  2858 ;; Defined at:
  2859 ;;		line 61 in file "mcc_generated_files/mcc.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1
  2873 ;;      Params:         0       0       0
  2874 ;;      Locals:         0       0       0
  2875 ;;      Temps:          0       0       0
  2876 ;;      Totals:         0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used: 1
  2879 ;; Hardware stack levels required when called: 7
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_SYSTEM_Initialize
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887  0410                     _OSCILLATOR_Initialize:	
  2888                           ;psect for function _OSCILLATOR_Initialize
  2889                           
  2890                           
  2891                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x78;
  2892                           
  2893                           ;incstack = 0
  2894                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2895  0410  3078               	movlw	120
  2896  0411  0021               	movlb	1	; select bank1
  2897  0412  0099               	movwf	25	;volatile
  2898                           
  2899                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  2900  0413  0198               	clrf	24	;volatile
  2901                           
  2902                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  2903  0414  0022               	movlb	2	; select bank2
  2904  0415  0196               	clrf	22	;volatile
  2905  0416  0008               	return
  2906  0417                     __end_of_OSCILLATOR_Initialize:
  2907                           
  2908                           	psect	text15
  2909  0401                     __ptext15:	
  2910 ;; *************** function _ADC_Initialize *****************
  2911 ;; Defined at:
  2912 ;;		line 67 in file "mcc_generated_files/adc.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1
  2926 ;;      Params:         0       0       0
  2927 ;;      Locals:         0       0       0
  2928 ;;      Temps:          0       0       0
  2929 ;;      Totals:         0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used: 1
  2932 ;; Hardware stack levels required when called: 7
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_SYSTEM_Initialize
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940  0401                     _ADC_Initialize:	
  2941                           ;psect for function _ADC_Initialize
  2942                           
  2943                           
  2944                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x50;
  2945                           
  2946                           ;incstack = 0
  2947                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  2948  0401  3050               	movlw	80
  2949  0402  0021               	movlb	1	; select bank1
  2950  0403  009E               	movwf	30	;volatile
  2951                           
  2952                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  2953  0404  019B               	clrf	27	;volatile
  2954                           
  2955                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  2956  0405  019C               	clrf	28	;volatile
  2957                           
  2958                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x1D;
  2959  0406  301D               	movlw	29
  2960  0407  009D               	movwf	29	;volatile
  2961  0408  0008               	return
  2962  0409                     __end_of_ADC_Initialize:
  2963                           
  2964                           	psect	text16
  2965  01D8                     __ptext16:	
  2966 ;; *************** function _hardware_work *****************
  2967 ;; Defined at:
  2968 ;;		line 565 in file "main.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      void 
  2975 ;; Registers used:
  2976 ;;		None
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1
  2982 ;;      Params:         0       0       0
  2983 ;;      Locals:         0       0       0
  2984 ;;      Temps:          0       0       0
  2985 ;;      Totals:         0       0       0
  2986 ;;Total ram usage:        0 bytes
  2987 ;; Hardware stack levels used: 1
  2988 ;; Hardware stack levels required when called: 7
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_main
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996  01D8                     _hardware_work:	
  2997                           ;psect for function _hardware_work
  2998                           
  2999                           
  3000                           ;main.c: 566:     LATCbits.LATC0 = ff.bits.ALARM_ON;
  3001                           
  3002                           ;incstack = 0
  3003                           ; Regs used in _hardware_work: []
  3004  01D8  1C76               	btfss	_ff,0
  3005  01D9  29DD               	goto	u1030
  3006  01DA  0022               	movlb	2	; select bank2
  3007  01DB  140E               	bsf	14,0	;volatile
  3008  01DC  29DF               	goto	u1044
  3009  01DD                     u1030:
  3010  01DD  0022               	movlb	2	; select bank2
  3011  01DE  100E               	bcf	14,0	;volatile
  3012  01DF                     u1044:
  3013                           
  3014                           ;main.c: 567:     LATCbits.LATC1 = ff.bits.MEAS_ON;
  3015  01DF  1E79               	btfss	_ff+3,4
  3016  01E0  29E4               	goto	u1050
  3017  01E1  0022               	movlb	2	; select bank2
  3018  01E2  148E               	bsf	14,1	;volatile
  3019  01E3  29E6               	goto	u1064
  3020  01E4                     u1050:
  3021  01E4  0022               	movlb	2	; select bank2
  3022  01E5  108E               	bcf	14,1	;volatile
  3023  01E6                     u1064:
  3024                           
  3025                           ;main.c: 568:     LATCbits.LATC4 = ff.bits.RELE_CONTROL_ON;
  3026  01E6  1F77               	btfss	_ff+1,6
  3027  01E7  29EB               	goto	u1070
  3028  01E8  0022               	movlb	2	; select bank2
  3029  01E9  160E               	bsf	14,4	;volatile
  3030  01EA  29ED               	goto	u1084
  3031  01EB                     u1070:
  3032  01EB  0022               	movlb	2	; select bank2
  3033  01EC  120E               	bcf	14,4	;volatile
  3034  01ED                     u1084:
  3035                           
  3036                           ;main.c: 569:     LATCbits.LATC5 = ff.bits.RELE_POWER_ON;
  3037  01ED  1EF7               	btfss	_ff+1,5
  3038  01EE  29F2               	goto	u1090
  3039  01EF  0022               	movlb	2	; select bank2
  3040  01F0  168E               	bsf	14,5	;volatile
  3041  01F1  29F4               	goto	u1104
  3042  01F2                     u1090:
  3043  01F2  0022               	movlb	2	; select bank2
  3044  01F3  128E               	bcf	14,5	;volatile
  3045  01F4                     u1104:
  3046                           
  3047                           ;main.c: 570:     LATAbits.LATA4 = ff.bits.LED_ON;
  3048  01F4  1D79               	btfss	_ff+3,2
  3049  01F5  29F9               	goto	u1110
  3050  01F6  0022               	movlb	2	; select bank2
  3051  01F7  160C               	bsf	12,4	;volatile
  3052  01F8  29FB               	goto	u1124
  3053  01F9                     u1110:
  3054  01F9  0022               	movlb	2	; select bank2
  3055  01FA  120C               	bcf	12,4	;volatile
  3056  01FB                     u1124:
  3057                           
  3058                           ;main.c: 572:     if (ff.bits.TONE_ON) {
  3059  01FB  18F8               	btfsc	_ff+2,1
  3060                           
  3061                           ;main.c: 573:         INTCONbits.TMR0IE = 1;
  3062  01FC  168B               	bsf	11,5	;volatile
  3063                           
  3064                           ;main.c: 575:     if (ff.bits.TONE_OFF) {
  3065                           
  3066                           ;main.c: 574:     };
  3067  01FD  1D78               	btfss	_ff+2,2
  3068  01FE  0008               	return
  3069                           
  3070                           ;main.c: 576:         INTCONbits.TMR0IE = 0;
  3071  01FF  128B               	bcf	11,5	;volatile
  3072                           
  3073                           ;main.c: 577:         do { LATAbits.LATA5 = 0; } while(0);
  3074  0200  128C               	bcf	12,5	;volatile
  3075  0201  0008               	return
  3076  0202                     __end_of_hardware_work:
  3077                           
  3078                           	psect	text17
  3079  007F                     __ptext17:	
  3080 ;; *************** function _get_wsp *****************
  3081 ;; Defined at:
  3082 ;;		line 590 in file "main.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  res             2    0[BANK0 ] unsigned int 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, status,2, status,0, pclath, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMMON   BANK0   BANK1
  3096 ;;      Params:         0       0       0
  3097 ;;      Locals:         0       2       0
  3098 ;;      Temps:          2       0       0
  3099 ;;      Totals:         2       2       0
  3100 ;;Total ram usage:        4 bytes
  3101 ;; Hardware stack levels used: 1
  3102 ;; Hardware stack levels required when called: 8
  3103 ;; This function calls:
  3104 ;;		_ADC_GetConversion
  3105 ;;		_clear_alarm
  3106 ;;		_start_alarm
  3107 ;; This function is called by:
  3108 ;;		_main
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112  007F                     _get_wsp:	
  3113                           ;psect for function _get_wsp
  3114                           
  3115                           
  3116                           ;main.c: 592:     if (ff.bits.ALLOW_MEASURE) {
  3117                           
  3118                           ;incstack = 0
  3119                           ; Regs used in _get_wsp: [wreg+status,2+status,0+pclath+cstack]
  3120  007F  1E76               	btfss	_ff,4
  3121  0080  0008               	return
  3122                           
  3123                           ;main.c: 594:         static signed char bad_measures_counter = 0;;main.c: 595:         
      +                          do { LATCbits.LATC1 = 1; } while(0);
  3124  0081  0022               	movlb	2	; select bank2
  3125  0082  148E               	bsf	14,1	;volatile
  3126                           
  3127                           ;main.c: 596:         do { ANSELCbits.ANSC3 = 1; } while(0);
  3128  0083  0023               	movlb	3	; select bank3
  3129  0084  158E               	bsf	14,3	;volatile
  3130                           
  3131                           ;main.c: 597:         _delay((unsigned long)((1)*(16000000/4000.0)));
  3132  0085  3006               	movlw	6
  3133  0086  00F4               	movwf	??_get_wsp
  3134  0087  3030               	movlw	48
  3135  0088                     u2827:
  3136  0088  0B89               	decfsz	9,f
  3137  0089  2888               	goto	u2827
  3138  008A  0BF4               	decfsz	??_get_wsp,f
  3139  008B  2888               	goto	u2827
  3140  008C  3200               	nop2
  3141                           
  3142                           ;main.c: 598:         unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  3143  008D  3007               	movlw	7
  3144  008E  22DB               	fcall	_ADC_GetConversion
  3145  008F  00F4               	movwf	??_get_wsp
  3146  0090  01F5               	clrf	??_get_wsp+1
  3147  0091  0874               	movf	??_get_wsp,w
  3148  0092  0020               	movlb	0	; select bank0
  3149  0093  00C4               	movwf	get_wsp@res
  3150  0094  0875               	movf	??_get_wsp+1,w
  3151  0095  00C5               	movwf	get_wsp@res+1
  3152  0096  0023               	movlb	3	; select bank3
  3153  0097  118E               	bcf	14,3	;volatile
  3154  0098  0022               	movlb	2	; select bank2
  3155  0099  108E               	bcf	14,1	;volatile
  3156                           
  3157                           ;main.c: 601:         if (res < BAD_WSP_VOLTAGE) {
  3158  009A  3000               	movlw	0
  3159  009B  0020               	movlb	0	; select bank0
  3160  009C  0245               	subwf	get_wsp@res+1,w
  3161  009D  3080               	movlw	128
  3162  009E  1903               	skipnz
  3163  009F  0244               	subwf	get_wsp@res,w
  3164  00A0  1803               	skipnc
  3165  00A1  28A4               	goto	l2607
  3166                           
  3167                           ;main.c: 602:             bad_measures_counter++;
  3168  00A2  3001               	movlw	1
  3169  00A3  28AC               	goto	L1
  3170  00A4                     l2607:	
  3171                           ;main.c: 603:         } else {
  3172                           
  3173                           
  3174                           ;main.c: 604:             if (res > GOOD_WSP_VOLTAGE) {
  3175  00A4  3000               	movlw	0
  3176  00A5  0245               	subwf	get_wsp@res+1,w
  3177  00A6  308F               	movlw	143
  3178  00A7  1903               	skipnz
  3179  00A8  0244               	subwf	get_wsp@res,w
  3180  00A9  1C03               	skipc
  3181  00AA  28AF               	goto	l2611
  3182                           
  3183                           ;main.c: 605:                 bad_measures_counter--;
  3184  00AB  30FF               	movlw	255
  3185  00AC                     L1:
  3186  00AC  00F4               	movwf	??_get_wsp
  3187  00AD  0874               	movf	??_get_wsp,w
  3188  00AE  07B7               	addwf	get_wsp@bad_measures_counter,f
  3189  00AF                     l2611:
  3190                           
  3191                           ;main.c: 608:         if (bad_measures_counter > WSP_MEAS_COUNT) {
  3192  00AF  0837               	movf	get_wsp@bad_measures_counter,w
  3193  00B0  3A80               	xorlw	128
  3194  00B1  3E7B               	addlw	-133
  3195  00B2  1C03               	skipc
  3196  00B3  28BA               	goto	l2617
  3197                           
  3198                           ;main.c: 609:             start_alarm();
  3199  00B4  2417               	fcall	_start_alarm
  3200                           
  3201                           ;main.c: 610:             bad_measures_counter = WSP_MEAS_COUNT;
  3202  00B5  3004               	movlw	4
  3203  00B6  00F4               	movwf	??_get_wsp
  3204  00B7  0874               	movf	??_get_wsp,w
  3205  00B8  0020               	movlb	0	; select bank0
  3206  00B9  00B7               	movwf	get_wsp@bad_measures_counter
  3207  00BA                     l2617:
  3208                           
  3209                           ;main.c: 612:         if (bad_measures_counter < -WSP_MEAS_COUNT) {
  3210  00BA  0837               	movf	get_wsp@bad_measures_counter,w
  3211  00BB  3A80               	xorlw	128
  3212  00BC  3E84               	addlw	132
  3213  00BD  1803               	skipnc
  3214  00BE  28C5               	goto	l2623
  3215                           
  3216                           ;main.c: 613:             clear_alarm();
  3217  00BF  244B               	fcall	_clear_alarm
  3218                           
  3219                           ;main.c: 614:             bad_measures_counter = -WSP_MEAS_COUNT;
  3220  00C0  30FC               	movlw	252
  3221  00C1  00F4               	movwf	??_get_wsp
  3222  00C2  0874               	movf	??_get_wsp,w
  3223  00C3  0020               	movlb	0	; select bank0
  3224  00C4  00B7               	movwf	get_wsp@bad_measures_counter
  3225  00C5                     l2623:
  3226                           
  3227                           ;main.c: 616:         ff.bits.ALLOW_MEASURE = 0;
  3228  00C5  1276               	bcf	_ff,4
  3229  00C6  0008               	return
  3230  00C7                     __end_of_get_wsp:
  3231                           
  3232                           	psect	text18
  3233  0417                     __ptext18:	
  3234 ;; *************** function _start_alarm *****************
  3235 ;; Defined at:
  3236 ;;		line 321 in file "main.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		status,2
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1
  3250 ;;      Params:         0       0       0
  3251 ;;      Locals:         0       0       0
  3252 ;;      Temps:          0       0       0
  3253 ;;      Totals:         0       0       0
  3254 ;;Total ram usage:        0 bytes
  3255 ;; Hardware stack levels used: 1
  3256 ;; Hardware stack levels required when called: 7
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_get_wsp
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264  0417                     _start_alarm:	
  3265                           ;psect for function _start_alarm
  3266                           
  3267                           
  3268                           ;main.c: 322:     ff.bits.ALARM_ON = 1;
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _start_alarm: [status,2]
  3272  0417  1476               	bsf	_ff,0
  3273                           
  3274                           ;main.c: 323:     ff.bits.ALARM_OFF = 0;
  3275  0418  10F6               	bcf	_ff,1
  3276                           
  3277                           ;main.c: 324:     ff.bits.MELODY_ON = 1;
  3278  0419  1779               	bsf	_ff+3,6
  3279                           
  3280                           ;main.c: 325:     ff.bits.SIREN = 1;
  3281  041A  15F8               	bsf	_ff+2,3
  3282                           
  3283                           ;main.c: 326:     sec_count=0;
  3284  041B  0020               	movlb	0	; select bank0
  3285  041C  01BE               	clrf	_sec_count
  3286  041D  0008               	return
  3287  041E                     __end_of_start_alarm:
  3288                           
  3289                           	psect	text19
  3290  044B                     __ptext19:	
  3291 ;; *************** function _clear_alarm *****************
  3292 ;; Defined at:
  3293 ;;		line 329 in file "main.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		None
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1
  3307 ;;      Params:         0       0       0
  3308 ;;      Locals:         0       0       0
  3309 ;;      Temps:          0       0       0
  3310 ;;      Totals:         0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used: 1
  3313 ;; Hardware stack levels required when called: 7
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_get_wsp
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321  044B                     _clear_alarm:	
  3322                           ;psect for function _clear_alarm
  3323                           
  3324                           
  3325                           ;main.c: 330:     ff.bits.ALARM_ON = 0;
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _clear_alarm: []
  3329  044B  1076               	bcf	_ff,0
  3330                           
  3331                           ;main.c: 331:     ff.bits.ALARM_OFF = 1;
  3332  044C  14F6               	bsf	_ff,1
  3333  044D  0008               	return
  3334  044E                     __end_of_clear_alarm:
  3335                           
  3336                           	psect	text20
  3337  02DB                     __ptext20:	
  3338 ;; *************** function _ADC_GetConversion *****************
  3339 ;; Defined at:
  3340 ;;		line 112 in file "mcc_generated_files/adc.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;  channel         1    wreg     enum E2178
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;  channel         1    3[COMMON] enum E2178
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      unsigned char 
  3347 ;; Registers used:
  3348 ;;		wreg, status,2, status,0
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1
  3354 ;;      Params:         0       0       0
  3355 ;;      Locals:         1       0       0
  3356 ;;      Temps:          1       0       0
  3357 ;;      Totals:         2       0       0
  3358 ;;Total ram usage:        2 bytes
  3359 ;; Hardware stack levels used: 1
  3360 ;; Hardware stack levels required when called: 7
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_get_wsp
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368  02DB                     _ADC_GetConversion:	
  3369                           ;psect for function _ADC_GetConversion
  3370                           
  3371                           
  3372                           ;incstack = 0
  3373                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  3374                           ;ADC_GetConversion@channel stored from wreg
  3375  02DB  00F3               	movwf	ADC_GetConversion@channel
  3376                           
  3377                           ;mcc_generated_files/adc.c: 112: char ADC_GetConversion(adc_channel_t channel);mcc_gener
      +                          ated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = channel;
  3378  02DC  0873               	movf	ADC_GetConversion@channel,w
  3379  02DD  00F2               	movwf	??_ADC_GetConversion
  3380  02DE  0DF2               	rlf	??_ADC_GetConversion,f
  3381  02DF  0DF2               	rlf	??_ADC_GetConversion,f
  3382  02E0  0021               	movlb	1	; select bank1
  3383  02E1  081D               	movf	29,w	;volatile
  3384  02E2  0672               	xorwf	??_ADC_GetConversion,w
  3385  02E3  3983               	andlw	-125
  3386  02E4  0672               	xorwf	??_ADC_GetConversion,w
  3387  02E5  009D               	movwf	29	;volatile
  3388                           
  3389                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  3390  02E6  141D               	bsf	29,0	;volatile
  3391                           
  3392                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  3393  02E7  3006               	movlw	6
  3394  02E8                     u2837:
  3395  02E8  0B89               	decfsz	9,f
  3396  02E9  2AE8               	goto	u2837
  3397  02EA  3200               	nop2
  3398                           
  3399                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  3400  02EB  0021               	movlb	1	; select bank1
  3401  02EC  149D               	bsf	29,1	;volatile
  3402  02ED                     l61:	
  3403                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  3404                           
  3405                           
  3406                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  3407  02ED  189D               	btfsc	29,1	;volatile
  3408  02EE  2AED               	goto	l61
  3409                           
  3410                           ;mcc_generated_files/adc.c: 132:     return (ADRESH);
  3411  02EF  081C               	movf	28,w	;volatile
  3412  02F0  0008               	return
  3413  02F1                     __end_of_ADC_GetConversion:
  3414                           
  3415                           	psect	text21
  3416  0202                     __ptext21:	
  3417 ;; *************** function _get_jump *****************
  3418 ;; Defined at:
  3419 ;;		line 685 in file "main.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;		None
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMMON   BANK0   BANK1
  3433 ;;      Params:         0       0       0
  3434 ;;      Locals:         0       0       0
  3435 ;;      Temps:          1       0       0
  3436 ;;      Totals:         1       0       0
  3437 ;;Total ram usage:        1 bytes
  3438 ;; Hardware stack levels used: 1
  3439 ;; Hardware stack levels required when called: 7
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447  0202                     _get_jump:	
  3448                           ;psect for function _get_jump
  3449                           
  3450                           
  3451                           ;main.c: 687:     static signed char jump_counter;;main.c: 689:     if (ff.bits.ALLOW_JU
      +                          MP) {
  3452                           
  3453                           ;incstack = 0
  3454                           ; Regs used in _get_jump: [wreg+status,2+status,0]
  3455  0202  1F76               	btfss	_ff,6
  3456  0203  0008               	return
  3457                           
  3458                           ;main.c: 691:         do { ANSELAbits.ANSA1 = 0; } while(0);
  3459  0204  0023               	movlb	3	; select bank3
  3460  0205  108C               	bcf	12,1	;volatile
  3461                           
  3462                           ;main.c: 692:         do { TRISAbits.TRISA1 = 1; } while(0);
  3463  0206  0021               	movlb	1	; select bank1
  3464  0207  148C               	bsf	12,1	;volatile
  3465                           
  3466                           ;main.c: 693:         if (PORTAbits.RA1) jump_counter++;
  3467  0208  0020               	movlb	0	; select bank0
  3468  0209  1C8C               	btfss	12,1	;volatile
  3469  020A  2A0D               	goto	l2411
  3470  020B  3001               	movlw	1
  3471  020C  2A0E               	goto	L2
  3472  020D                     l2411:
  3473  020D  30FF               	movlw	255
  3474  020E                     L2:
  3475  020E  00F2               	movwf	??_get_jump
  3476  020F  0872               	movf	??_get_jump,w
  3477  0210  07B5               	addwf	get_jump@jump_counter,f
  3478                           
  3479                           ;main.c: 702:         if (jump_counter > JUMP_MEAS_COUNT) {
  3480  0211  0835               	movf	get_jump@jump_counter,w
  3481  0212  3A80               	xorlw	128
  3482  0213  3E75               	addlw	-139
  3483  0214  1C03               	skipc
  3484  0215  2A1D               	goto	l2421
  3485                           
  3486                           ;main.c: 703:             jump_counter = JUMP_MEAS_COUNT;
  3487  0216  300A               	movlw	10
  3488  0217  00F2               	movwf	??_get_jump
  3489  0218  0872               	movf	??_get_jump,w
  3490  0219  00B5               	movwf	get_jump@jump_counter
  3491                           
  3492                           ;main.c: 704:             ff.bits.JUMP_LOW = 0;
  3493  021A  13F6               	bcf	_ff,7
  3494                           
  3495                           ;main.c: 705:             ff.bits.JUMP_HIGH = 1;
  3496  021B  1477               	bsf	_ff+1,0
  3497                           
  3498                           ;main.c: 706:         } else if (jump_counter<-JUMP_MEAS_COUNT) {
  3499  021C  2A28               	goto	l2429
  3500  021D                     l2421:
  3501  021D  0835               	movf	get_jump@jump_counter,w
  3502  021E  3A80               	xorlw	128
  3503  021F  3E8A               	addlw	138
  3504  0220  1803               	skipnc
  3505  0221  2A28               	goto	l2429
  3506                           
  3507                           ;main.c: 707:             jump_counter = -JUMP_MEAS_COUNT;
  3508  0222  30F6               	movlw	246
  3509  0223  00F2               	movwf	??_get_jump
  3510  0224  0872               	movf	??_get_jump,w
  3511  0225  00B5               	movwf	get_jump@jump_counter
  3512                           
  3513                           ;main.c: 708:             ff.bits.JUMP_LOW = 1;
  3514  0226  17F6               	bsf	_ff,7
  3515                           
  3516                           ;main.c: 709:             ff.bits.JUMP_HIGH = 0;
  3517  0227  1077               	bcf	_ff+1,0
  3518  0228                     l2429:
  3519                           
  3520                           ;main.c: 711:         ff.bits.ALLOW_JUMP = 0;
  3521  0228  1376               	bcf	_ff,6
  3522  0229  0008               	return
  3523  022A                     __end_of_get_jump:
  3524                           
  3525                           	psect	text22
  3526  0176                     __ptext22:	
  3527 ;; *************** function _get_fun *****************
  3528 ;; Defined at:
  3529 ;;		line 620 in file "main.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1
  3543 ;;      Params:         0       0       0
  3544 ;;      Locals:         0       0       0
  3545 ;;      Temps:          1       0       0
  3546 ;;      Totals:         1       0       0
  3547 ;;Total ram usage:        1 bytes
  3548 ;; Hardware stack levels used: 1
  3549 ;; Hardware stack levels required when called: 7
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557  0176                     _get_fun:	
  3558                           ;psect for function _get_fun
  3559                           
  3560                           
  3561                           ;main.c: 622:     if (ff.bits.ALLOW_FUN) {
  3562                           
  3563                           ;incstack = 0
  3564                           ; Regs used in _get_fun: [wreg+status,2+status,0]
  3565  0176  1EF6               	btfss	_ff,5
  3566  0177  0008               	return
  3567                           
  3568                           ;main.c: 624:         static signed char fun_counter;;main.c: 625:         do { LATCbits
      +                          .LATC1 = 1; } while(0);
  3569  0178  0022               	movlb	2	; select bank2
  3570  0179  148E               	bsf	14,1	;volatile
  3571                           
  3572                           ;main.c: 626:         _delay((unsigned long)((1)*(16000000/4000.0)));
  3573  017A  3006               	movlw	6
  3574  017B  00F2               	movwf	??_get_fun
  3575  017C  3030               	movlw	48
  3576  017D                     u2847:
  3577  017D  0B89               	decfsz	9,f
  3578  017E  297D               	goto	u2847
  3579  017F  0BF2               	decfsz	??_get_fun,f
  3580  0180  297D               	goto	u2847
  3581  0181  3200               	nop2
  3582  0182  0023               	movlb	3	; select bank3
  3583  0183  110E               	bcf	14,2	;volatile
  3584  0184  0021               	movlb	1	; select bank1
  3585  0185  150E               	bsf	14,2	;volatile
  3586                           
  3587                           ;main.c: 629:         if (PORTCbits.RC2) fun_counter--;
  3588  0186  0020               	movlb	0	; select bank0
  3589  0187  1D0E               	btfss	14,2	;volatile
  3590  0188  298B               	goto	l2385
  3591  0189  30FF               	movlw	255
  3592  018A  298C               	goto	L3
  3593  018B                     l2385:
  3594  018B  3001               	movlw	1
  3595  018C                     L3:
  3596  018C  00F2               	movwf	??_get_fun
  3597  018D  0872               	movf	??_get_fun,w
  3598  018E  07B6               	addwf	get_fun@fun_counter,f
  3599  018F  0022               	movlb	2	; select bank2
  3600  0190  108E               	bcf	14,1	;volatile
  3601                           
  3602                           ;main.c: 637:         if (fun_counter > FUN_MEAS_COUNT) {
  3603  0191  0020               	movlb	0	; select bank0
  3604  0192  0836               	movf	get_fun@fun_counter,w
  3605  0193  3A80               	xorlw	128
  3606  0194  3E75               	addlw	-139
  3607  0195  1C03               	skipc
  3608  0196  299E               	goto	l2397
  3609                           
  3610                           ;main.c: 638:             fun_counter = FUN_MEAS_COUNT;
  3611  0197  300A               	movlw	10
  3612  0198  00F2               	movwf	??_get_fun
  3613  0199  0872               	movf	??_get_fun,w
  3614  019A  00B6               	movwf	get_fun@fun_counter
  3615                           
  3616                           ;main.c: 639:             ff.bits.FUN_LOW = 0;
  3617  019B  11F6               	bcf	_ff,3
  3618                           
  3619                           ;main.c: 640:             ff.bits.FUN_HIGH = 1;
  3620  019C  1576               	bsf	_ff,2
  3621                           
  3622                           ;main.c: 641:         } else if (fun_counter<-FUN_MEAS_COUNT) {
  3623  019D  29A9               	goto	l2405
  3624  019E                     l2397:
  3625  019E  0836               	movf	get_fun@fun_counter,w
  3626  019F  3A80               	xorlw	128
  3627  01A0  3E8A               	addlw	138
  3628  01A1  1803               	skipnc
  3629  01A2  29A9               	goto	l2405
  3630                           
  3631                           ;main.c: 642:             fun_counter = -FUN_MEAS_COUNT;
  3632  01A3  30F6               	movlw	246
  3633  01A4  00F2               	movwf	??_get_fun
  3634  01A5  0872               	movf	??_get_fun,w
  3635  01A6  00B6               	movwf	get_fun@fun_counter
  3636                           
  3637                           ;main.c: 643:             ff.bits.FUN_LOW = 1;
  3638  01A7  15F6               	bsf	_ff,3
  3639                           
  3640                           ;main.c: 644:             ff.bits.FUN_HIGH = 0;
  3641  01A8  1176               	bcf	_ff,2
  3642  01A9                     l2405:
  3643                           
  3644                           ;main.c: 646:         ff.bits.ALLOW_FUN = 0;
  3645  01A9  12F6               	bcf	_ff,5
  3646  01AA  0008               	return
  3647  01AB                     __end_of_get_fun:
  3648                           
  3649                           	psect	text23
  3650  02A7                     __ptext23:	
  3651 ;; *************** function _fun_work *****************
  3652 ;; Defined at:
  3653 ;;		line 334 in file "main.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;		None
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, pclath, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMMON   BANK0   BANK1
  3667 ;;      Params:         0       0       0
  3668 ;;      Locals:         0       0       0
  3669 ;;      Temps:          1       0       0
  3670 ;;      Totals:         1       0       0
  3671 ;;Total ram usage:        1 bytes
  3672 ;; Hardware stack levels used: 1
  3673 ;; Hardware stack levels required when called: 9
  3674 ;; This function calls:
  3675 ;;		_close
  3676 ;;		_open
  3677 ;; This function is called by:
  3678 ;;		_main
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682  02A7                     _fun_work:	
  3683                           ;psect for function _fun_work
  3684                           
  3685                           
  3686                           ;main.c: 335:     {;main.c: 336:         if (
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  3690  02A7  19F6               	btfsc	_ff,3
  3691  02A8  1976               	btfsc	_ff,2
  3692  02A9  2AB3               	goto	l2275
  3693  02AA  18F6               	btfsc	_ff,1
  3694  02AB  1FF8               	btfss	_ff+2,7
  3695  02AC  2AB3               	goto	l2275
  3696  02AD  1D77               	btfss	_ff+1,2
  3697  02AE  18F7               	btfsc	_ff+1,1
  3698  02AF  2AB3               	goto	l2275
  3699                           
  3700                           ;main.c: 342:                 !ff.bits.OPENING) {;main.c: 343:             beep_short_co
      +                          unt = 1;
  3701  02B0  01FA               	clrf	_beep_short_count
  3702  02B1  0AFA               	incf	_beep_short_count,f
  3703                           
  3704                           ;main.c: 344:             open();
  3705  02B2  23B4               	fcall	_open
  3706  02B3                     l2275:
  3707                           
  3708                           ;main.c: 346:         if (
  3709  02B3  1D76               	btfss	_ff,2
  3710  02B4  0008               	return
  3711  02B5  1FF8               	btfss	_ff+2,7
  3712  02B6  0008               	return
  3713  02B7  19F6               	btfsc	_ff,3
  3714  02B8  0008               	return
  3715  02B9  1A77               	btfsc	_ff+1,4
  3716  02BA  0008               	return
  3717  02BB  19F7               	btfsc	_ff+1,3
  3718  02BC  0008               	return
  3719                           
  3720                           ;main.c: 351:                 !ff.bits.CLOSING) {;main.c: 352:             beep_short_co
      +                          unt = 2;
  3721  02BD  3002               	movlw	2
  3722  02BE  00F3               	movwf	??_fun_work
  3723  02BF  0873               	movf	??_fun_work,w
  3724  02C0  00FA               	movwf	_beep_short_count
  3725                           
  3726                           ;main.c: 353:             close();
  3727  02C1  23C0               	fcall	_close
  3728  02C2  0008               	return
  3729  02C3                     __end_of_fun_work:
  3730                           
  3731                           	psect	text24
  3732  03B4                     __ptext24:	
  3733 ;; *************** function _open *****************
  3734 ;; Defined at:
  3735 ;;		line 265 in file "main.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0, pclath, cstack
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1
  3749 ;;      Params:         0       0       0
  3750 ;;      Locals:         0       0       0
  3751 ;;      Temps:          0       0       0
  3752 ;;      Totals:         0       0       0
  3753 ;;Total ram usage:        0 bytes
  3754 ;; Hardware stack levels used: 1
  3755 ;; Hardware stack levels required when called: 8
  3756 ;; This function calls:
  3757 ;;		_go_open
  3758 ;;		_go_open_alt
  3759 ;;		_rele_off
  3760 ;; This function is called by:
  3761 ;;		_fun_work
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765  03B4                     _open:	
  3766                           ;psect for function _open
  3767                           
  3768                           
  3769                           ;main.c: 266:     if (ff.bits.CLOSING) {
  3770                           
  3771                           ;incstack = 0
  3772                           ; Regs used in _open: [wreg+status,2+status,0+pclath+cstack]
  3773  03B4  1DF7               	btfss	_ff+1,3
  3774  03B5  2BB8               	goto	l357
  3775                           
  3776                           ;main.c: 267:         rele_off();
  3777  03B6  232C               	fcall	_rele_off
  3778                           
  3779                           ;main.c: 268:     } else {
  3780  03B7  0008               	return
  3781  03B8                     l357:
  3782                           
  3783                           ;main.c: 269:         if (ff.bits.NORMAL_WORK_MODE_ON) {
  3784  03B8  1C79               	btfss	_ff+3,0
  3785  03B9  2BBC               	goto	l359
  3786                           
  3787                           ;main.c: 270:             go_open();
  3788  03BA  231A               	fcall	_go_open
  3789                           
  3790                           ;main.c: 271:         } else if (ff.bits.UNIVERSAL_VORK_MODE_ON) {
  3791  03BB  0008               	return
  3792  03BC                     l359:
  3793  03BC  1CF9               	btfss	_ff+3,1
  3794  03BD  0008               	return
  3795                           
  3796                           ;main.c: 272:             go_open_alt();
  3797  03BE  23EF               	fcall	_go_open_alt
  3798  03BF  0008               	return
  3799  03C0                     __end_of_open:
  3800                           
  3801                           	psect	text25
  3802  03EF                     __ptext25:	
  3803 ;; *************** function _go_open_alt *****************
  3804 ;; Defined at:
  3805 ;;		line 228 in file "main.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		None
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1
  3819 ;;      Params:         0       0       0
  3820 ;;      Locals:         0       0       0
  3821 ;;      Temps:          0       0       0
  3822 ;;      Totals:         0       0       0
  3823 ;;Total ram usage:        0 bytes
  3824 ;; Hardware stack levels used: 1
  3825 ;; Hardware stack levels required when called: 7
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_open
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833  03EF                     _go_open_alt:	
  3834                           ;psect for function _go_open_alt
  3835                           
  3836                           
  3837                           ;main.c: 229:     if (!ff.bits.OPENED && ff.bits.MOVING_ALLOWED) {
  3838                           
  3839                           ;incstack = 0
  3840                           ; Regs used in _go_open_alt: []
  3841  03EF  1977               	btfsc	_ff+1,2
  3842  03F0  0008               	return
  3843  03F1  1FF8               	btfss	_ff+2,7
  3844  03F2  0008               	return
  3845                           
  3846                           ;main.c: 230:         ff.bits.CLOSED = 0;
  3847  03F3  1277               	bcf	_ff+1,4
  3848                           
  3849                           ;main.c: 231:         ff.bits.OPENED = 1;
  3850  03F4  1577               	bsf	_ff+1,2
  3851                           
  3852                           ;main.c: 233:         ff.bits.RELE_CONTROL_ON = 0;
  3853  03F5  1377               	bcf	_ff+1,6
  3854                           
  3855                           ;main.c: 234:         ff.bits.RELE_POWER_ON = 0;
  3856  03F6  12F7               	bcf	_ff+1,5
  3857  03F7  0008               	return
  3858  03F8                     __end_of_go_open_alt:
  3859                           
  3860                           	psect	text26
  3861  03C0                     __ptext26:	
  3862 ;; *************** function _close *****************
  3863 ;; Defined at:
  3864 ;;		line 253 in file "main.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;		None
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, pclath, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1
  3878 ;;      Params:         0       0       0
  3879 ;;      Locals:         0       0       0
  3880 ;;      Temps:          0       0       0
  3881 ;;      Totals:         0       0       0
  3882 ;;Total ram usage:        0 bytes
  3883 ;; Hardware stack levels used: 1
  3884 ;; Hardware stack levels required when called: 8
  3885 ;; This function calls:
  3886 ;;		_go_close
  3887 ;;		_go_close_alt
  3888 ;;		_rele_off
  3889 ;; This function is called by:
  3890 ;;		_fun_work
  3891 ;;		_main
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895  03C0                     _close:	
  3896                           ;psect for function _close
  3897                           
  3898                           
  3899                           ;main.c: 254:     if (ff.bits.OPENING) {
  3900                           
  3901                           ;incstack = 0
  3902                           ; Regs used in _close: [wreg+status,2+status,0+pclath+cstack]
  3903  03C0  1CF7               	btfss	_ff+1,1
  3904  03C1  2BC4               	goto	l349
  3905                           
  3906                           ;main.c: 255:         rele_off();
  3907  03C2  232C               	fcall	_rele_off
  3908                           
  3909                           ;main.c: 256:     } else {
  3910  03C3  0008               	return
  3911  03C4                     l349:
  3912                           
  3913                           ;main.c: 257:         if (ff.bits.NORMAL_WORK_MODE_ON) {
  3914  03C4  1C79               	btfss	_ff+3,0
  3915  03C5  2BC8               	goto	l351
  3916                           
  3917                           ;main.c: 258:             go_close();
  3918  03C6  224A               	fcall	_go_close
  3919                           
  3920                           ;main.c: 259:         } else if (ff.bits.UNIVERSAL_VORK_MODE_ON) {
  3921  03C7  0008               	return
  3922  03C8                     l351:
  3923  03C8  1CF9               	btfss	_ff+3,1
  3924  03C9  0008               	return
  3925                           
  3926                           ;main.c: 260:             go_close_alt();
  3927  03CA  23E4               	fcall	_go_close_alt
  3928  03CB  0008               	return
  3929  03CC                     __end_of_close:
  3930                           
  3931                           	psect	text27
  3932  032C                     __ptext27:	
  3933 ;; *************** function _rele_off *****************
  3934 ;; Defined at:
  3935 ;;		line 238 in file "main.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1
  3949 ;;      Params:         0       0       0
  3950 ;;      Locals:         0       0       0
  3951 ;;      Temps:          1       0       0
  3952 ;;      Totals:         1       0       0
  3953 ;;Total ram usage:        1 bytes
  3954 ;; Hardware stack levels used: 1
  3955 ;; Hardware stack levels required when called: 7
  3956 ;; This function calls:
  3957 ;;		Nothing
  3958 ;; This function is called by:
  3959 ;;		_close
  3960 ;;		_open
  3961 ;;		_switch_wm
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965  032C                     _rele_off:	
  3966                           ;psect for function _rele_off
  3967                           
  3968                           
  3969                           ;main.c: 239:     ff.bits.RELE_CONTROL_ON = 0;
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in _rele_off: [wreg]
  3973  032C  1377               	bcf	_ff+1,6
  3974                           
  3975                           ;main.c: 240:     ff.bits.RELE_POWER_ON = 0;
  3976  032D  12F7               	bcf	_ff+1,5
  3977                           
  3978                           ;main.c: 241:     ff.bits.CLOSING = 0;
  3979  032E  11F7               	bcf	_ff+1,3
  3980                           
  3981                           ;main.c: 242:     ff.bits.OPENING = 0;
  3982  032F  10F7               	bcf	_ff+1,1
  3983                           
  3984                           ;main.c: 243:     ff.bits.CLOSED = 0;
  3985  0330  1277               	bcf	_ff+1,4
  3986                           
  3987                           ;main.c: 244:     if (ff.bits.UNIVERSAL_VORK_MODE_ON) {
  3988  0331  1CF9               	btfss	_ff+3,1
  3989  0332  2B35               	goto	l344
  3990                           
  3991                           ;main.c: 245:         ff.bits.OPENED = 1;
  3992  0333  1577               	bsf	_ff+1,2
  3993                           
  3994                           ;main.c: 246:     } else {
  3995  0334  2B36               	goto	l345
  3996  0335                     l344:
  3997                           
  3998                           ;main.c: 247:         ff.bits.OPENED = 0;
  3999  0335  1177               	bcf	_ff+1,2
  4000  0336                     l345:	
  4001                           ;main.c: 248:     }
  4002                           
  4003                           
  4004                           ;main.c: 249:     ff.bits.MOVING_ALLOWED = 0;
  4005  0336  13F8               	bcf	_ff+2,7
  4006                           
  4007                           ;main.c: 250:     time_moving_wait = MOVING_WAIT_DELAY;
  4008  0337  3002               	movlw	2
  4009  0338  00F2               	movwf	??_rele_off
  4010  0339  0872               	movf	??_rele_off,w
  4011  033A  0020               	movlb	0	; select bank0
  4012  033B  00BC               	movwf	_time_moving_wait
  4013  033C  0008               	return
  4014  033D                     __end_of_rele_off:
  4015                           
  4016                           	psect	text28
  4017  03E4                     __ptext28:	
  4018 ;; *************** function _go_close_alt *****************
  4019 ;; Defined at:
  4020 ;;		line 217 in file "main.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		None
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1
  4034 ;;      Params:         0       0       0
  4035 ;;      Locals:         0       0       0
  4036 ;;      Temps:          0       0       0
  4037 ;;      Totals:         0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used: 1
  4040 ;; Hardware stack levels required when called: 7
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_close
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048  03E4                     _go_close_alt:	
  4049                           ;psect for function _go_close_alt
  4050                           
  4051                           
  4052                           ;main.c: 219:     if ((!ff.bits.CLOSED && ff.bits.MOVING_ALLOWED) || ff.bits.ALARM_ON) {
  4053                           
  4054                           ;incstack = 0
  4055                           ; Regs used in _go_close_alt: []
  4056  03E4  1A77               	btfsc	_ff+1,4
  4057  03E5  2BE8               	goto	l336
  4058  03E6  1BF8               	btfsc	_ff+2,7
  4059  03E7  2BEA               	goto	l334
  4060  03E8                     l336:
  4061  03E8  1C76               	btfss	_ff,0
  4062  03E9  0008               	return
  4063  03EA                     l334:
  4064                           
  4065                           ;main.c: 220:         ff.bits.OPENED = 0;
  4066  03EA  1177               	bcf	_ff+1,2
  4067                           
  4068                           ;main.c: 221:         ff.bits.CLOSED = 1;
  4069  03EB  1677               	bsf	_ff+1,4
  4070                           
  4071                           ;main.c: 223:         ff.bits.RELE_CONTROL_ON = 0;
  4072  03EC  1377               	bcf	_ff+1,6
  4073                           
  4074                           ;main.c: 224:         ff.bits.RELE_POWER_ON = 1;
  4075  03ED  16F7               	bsf	_ff+1,5
  4076  03EE  0008               	return
  4077  03EF                     __end_of_go_close_alt:
  4078                           
  4079                           	psect	text29
  4080  024A                     __ptext29:	
  4081 ;; *************** function _go_close *****************
  4082 ;; Defined at:
  4083 ;;		line 160 in file "main.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		wreg
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMMON   BANK0   BANK1
  4097 ;;      Params:         0       0       0
  4098 ;;      Locals:         0       0       0
  4099 ;;      Temps:          0       0       0
  4100 ;;      Totals:         0       0       0
  4101 ;;Total ram usage:        0 bytes
  4102 ;; Hardware stack levels used: 1
  4103 ;; Hardware stack levels required when called: 7
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_close
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111  024A                     _go_close:	
  4112                           ;psect for function _go_close
  4113                           
  4114                           
  4115                           ;main.c: 162:     if (!ff.bits.CLOSING && !ff.bits.CLOSED && ff.bits.MOVING_ALLOWED) {
  4116                           
  4117                           ;incstack = 0
  4118                           ; Regs used in _go_close: [wreg]
  4119  024A  19F7               	btfsc	_ff+1,3
  4120  024B  0008               	return
  4121  024C  1A77               	btfsc	_ff+1,4
  4122  024D  0008               	return
  4123  024E  1FF8               	btfss	_ff+2,7
  4124  024F  0008               	return
  4125                           
  4126                           ;main.c: 163:         ff.bits.CLOSING = 1;
  4127  0250  15F7               	bsf	_ff+1,3
  4128                           
  4129                           ;main.c: 164:         ff.bits.OPENED = 0;
  4130  0251  1177               	bcf	_ff+1,2
  4131                           
  4132                           ;main.c: 165:         ff.bits.OPENING = 0;
  4133  0252  10F7               	bcf	_ff+1,1
  4134                           
  4135                           ;main.c: 167:         ff.bits.RELE_POWER_ON = 0;
  4136  0253  12F7               	bcf	_ff+1,5
  4137                           
  4138                           ;main.c: 168:         ff.bits.RELE_CONTROL_ON = 1;
  4139  0254  1777               	bsf	_ff+1,6
  4140                           
  4141                           ;main.c: 170:         time_rele_control = RELE_GAP + RELE_POWER_WORK_DELAY + RELE_GAP;
  4142  0255  3013               	movlw	19
  4143  0256  0020               	movlb	0	; select bank0
  4144  0257  00AF               	movwf	_time_rele_control
  4145  0258  3000               	movlw	0
  4146  0259  00B0               	movwf	_time_rele_control+1
  4147                           
  4148                           ;main.c: 171:         time_rele_power = RELE_POWER_WORK_DELAY;
  4149  025A  300F               	movlw	15
  4150  025B  00B1               	movwf	_time_rele_power
  4151  025C  3000               	movlw	0
  4152  025D  00B2               	movwf	_time_rele_power+1
  4153                           
  4154                           ;main.c: 172:         time_rele_gap = RELE_GAP;
  4155  025E  3002               	movlw	2
  4156  025F  00AD               	movwf	_time_rele_gap
  4157  0260  3000               	movlw	0
  4158  0261  00AE               	movwf	_time_rele_gap+1
  4159                           
  4160                           ;main.c: 174:         time_rotation = 0;
  4161  0262  3000               	movlw	0
  4162  0263  00A0               	movwf	_time_rotation
  4163  0264  3000               	movlw	0
  4164  0265  00A1               	movwf	_time_rotation+1
  4165  0266  3000               	movlw	0
  4166  0267  00A2               	movwf	_time_rotation+2
  4167  0268  0008               	return
  4168  0269                     __end_of_go_close:
  4169                           
  4170                           	psect	text30
  4171  00C7                     __ptext30:	
  4172 ;; *************** function _autorotation_work *****************
  4173 ;; Defined at:
  4174 ;;		line 378 in file "main.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg, status,2, status,0, pclath, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMMON   BANK0   BANK1
  4188 ;;      Params:         0       0       0
  4189 ;;      Locals:         0       0       0
  4190 ;;      Temps:          1       0       0
  4191 ;;      Totals:         1       0       0
  4192 ;;Total ram usage:        1 bytes
  4193 ;; Hardware stack levels used: 1
  4194 ;; Hardware stack levels required when called: 8
  4195 ;; This function calls:
  4196 ;;		_go_close_short
  4197 ;;		_go_open
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203  00C7                     _autorotation_work:	
  4204                           ;psect for function _autorotation_work
  4205                           
  4206                           
  4207                           ;main.c: 379:     if ((time_rotation > AUTOROTATION_DELAY) &&
  4208                           
  4209                           ;incstack = 0
  4210                           ; Regs used in _autorotation_work: [wreg+status,2+status,0+pclath+cstack]
  4211  00C7  3000               	movlw	0
  4212  00C8  0020               	movlb	0	; select bank0
  4213  00C9  0222               	subwf	_time_rotation+2,w
  4214  00CA  1D03               	skipz
  4215  00CB  28D2               	goto	u2255
  4216  00CC  3000               	movlw	0
  4217  00CD  0221               	subwf	_time_rotation+1,w
  4218  00CE  1D03               	skipz
  4219  00CF  28D2               	goto	u2255
  4220  00D0  3079               	movlw	121
  4221  00D1  0220               	subwf	_time_rotation,w
  4222  00D2                     u2255:
  4223  00D2  1803               	btfsc	3,0
  4224  00D3  1A77               	btfsc	_ff+1,4
  4225  00D4  28E5               	goto	l2325
  4226  00D5  1DF7               	btfss	_ff+1,3
  4227  00D6  1CF6               	btfss	_ff,1
  4228  00D7  28E5               	goto	l2325
  4229  00D8  1BF8               	btfsc	_ff+2,7
  4230  00D9  1C79               	btfss	_ff+3,0
  4231  00DA  28E5               	goto	l2325
  4232                           
  4233                           ;main.c: 385:             ) {;main.c: 386:               go_close_short();
  4234  00DB  2269               	fcall	_go_close_short
  4235                           
  4236                           ;main.c: 387:               beep_short_count=3;
  4237  00DC  3003               	movlw	3
  4238  00DD  00F2               	movwf	??_autorotation_work
  4239  00DE  0872               	movf	??_autorotation_work,w
  4240  00DF  00FA               	movwf	_beep_short_count
  4241                           
  4242                           ;main.c: 388:               beep_long_count=3;
  4243  00E0  3003               	movlw	3
  4244  00E1  00F2               	movwf	??_autorotation_work
  4245  00E2  0872               	movf	??_autorotation_work,w
  4246  00E3  0020               	movlb	0	; select bank0
  4247  00E4  00BA               	movwf	_beep_long_count
  4248  00E5                     l2325:
  4249                           
  4250                           ;main.c: 391:     if ((time_rotation > (AUTOROTATION_DELAY + RELE_POWER_AUTOROTATION_DEL
      +                          AY + RELE_GAP * 2)) &&
  4251  00E5  3000               	movlw	0
  4252  00E6  0222               	subwf	_time_rotation+2,w
  4253  00E7  1D03               	skipz
  4254  00E8  28EF               	goto	u2315
  4255  00E9  3000               	movlw	0
  4256  00EA  0221               	subwf	_time_rotation+1,w
  4257  00EB  1D03               	skipz
  4258  00EC  28EF               	goto	u2315
  4259  00ED  3082               	movlw	130
  4260  00EE  0220               	subwf	_time_rotation,w
  4261  00EF                     u2315:
  4262  00EF  1C03               	skipc
  4263  00F0  0008               	return
  4264  00F1  1E77               	btfss	_ff+1,4
  4265  00F2  0008               	return
  4266  00F3  1DF7               	btfss	_ff+1,3
  4267  00F4  0008               	return
  4268  00F5  1CF6               	btfss	_ff,1
  4269  00F6  0008               	return
  4270  00F7  1FF8               	btfss	_ff+2,7
  4271  00F8  0008               	return
  4272  00F9  1C79               	btfss	_ff+3,0
  4273  00FA  0008               	return
  4274                           
  4275                           ;main.c: 397:             ) {;main.c: 398:         go_open();
  4276  00FB  231A               	fcall	_go_open
  4277                           
  4278                           ;main.c: 399:         time_rotation = 0;
  4279  00FC  3000               	movlw	0
  4280  00FD  0020               	movlb	0	; select bank0
  4281  00FE  00A0               	movwf	_time_rotation
  4282  00FF  3000               	movlw	0
  4283  0100  00A1               	movwf	_time_rotation+1
  4284  0101  3000               	movlw	0
  4285  0102  00A2               	movwf	_time_rotation+2
  4286  0103  0008               	return
  4287  0104                     __end_of_autorotation_work:
  4288                           
  4289                           	psect	text31
  4290  031A                     __ptext31:	
  4291 ;; *************** function _go_open *****************
  4292 ;; Defined at:
  4293 ;;		line 199 in file "main.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1
  4307 ;;      Params:         0       0       0
  4308 ;;      Locals:         0       0       0
  4309 ;;      Temps:          0       0       0
  4310 ;;      Totals:         0       0       0
  4311 ;;Total ram usage:        0 bytes
  4312 ;; Hardware stack levels used: 1
  4313 ;; Hardware stack levels required when called: 7
  4314 ;; This function calls:
  4315 ;;		Nothing
  4316 ;; This function is called by:
  4317 ;;		_open
  4318 ;;		_autorotation_work
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322  031A                     _go_open:	
  4323                           ;psect for function _go_open
  4324                           
  4325                           
  4326                           ;main.c: 201:     if (!ff.bits.OPENED && !ff.bits.OPENING && ff.bits.MOVING_ALLOWED) {
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _go_open: [wreg]
  4330  031A  1977               	btfsc	_ff+1,2
  4331  031B  0008               	return
  4332  031C  18F7               	btfsc	_ff+1,1
  4333  031D  0008               	return
  4334  031E  1FF8               	btfss	_ff+2,7
  4335  031F  0008               	return
  4336                           
  4337                           ;main.c: 202:         ff.bits.OPENING = 1;
  4338  0320  14F7               	bsf	_ff+1,1
  4339                           
  4340                           ;main.c: 203:         ff.bits.CLOSED = 0;
  4341  0321  1277               	bcf	_ff+1,4
  4342                           
  4343                           ;main.c: 204:         ff.bits.CLOSING = 0;
  4344  0322  11F7               	bcf	_ff+1,3
  4345                           
  4346                           ;main.c: 207:         ff.bits.RELE_CONTROL_ON = 0;
  4347  0323  1377               	bcf	_ff+1,6
  4348                           
  4349                           ;main.c: 208:         ff.bits.RELE_POWER_ON = 1;
  4350  0324  16F7               	bsf	_ff+1,5
  4351                           
  4352                           ;main.c: 210:         time_rele_power = RELE_POWER_WORK_DELAY;
  4353  0325  300F               	movlw	15
  4354  0326  0020               	movlb	0	; select bank0
  4355  0327  00B1               	movwf	_time_rele_power
  4356  0328  3000               	movlw	0
  4357  0329  00B2               	movwf	_time_rele_power+1
  4358                           
  4359                           ;main.c: 212:         ff.bits.AUTOROTATION_WORK = 0;
  4360  032A  12F9               	bcf	_ff+3,5
  4361  032B  0008               	return
  4362  032C                     __end_of_go_open:
  4363                           
  4364                           	psect	text32
  4365  0269                     __ptext32:	
  4366 ;; *************** function _go_close_short *****************
  4367 ;; Defined at:
  4368 ;;		line 179 in file "main.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;		None
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;		None
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  1    wreg      void 
  4375 ;; Registers used:
  4376 ;;		wreg
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1
  4382 ;;      Params:         0       0       0
  4383 ;;      Locals:         0       0       0
  4384 ;;      Temps:          0       0       0
  4385 ;;      Totals:         0       0       0
  4386 ;;Total ram usage:        0 bytes
  4387 ;; Hardware stack levels used: 1
  4388 ;; Hardware stack levels required when called: 7
  4389 ;; This function calls:
  4390 ;;		Nothing
  4391 ;; This function is called by:
  4392 ;;		_autorotation_work
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396  0269                     _go_close_short:	
  4397                           ;psect for function _go_close_short
  4398                           
  4399                           
  4400                           ;main.c: 181:     if (!ff.bits.CLOSING && !ff.bits.CLOSED && ff.bits.MOVING_ALLOWED) {
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in _go_close_short: [wreg]
  4404  0269  19F7               	btfsc	_ff+1,3
  4405  026A  0008               	return
  4406  026B  1A77               	btfsc	_ff+1,4
  4407  026C  0008               	return
  4408  026D  1FF8               	btfss	_ff+2,7
  4409  026E  0008               	return
  4410                           
  4411                           ;main.c: 182:         ff.bits.CLOSING = 1;
  4412  026F  15F7               	bsf	_ff+1,3
  4413                           
  4414                           ;main.c: 183:         ff.bits.OPENED = 0;
  4415  0270  1177               	bcf	_ff+1,2
  4416                           
  4417                           ;main.c: 184:         ff.bits.OPENING = 0;
  4418  0271  10F7               	bcf	_ff+1,1
  4419                           
  4420                           ;main.c: 186:         ff.bits.RELE_POWER_ON = 0;
  4421  0272  12F7               	bcf	_ff+1,5
  4422                           
  4423                           ;main.c: 187:         ff.bits.RELE_CONTROL_ON = 1;
  4424  0273  1777               	bsf	_ff+1,6
  4425                           
  4426                           ;main.c: 189:         time_rele_control = RELE_GAP + RELE_POWER_AUTOROTATION_DELAY + REL
      +                          E_GAP;
  4427  0274  3009               	movlw	9
  4428  0275  0020               	movlb	0	; select bank0
  4429  0276  00AF               	movwf	_time_rele_control
  4430  0277  3000               	movlw	0
  4431  0278  00B0               	movwf	_time_rele_control+1
  4432                           
  4433                           ;main.c: 190:         time_rele_power = RELE_POWER_AUTOROTATION_DELAY;
  4434  0279  3005               	movlw	5
  4435  027A  00B1               	movwf	_time_rele_power
  4436  027B  3000               	movlw	0
  4437  027C  00B2               	movwf	_time_rele_power+1
  4438                           
  4439                           ;main.c: 191:         time_rele_gap = RELE_GAP;
  4440  027D  3002               	movlw	2
  4441  027E  00AD               	movwf	_time_rele_gap
  4442  027F  3000               	movlw	0
  4443  0280  00AE               	movwf	_time_rele_gap+1
  4444                           
  4445                           ;main.c: 193:         time_rotation = 0;
  4446  0281  3000               	movlw	0
  4447  0282  00A0               	movwf	_time_rotation
  4448  0283  3000               	movlw	0
  4449  0284  00A1               	movwf	_time_rotation+1
  4450  0285  3000               	movlw	0
  4451  0286  00A2               	movwf	_time_rotation+2
  4452  0287  0008               	return
  4453  0288                     __end_of_go_close_short:
  4454                           
  4455                           	psect	intentry
  4456  0004                     __pintentry:	
  4457 ;; *************** function _INTERRUPT_InterruptManager *****************
  4458 ;; Defined at:
  4459 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;		None
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;		None
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, pclath, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1
  4473 ;;      Params:         0       0       0
  4474 ;;      Locals:         0       0       0
  4475 ;;      Temps:          0       0       0
  4476 ;;      Totals:         0       0       0
  4477 ;;Total ram usage:        0 bytes
  4478 ;; Hardware stack levels used: 1
  4479 ;; Hardware stack levels required when called: 6
  4480 ;; This function calls:
  4481 ;;		_TMR0_ISR
  4482 ;;		_TMR2_ISR
  4483 ;; This function is called by:
  4484 ;;		Interrupt level 1
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488  0004                     _INTERRUPT_InterruptManager:
  4489                           
  4490                           ;incstack = 0
  4491  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4492                           
  4493                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4494  0005  3180               	pagesel	$
  4495                           
  4496                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4497  0006  1A8B               	btfsc	11,5	;volatile
  4498  0007  1D0B               	btfss	11,2	;volatile
  4499  0008  280B               	goto	i1l108
  4500                           
  4501                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4502  0009  23A6               	fcall	_TMR0_ISR
  4503                           
  4504                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4505  000A  2814               	goto	i1l114
  4506  000B                     i1l108:	
  4507                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  4508                           
  4509  000B  1F0B               	btfss	11,6	;volatile
  4510  000C  2814               	goto	i1l114
  4511                           
  4512                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  4513  000D  0021               	movlb	1	; select bank1
  4514  000E  1C91               	btfss	17,1	;volatile
  4515  000F  2814               	goto	i1l114
  4516  0010  0020               	movlb	0	; select bank0
  4517  0011  1C91               	btfss	17,1	;volatile
  4518  0012  2814               	goto	i1l114
  4519                           
  4520                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  4521  0013  23CC               	fcall	_TMR2_ISR
  4522  0014                     i1l114:	
  4523                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  4524                           
  4525                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  4526                           
  4527  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4528  0015  0009               	retfie
  4529  0016                     __end_of_INTERRUPT_InterruptManager:
  4530                           
  4531                           	psect	text34
  4532  03CC                     __ptext34:	
  4533 ;; *************** function _TMR2_ISR *****************
  4534 ;; Defined at:
  4535 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0, pclath, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1
  4549 ;;      Params:         0       0       0
  4550 ;;      Locals:         0       0       0
  4551 ;;      Temps:          0       0       0
  4552 ;;      Totals:         0       0       0
  4553 ;;Total ram usage:        0 bytes
  4554 ;; Hardware stack levels used: 1
  4555 ;; Hardware stack levels required when called: 5
  4556 ;; This function calls:
  4557 ;;		Absolute function
  4558 ;;		_TMR2_DefaultInterruptHandler
  4559 ;;		_ms_tick
  4560 ;; This function is called by:
  4561 ;;		_INTERRUPT_InterruptManager
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565  03CC                     _TMR2_ISR:	
  4566                           ;psect for function _TMR2_ISR
  4567                           
  4568                           
  4569                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  4573  03CC  0020               	movlb	0	; select bank0
  4574  03CD  1091               	bcf	17,1	;volatile
  4575                           
  4576                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
  4577  03CE  0841               	movf	_TMR2_InterruptHandler,w
  4578  03CF  0442               	iorwf	_TMR2_InterruptHandler+1,w
  4579  03D0  1903               	btfsc	3,2
  4580  03D1  0008               	return
  4581                           
  4582                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
  4583  03D2  0842               	movf	_TMR2_InterruptHandler+1,w
  4584  03D3  008A               	movwf	10
  4585  03D4  0841               	movf	_TMR2_InterruptHandler,w
  4586  03D5  000A               	callw
  4587  03D6  3183               	pagesel	$
  4588  03D7  0008               	return
  4589  03D8                     __end_of_TMR2_ISR:
  4590                           
  4591                           	psect	text35
  4592  0466                     __ptext35:	
  4593 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  4594 ;; Defined at:
  4595 ;;		line 136 in file "mcc_generated_files/tmr2.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		None
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1
  4609 ;;      Params:         0       0       0
  4610 ;;      Locals:         0       0       0
  4611 ;;      Temps:          0       0       0
  4612 ;;      Totals:         0       0       0
  4613 ;;Total ram usage:        0 bytes
  4614 ;; Hardware stack levels used: 1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_TMR2_Initialize
  4619 ;;		_TMR2_ISR
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623  0466                     _TMR2_DefaultInterruptHandler:	
  4624                           ;psect for function _TMR2_DefaultInterruptHandler
  4625                           
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  4629  0466  0008               	return
  4630  0467                     __end_of_TMR2_DefaultInterruptHandler:
  4631                           
  4632                           	psect	text36
  4633  01AB                     __ptext36:	
  4634 ;; *************** function _ms_tick *****************
  4635 ;; Defined at:
  4636 ;;		line 520 in file "main.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;		None
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1
  4650 ;;      Params:         0       0       0
  4651 ;;      Locals:         0       0       0
  4652 ;;      Temps:          0       0       0
  4653 ;;      Totals:         0       0       0
  4654 ;;Total ram usage:        0 bytes
  4655 ;; Hardware stack levels used: 1
  4656 ;; Hardware stack levels required when called: 4
  4657 ;; This function calls:
  4658 ;;		_ms_100_work
  4659 ;;		_ms_200_work
  4660 ;;		_sec_work
  4661 ;;		_stop_tone
  4662 ;; This function is called by:
  4663 ;;		_start_setup
  4664 ;;		_TMR2_ISR
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668  01AB                     _ms_tick:	
  4669                           ;psect for function _ms_tick
  4670                           
  4671                           
  4672                           ;main.c: 521:     static unsigned ms_count = 0;;main.c: 522:     static unsigned s_count
      +                           = 0;;main.c: 523:     ms_count++;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _ms_tick: [wreg+status,2+status,0+pclath+cstack]
  4676  01AB  3001               	movlw	1
  4677  01AC  0020               	movlb	0	; select bank0
  4678  01AD  07A5               	addwf	ms_tick@ms_count,f
  4679  01AE  3000               	movlw	0
  4680  01AF  3DA6               	addwfc	ms_tick@ms_count+1,f
  4681                           
  4682                           ;main.c: 524:     if (time_tone > 0) {
  4683  01B0  082B               	movf	_time_tone,w
  4684  01B1  042C               	iorwf	_time_tone+1,w
  4685  01B2  1903               	btfsc	3,2
  4686  01B3  29BD               	goto	i1l2217
  4687                           
  4688                           ;main.c: 525:         time_tone--;
  4689  01B4  3001               	movlw	1
  4690  01B5  02AB               	subwf	_time_tone,f
  4691  01B6  3000               	movlw	0
  4692  01B7  3BAC               	subwfb	_time_tone+1,f
  4693                           
  4694                           ;main.c: 526:         if (time_tone == 0) {
  4695  01B8  082B               	movf	_time_tone,w
  4696  01B9  042C               	iorwf	_time_tone+1,w
  4697  01BA  1D03               	btfss	3,2
  4698  01BB  29BD               	goto	i1l2217
  4699                           
  4700                           ;main.c: 527:             stop_tone();
  4701  01BC  2440               	fcall	_stop_tone
  4702  01BD                     i1l2217:
  4703                           
  4704                           ;main.c: 531:     ff.bits.ALLOW_FUN = 1;
  4705  01BD  16F6               	bsf	_ff,5
  4706                           
  4707                           ;main.c: 532:     ff.bits.ALLOW_JUMP = 1;
  4708  01BE  1776               	bsf	_ff,6
  4709                           
  4710                           ;main.c: 534:     if (ms_count == 100) {
  4711  01BF  3064               	movlw	100
  4712  01C0  0020               	movlb	0	; select bank0
  4713  01C1  0625               	xorwf	ms_tick@ms_count,w
  4714  01C2  0426               	iorwf	ms_tick@ms_count+1,w
  4715  01C3  1D03               	btfss	3,2
  4716  01C4  29CE               	goto	i1l2231
  4717                           
  4718                           ;main.c: 535:         ms_100_work();
  4719  01C5  2436               	fcall	_ms_100_work
  4720                           
  4721                           ;main.c: 536:         ms_200_work();
  4722  01C6  2288               	fcall	_ms_200_work
  4723                           
  4724                           ;main.c: 537:         s_count++;
  4725  01C7  3001               	movlw	1
  4726  01C8  0020               	movlb	0	; select bank0
  4727  01C9  07A3               	addwf	ms_tick@s_count,f
  4728  01CA  3000               	movlw	0
  4729  01CB  3DA4               	addwfc	ms_tick@s_count+1,f
  4730                           
  4731                           ;main.c: 538:         ms_count = 0;
  4732  01CC  01A5               	clrf	ms_tick@ms_count
  4733  01CD  01A6               	clrf	ms_tick@ms_count+1
  4734  01CE                     i1l2231:
  4735                           
  4736                           ;main.c: 546:     if (s_count == 10) {
  4737  01CE  300A               	movlw	10
  4738  01CF  0623               	xorwf	ms_tick@s_count,w
  4739  01D0  0424               	iorwf	ms_tick@s_count+1,w
  4740  01D1  1D03               	btfss	3,2
  4741  01D2  0008               	return
  4742                           
  4743                           ;main.c: 547:         sec_work();
  4744  01D3  2026               	fcall	_sec_work
  4745                           
  4746                           ;main.c: 548:         s_count = 0;
  4747  01D4  0020               	movlb	0	; select bank0
  4748  01D5  01A3               	clrf	ms_tick@s_count
  4749  01D6  01A4               	clrf	ms_tick@s_count+1
  4750  01D7  0008               	return
  4751  01D8                     __end_of_ms_tick:
  4752                           
  4753                           	psect	text37
  4754  0440                     __ptext37:	
  4755 ;; *************** function _stop_tone *****************
  4756 ;; Defined at:
  4757 ;;		line 128 in file "main.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		None
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMMON   BANK0   BANK1
  4771 ;;      Params:         0       0       0
  4772 ;;      Locals:         0       0       0
  4773 ;;      Temps:          0       0       0
  4774 ;;      Totals:         0       0       0
  4775 ;;Total ram usage:        0 bytes
  4776 ;; Hardware stack levels used: 1
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_ms_tick
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784  0440                     _stop_tone:	
  4785                           ;psect for function _stop_tone
  4786                           
  4787                           
  4788                           ;main.c: 129:     ff.bits.ZUM_BUSY = 0;
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _stop_tone: []
  4792  0440  1278               	bcf	_ff+2,4
  4793                           
  4794                           ;main.c: 130:     ff.bits.TONE_ON = 0;
  4795  0441  10F8               	bcf	_ff+2,1
  4796                           
  4797                           ;main.c: 131:     ff.bits.TONE_OFF = 1;
  4798  0442  1578               	bsf	_ff+2,2
  4799  0443  0008               	return
  4800  0444                     __end_of_stop_tone:
  4801                           
  4802                           	psect	text38
  4803  0026                     __ptext38:	
  4804 ;; *************** function _sec_work *****************
  4805 ;; Defined at:
  4806 ;;		line 438 in file "main.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;		None
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, pclath, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1
  4820 ;;      Params:         0       0       0
  4821 ;;      Locals:         0       0       0
  4822 ;;      Temps:          1       0       0
  4823 ;;      Totals:         1       0       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used: 1
  4826 ;; Hardware stack levels required when called: 1
  4827 ;; This function calls:
  4828 ;;		_minute_tick
  4829 ;;		_rele_tick
  4830 ;;		_sec_30_work
  4831 ;; This function is called by:
  4832 ;;		_ms_tick
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836  0026                     _sec_work:	
  4837                           ;psect for function _sec_work
  4838                           
  4839                           
  4840                           ;main.c: 446:     sec_count++;
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in _sec_work: [wreg+status,2+status,0+pclath+cstack]
  4844  0026  3001               	movlw	1
  4845  0027  00F1               	movwf	??_sec_work
  4846  0028  0871               	movf	??_sec_work,w
  4847  0029  0020               	movlb	0	; select bank0
  4848  002A  07BE               	addwf	_sec_count,f
  4849                           
  4850                           ;main.c: 447:     if (!ff.bits.MOVING_ALLOWED) {
  4851  002B  1BF8               	btfsc	_ff+2,7
  4852  002C  2834               	goto	i1l413
  4853                           
  4854                           ;main.c: 448:         if (time_moving_wait > 0) {
  4855  002D  083C               	movf	_time_moving_wait,w
  4856  002E  1903               	btfsc	3,2
  4857  002F  2833               	goto	i1l414
  4858                           
  4859                           ;main.c: 449:             time_moving_wait--;
  4860  0030  3001               	movlw	1
  4861  0031  02BC               	subwf	_time_moving_wait,f
  4862                           
  4863                           ;main.c: 450:         } else {
  4864  0032  2834               	goto	i1l413
  4865  0033                     i1l414:
  4866                           
  4867                           ;main.c: 451:             ff.bits.MOVING_ALLOWED = 1;
  4868  0033  17F8               	bsf	_ff+2,7
  4869  0034                     i1l413:	
  4870                           ;main.c: 453:     }
  4871                           
  4872                           
  4873                           ;main.c: 454:     if (ff.bits.NORMAL_WORK_MODE_ON) {
  4874  0034  1C79               	btfss	_ff+3,0
  4875  0035  2843               	goto	i1l2085
  4876                           
  4877                           ;main.c: 455:         if (ff.bits.OPENED){
  4878  0036  1D77               	btfss	_ff+1,2
  4879  0037  2842               	goto	i1l2083
  4880                           
  4881                           ;main.c: 456:             time_rotation++;
  4882  0038  3001               	movlw	1
  4883  0039  07A0               	addwf	_time_rotation,f
  4884  003A  3000               	movlw	0
  4885  003B  1803               	skipnc
  4886  003C  3001               	movlw	1
  4887  003D  07A1               	addwf	_time_rotation+1,f
  4888  003E  3000               	movlw	0
  4889  003F  1803               	skipnc
  4890  0040  3001               	movlw	1
  4891  0041  07A2               	addwf	_time_rotation+2,f
  4892  0042                     i1l2083:
  4893                           
  4894                           ;main.c: 458:         rele_tick();
  4895  0042  2104               	fcall	_rele_tick
  4896  0043                     i1l2085:
  4897                           
  4898                           ;main.c: 461:     if (ff.bits.ALARM_ON) {
  4899  0043  1C76               	btfss	_ff,0
  4900  0044  285D               	goto	i1l418
  4901                           
  4902                           ;main.c: 463:         if (sec_count == 30|| sec_count==60) {
  4903  0045  301E               	movlw	30
  4904  0046  0020               	movlb	0	; select bank0
  4905  0047  063E               	xorwf	_sec_count,w
  4906  0048  1903               	btfsc	3,2
  4907  0049  284E               	goto	i1l2091
  4908  004A  303C               	movlw	60
  4909  004B  063E               	xorwf	_sec_count,w
  4910  004C  1D03               	btfss	3,2
  4911  004D  284F               	goto	i1l2093
  4912  004E                     i1l2091:
  4913                           
  4914                           ;main.c: 464:             sec_30_work();
  4915  004E  23F8               	fcall	_sec_30_work
  4916  004F                     i1l2093:
  4917                           
  4918                           ;main.c: 467:         ff.bits.LED_ON = !ff.bits.LED_ON;
  4919  004F  1003               	clrc
  4920  0050  1D79               	btfss	_ff+3,2
  4921  0051  1403               	setc
  4922  0052  3000               	movlw	0
  4923  0053  3D09               	addwfc	9,w
  4924  0054  00F1               	movwf	??_sec_work
  4925  0055  0DF1               	rlf	??_sec_work,f
  4926  0056  0DF1               	rlf	??_sec_work,f
  4927  0057  0879               	movf	_ff+3,w
  4928  0058  0671               	xorwf	??_sec_work,w
  4929  0059  39FB               	andlw	-5
  4930  005A  0671               	xorwf	??_sec_work,w
  4931  005B  00F9               	movwf	_ff+3
  4932                           
  4933                           ;main.c: 469:     } else if (ff.bits.ALARM_OFF) {
  4934  005C  2876               	goto	i1l2103
  4935  005D                     i1l418:
  4936  005D  1CF6               	btfss	_ff,1
  4937  005E  2876               	goto	i1l2103
  4938                           
  4939                           ;main.c: 471:         static char iled;;main.c: 472:         iled++;
  4940  005F  3001               	movlw	1
  4941  0060  00F1               	movwf	??_sec_work
  4942  0061  0871               	movf	??_sec_work,w
  4943  0062  0020               	movlb	0	; select bank0
  4944  0063  07B8               	addwf	sec_work@iled,f
  4945                           
  4946                           ;main.c: 473:         if (iled > 2) {
  4947  0064  3003               	movlw	3
  4948  0065  0238               	subwf	sec_work@iled,w
  4949  0066  1C03               	skipc
  4950  0067  2876               	goto	i1l2103
  4951                           
  4952                           ;main.c: 474:             ff.bits.LED_ON = !ff.bits.LED_ON;
  4953  0068  1003               	clrc
  4954  0069  1D79               	btfss	_ff+3,2
  4955  006A  1403               	setc
  4956  006B  3000               	movlw	0
  4957  006C  3D09               	addwfc	9,w
  4958  006D  00F1               	movwf	??_sec_work
  4959  006E  0DF1               	rlf	??_sec_work,f
  4960  006F  0DF1               	rlf	??_sec_work,f
  4961  0070  0879               	movf	_ff+3,w
  4962  0071  0671               	xorwf	??_sec_work,w
  4963  0072  39FB               	andlw	-5
  4964  0073  0671               	xorwf	??_sec_work,w
  4965  0074  00F9               	movwf	_ff+3
  4966                           
  4967                           ;main.c: 475:             iled = 0;
  4968  0075  01B8               	clrf	sec_work@iled
  4969  0076                     i1l2103:
  4970                           
  4971                           ;main.c: 481:     if (sec_count == 60) {
  4972  0076  303C               	movlw	60
  4973  0077  0020               	movlb	0	; select bank0
  4974  0078  063E               	xorwf	_sec_count,w
  4975  0079  1D03               	btfss	3,2
  4976  007A  0008               	return
  4977                           
  4978                           ;main.c: 482:         minute_tick();
  4979  007B  235D               	fcall	_minute_tick
  4980                           
  4981                           ;main.c: 483:         sec_count = 0;
  4982  007C  0020               	movlb	0	; select bank0
  4983  007D  01BE               	clrf	_sec_count
  4984  007E  0008               	return
  4985  007F                     __end_of_sec_work:
  4986                           
  4987                           	psect	text39
  4988  03F8                     __ptext39:	
  4989 ;; *************** function _sec_30_work *****************
  4990 ;; Defined at:
  4991 ;;		line 430 in file "main.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1
  5005 ;;      Params:         0       0       0
  5006 ;;      Locals:         0       0       0
  5007 ;;      Temps:          1       0       0
  5008 ;;      Totals:         1       0       0
  5009 ;;Total ram usage:        1 bytes
  5010 ;; Hardware stack levels used: 1
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_sec_work
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018  03F8                     _sec_30_work:	
  5019                           ;psect for function _sec_30_work
  5020                           
  5021                           
  5022                           ;main.c: 431:     if (ff.bits.SIREN) {
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _sec_30_work: [wreg]
  5026  03F8  1DF8               	btfss	_ff+2,3
  5027  03F9  2BFC               	goto	i1l1987
  5028                           
  5029                           ;main.c: 432:         ff.bits.SIREN = 0;
  5030  03FA  11F8               	bcf	_ff+2,3
  5031                           
  5032                           ;main.c: 433:     } else {
  5033  03FB  0008               	return
  5034  03FC                     i1l1987:
  5035                           
  5036                           ;main.c: 434:         beep_short_count = 3;
  5037  03FC  3003               	movlw	3
  5038  03FD  00F0               	movwf	??_sec_30_work
  5039  03FE  0870               	movf	??_sec_30_work,w
  5040  03FF  00FA               	movwf	_beep_short_count
  5041  0400  0008               	return
  5042  0401                     __end_of_sec_30_work:
  5043                           
  5044                           	psect	text40
  5045  0104                     __ptext40:	
  5046 ;; *************** function _rele_tick *****************
  5047 ;; Defined at:
  5048 ;;		line 277 in file "main.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;		None
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1
  5062 ;;      Params:         0       0       0
  5063 ;;      Locals:         0       0       0
  5064 ;;      Temps:          0       0       0
  5065 ;;      Totals:         0       0       0
  5066 ;;Total ram usage:        0 bytes
  5067 ;; Hardware stack levels used: 1
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_sec_work
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075  0104                     _rele_tick:	
  5076                           ;psect for function _rele_tick
  5077                           
  5078                           
  5079                           ;main.c: 279:     if (ff.bits.OPENING && ff.bits.CLOSING) {
  5080                           
  5081                           ;incstack = 0
  5082                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  5083  0104  1CF7               	btfss	_ff+1,1
  5084  0105  2908               	goto	i1l365
  5085  0106  19F7               	btfsc	_ff+1,3
  5086  0107  0008               	return
  5087  0108                     i1l365:	
  5088                           ;main.c: 281:     }
  5089                           
  5090                           
  5091                           ;main.c: 284:     if (ff.bits.OPENING) {
  5092  0108  1CF7               	btfss	_ff+1,1
  5093  0109  291A               	goto	i1l367
  5094                           
  5095                           ;main.c: 285:         if (time_rele_power > 0) {
  5096  010A  0020               	movlb	0	; select bank0
  5097  010B  0831               	movf	_time_rele_power,w
  5098  010C  0432               	iorwf	_time_rele_power+1,w
  5099  010D  1903               	btfsc	3,2
  5100  010E  291A               	goto	i1l367
  5101                           
  5102                           ;main.c: 286:             time_rele_power--;
  5103  010F  3001               	movlw	1
  5104  0110  02B1               	subwf	_time_rele_power,f
  5105  0111  3000               	movlw	0
  5106  0112  3BB2               	subwfb	_time_rele_power+1,f
  5107                           
  5108                           ;main.c: 287:             if (time_rele_power == 0) {
  5109  0113  0831               	movf	_time_rele_power,w
  5110  0114  0432               	iorwf	_time_rele_power+1,w
  5111  0115  1D03               	btfss	3,2
  5112  0116  291A               	goto	i1l367
  5113                           
  5114                           ;main.c: 288:                 ff.bits.RELE_POWER_ON = 0;
  5115  0117  12F7               	bcf	_ff+1,5
  5116                           
  5117                           ;main.c: 289:                 ff.bits.OPENED = 1;
  5118  0118  1577               	bsf	_ff+1,2
  5119                           
  5120                           ;main.c: 290:                 ff.bits.OPENING = 0;
  5121  0119  10F7               	bcf	_ff+1,1
  5122  011A                     i1l367:	
  5123                           ;main.c: 293:     }
  5124                           
  5125                           
  5126                           ;main.c: 296:     if (ff.bits.CLOSING) {
  5127  011A  1DF7               	btfss	_ff+1,3
  5128  011B  0008               	return
  5129                           
  5130                           ;main.c: 298:         if (time_rele_gap == 0) {
  5131  011C  0020               	movlb	0	; select bank0
  5132  011D  082D               	movf	_time_rele_gap,w
  5133  011E  042E               	iorwf	_time_rele_gap+1,w
  5134  011F  1D03               	btfss	3,2
  5135  0120  292D               	goto	i1l1965
  5136                           
  5137                           ;main.c: 299:             if (time_rele_power > 0) {
  5138  0121  0831               	movf	_time_rele_power,w
  5139  0122  0432               	iorwf	_time_rele_power+1,w
  5140  0123  1903               	btfsc	3,2
  5141  0124  292B               	goto	i1l372
  5142                           
  5143                           ;main.c: 300:                 ff.bits.RELE_POWER_ON = 1;
  5144  0125  16F7               	bsf	_ff+1,5
  5145                           
  5146                           ;main.c: 301:                 time_rele_power--;
  5147  0126  3001               	movlw	1
  5148  0127  02B1               	subwf	_time_rele_power,f
  5149  0128  3000               	movlw	0
  5150  0129  3BB2               	subwfb	_time_rele_power+1,f
  5151                           
  5152                           ;main.c: 302:             } else {
  5153  012A  2931               	goto	i1l1967
  5154  012B                     i1l372:
  5155                           
  5156                           ;main.c: 303:                 ff.bits.RELE_POWER_ON = 0;
  5157  012B  12F7               	bcf	_ff+1,5
  5158  012C  2931               	goto	i1l1967
  5159  012D                     i1l1965:
  5160                           
  5161                           ;main.c: 306:             time_rele_gap--;
  5162  012D  3001               	movlw	1
  5163  012E  02AD               	subwf	_time_rele_gap,f
  5164  012F  3000               	movlw	0
  5165  0130  3BAE               	subwfb	_time_rele_gap+1,f
  5166  0131                     i1l1967:
  5167                           
  5168                           ;main.c: 309:         if (time_rele_control > 0) {
  5169  0131  082F               	movf	_time_rele_control,w
  5170  0132  0430               	iorwf	_time_rele_control+1,w
  5171  0133  1903               	btfsc	3,2
  5172  0134  0008               	return
  5173                           
  5174                           ;main.c: 310:             time_rele_control--;
  5175  0135  3001               	movlw	1
  5176  0136  02AF               	subwf	_time_rele_control,f
  5177  0137  3000               	movlw	0
  5178  0138  3BB0               	subwfb	_time_rele_control+1,f
  5179                           
  5180                           ;main.c: 311:             if (time_rele_control == 0) {
  5181  0139  082F               	movf	_time_rele_control,w
  5182  013A  0430               	iorwf	_time_rele_control+1,w
  5183  013B  1D03               	btfss	3,2
  5184  013C  0008               	return
  5185                           
  5186                           ;main.c: 312:                 ff.bits.RELE_CONTROL_ON = 0;
  5187  013D  1377               	bcf	_ff+1,6
  5188                           
  5189                           ;main.c: 313:                 ff.bits.CLOSED = 1;
  5190  013E  1677               	bsf	_ff+1,4
  5191                           
  5192                           ;main.c: 314:                 ff.bits.CLOSING = 0;
  5193  013F  11F7               	bcf	_ff+1,3
  5194  0140  0008               	return
  5195  0141                     __end_of_rele_tick:
  5196                           
  5197                           	psect	text41
  5198  035D                     __ptext41:	
  5199 ;; *************** function _minute_tick *****************
  5200 ;; Defined at:
  5201 ;;		line 410 in file "main.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;		None
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, status,2, status,0
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMMON   BANK0   BANK1
  5215 ;;      Params:         0       0       0
  5216 ;;      Locals:         0       0       0
  5217 ;;      Temps:          1       0       0
  5218 ;;      Totals:         1       0       0
  5219 ;;Total ram usage:        1 bytes
  5220 ;; Hardware stack levels used: 1
  5221 ;; This function calls:
  5222 ;;		Nothing
  5223 ;; This function is called by:
  5224 ;;		_sec_work
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228  035D                     _minute_tick:	
  5229                           ;psect for function _minute_tick
  5230                           
  5231                           
  5232                           ;main.c: 414:     if (time_melody > 0) {
  5233                           
  5234                           ;incstack = 0
  5235                           ; Regs used in _minute_tick: [wreg+status,2+status,0]
  5236  035D  0020               	movlb	0	; select bank0
  5237  035E  083D               	movf	_time_melody,w
  5238  035F  1903               	btfsc	3,2
  5239  0360  0008               	return
  5240                           
  5241                           ;main.c: 415:         time_melody--;
  5242  0361  3001               	movlw	1
  5243  0362  02BD               	subwf	_time_melody,f
  5244                           
  5245                           ;main.c: 416:         if (time_melody == 0) {
  5246  0363  083D               	movf	_time_melody,w
  5247  0364  1D03               	btfss	3,2
  5248  0365  0008               	return
  5249                           
  5250                           ;main.c: 417:             ff.bits.SIREN = 1;
  5251  0366  15F8               	bsf	_ff+2,3
  5252                           
  5253                           ;main.c: 418:             time_melody = MELODY_REPEAT_DELAY;
  5254  0367  3003               	movlw	3
  5255  0368  00F0               	movwf	??_minute_tick
  5256  0369  0870               	movf	??_minute_tick,w
  5257  036A  00BD               	movwf	_time_melody
  5258  036B  0008               	return
  5259  036C                     __end_of_minute_tick:
  5260                           
  5261                           	psect	text42
  5262  0288                     __ptext42:	
  5263 ;; *************** function _ms_200_work *****************
  5264 ;; Defined at:
  5265 ;;		line 488 in file "main.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1
  5279 ;;      Params:         0       0       0
  5280 ;;      Locals:         0       0       0
  5281 ;;      Temps:          0       0       0
  5282 ;;      Totals:         0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used: 1
  5285 ;; Hardware stack levels required when called: 3
  5286 ;; This function calls:
  5287 ;;		_beep_double
  5288 ;;		_beep_long
  5289 ;;		_beep_short
  5290 ;; This function is called by:
  5291 ;;		_ms_tick
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295  0288                     _ms_200_work:	
  5296                           ;psect for function _ms_200_work
  5297                           
  5298                           
  5299                           ;main.c: 489:     if (ff.bits.ALARM_ON) {
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _ms_200_work: [wreg+status,2+status,0+pclath+cstack]
  5303  0288  1C76               	btfss	_ff,0
  5304  0289  2A98               	goto	i1l431
  5305                           
  5306                           ;main.c: 490:         if (ff.bits.SIREN) {
  5307  028A  19F8               	btfsc	_ff+2,3
  5308  028B  2A91               	goto	i1l2113
  5309  028C  2A93               	goto	i1l2115
  5310  028D                     i1l2121:
  5311  028D  0020               	movlb	0	; select bank0
  5312  028E  083A               	movf	_beep_long_count,w
  5313  028F  1903               	btfsc	3,2
  5314  0290  2A9D               	goto	i1l2125
  5315  0291                     i1l2113:
  5316                           
  5317                           ;main.c: 491:             beep_double();
  5318  0291  2430               	fcall	_beep_double
  5319                           
  5320                           ;main.c: 492:         } else {
  5321  0292  0008               	return
  5322  0293                     i1l2115:
  5323                           
  5324                           ;main.c: 493:             if (beep_short_count > 0) {
  5325  0293  087A               	movf	_beep_short_count,w
  5326  0294  1903               	btfsc	3,2
  5327  0295  0008               	return
  5328                           
  5329                           ;main.c: 494:                 beep_short();
  5330  0296  236C               	fcall	_beep_short
  5331  0297  0008               	return
  5332  0298                     i1l431:
  5333  0298  1CF6               	btfss	_ff,1
  5334  0299  0008               	return
  5335                           
  5336                           ;main.c: 500:         if ((beep_short_count > 0) && (beep_long_count > 0)) {
  5337  029A  087A               	movf	_beep_short_count,w
  5338  029B  1D03               	btfss	3,2
  5339  029C  2A8D               	goto	i1l2121
  5340  029D                     i1l2125:
  5341                           
  5342                           ;main.c: 503:             if (beep_short_count > 0) {
  5343  029D  087A               	movf	_beep_short_count,w
  5344  029E  1903               	btfsc	3,2
  5345  029F  2AA1               	goto	i1l2129
  5346                           
  5347                           ;main.c: 504:                 beep_short();
  5348  02A0  236C               	fcall	_beep_short
  5349  02A1                     i1l2129:
  5350                           
  5351                           ;main.c: 506:             if (beep_long_count > 0) {
  5352  02A1  0020               	movlb	0	; select bank0
  5353  02A2  083A               	movf	_beep_long_count,w
  5354  02A3  1903               	btfsc	3,2
  5355  02A4  0008               	return
  5356                           
  5357                           ;main.c: 507:                 beep_long();
  5358  02A5  237B               	fcall	_beep_long
  5359  02A6  0008               	return
  5360  02A7                     __end_of_ms_200_work:
  5361                           
  5362                           	psect	text43
  5363  0430                     __ptext43:	
  5364 ;; *************** function _beep_double *****************
  5365 ;; Defined at:
  5366 ;;		line 152 in file "main.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, status,2, status,0, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1
  5380 ;;      Params:         0       0       0
  5381 ;;      Locals:         0       0       0
  5382 ;;      Temps:          0       0       0
  5383 ;;      Totals:         0       0       0
  5384 ;;Total ram usage:        0 bytes
  5385 ;; Hardware stack levels used: 1
  5386 ;; Hardware stack levels required when called: 2
  5387 ;; This function calls:
  5388 ;;		_beep_long
  5389 ;;		_beep_short
  5390 ;; This function is called by:
  5391 ;;		_ms_200_work
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395  0430                     _beep_double:	
  5396                           ;psect for function _beep_double
  5397                           
  5398                           
  5399                           ;main.c: 153:     if (ff.bits.LAST_BEEP_LONG) {
  5400                           
  5401                           ;incstack = 0
  5402                           ; Regs used in _beep_double: [wreg+status,2+status,0+pclath+cstack]
  5403  0430  1FF9               	btfss	_ff+3,7
  5404  0431  2C34               	goto	i1l1941
  5405                           
  5406                           ;main.c: 154:         beep_short();
  5407  0432  236C               	fcall	_beep_short
  5408                           
  5409                           ;main.c: 155:     } else {
  5410  0433  0008               	return
  5411  0434                     i1l1941:
  5412                           
  5413                           ;main.c: 156:         beep_long();
  5414  0434  237B               	fcall	_beep_long
  5415  0435  0008               	return
  5416  0436                     __end_of_beep_double:
  5417                           
  5418                           	psect	text44
  5419  036C                     __ptext44:	
  5420 ;; *************** function _beep_short *****************
  5421 ;; Defined at:
  5422 ;;		line 134 in file "main.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg, status,2, status,0, pclath, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1
  5436 ;;      Params:         0       0       0
  5437 ;;      Locals:         0       0       0
  5438 ;;      Temps:          0       0       0
  5439 ;;      Totals:         0       0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used: 1
  5442 ;; Hardware stack levels required when called: 1
  5443 ;; This function calls:
  5444 ;;		_start_tone
  5445 ;; This function is called by:
  5446 ;;		_beep_double
  5447 ;;		_ms_200_work
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451  036C                     _beep_short:	
  5452                           ;psect for function _beep_short
  5453                           
  5454                           
  5455                           ;main.c: 135:     if (!ff.bits.ZUM_BUSY) {
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _beep_short: [wreg+status,2+status,0+pclath+cstack]
  5459  036C  1A78               	btfsc	_ff+2,4
  5460  036D  0008               	return
  5461                           
  5462                           ;main.c: 136:         if (beep_short_count > 0) beep_short_count--;
  5463  036E  087A               	movf	_beep_short_count,w
  5464  036F  1903               	btfsc	3,2
  5465  0370  2B73               	goto	i1l1915
  5466  0371  3001               	movlw	1
  5467  0372  02FA               	subwf	_beep_short_count,f
  5468  0373                     i1l1915:
  5469                           
  5470                           ;main.c: 137:         time_tone = SHORT_ZUMMER_DELAY;
  5471  0373  301E               	movlw	30
  5472  0374  0020               	movlb	0	; select bank0
  5473  0375  00AB               	movwf	_time_tone
  5474  0376  3000               	movlw	0
  5475  0377  00AC               	movwf	_time_tone+1
  5476                           
  5477                           ;main.c: 138:         ff.bits.LAST_BEEP_LONG = 0;
  5478  0378  13F9               	bcf	_ff+3,7
  5479                           
  5480                           ;main.c: 139:         start_tone();
  5481  0379  2444               	fcall	_start_tone
  5482  037A  0008               	return
  5483  037B                     __end_of_beep_short:
  5484                           
  5485                           	psect	text45
  5486  037B                     __ptext45:	
  5487 ;; *************** function _beep_long *****************
  5488 ;; Defined at:
  5489 ;;		line 143 in file "main.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;		None
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      void 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0, pclath, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1
  5503 ;;      Params:         0       0       0
  5504 ;;      Locals:         0       0       0
  5505 ;;      Temps:          0       0       0
  5506 ;;      Totals:         0       0       0
  5507 ;;Total ram usage:        0 bytes
  5508 ;; Hardware stack levels used: 1
  5509 ;; Hardware stack levels required when called: 1
  5510 ;; This function calls:
  5511 ;;		_start_tone
  5512 ;; This function is called by:
  5513 ;;		_beep_double
  5514 ;;		_ms_200_work
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518  037B                     _beep_long:	
  5519                           ;psect for function _beep_long
  5520                           
  5521                           
  5522                           ;main.c: 144:     if (!ff.bits.ZUM_BUSY) {
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _beep_long: [wreg+status,2+status,0+pclath+cstack]
  5526  037B  1A78               	btfsc	_ff+2,4
  5527  037C  0008               	return
  5528                           
  5529                           ;main.c: 145:         if (beep_long_count > 0) beep_long_count--;
  5530  037D  0020               	movlb	0	; select bank0
  5531  037E  083A               	movf	_beep_long_count,w
  5532  037F  1903               	btfsc	3,2
  5533  0380  2B83               	goto	i1l1927
  5534  0381  3001               	movlw	1
  5535  0382  02BA               	subwf	_beep_long_count,f
  5536  0383                     i1l1927:
  5537                           
  5538                           ;main.c: 146:         time_tone = LONG_ZUMMER_DELAY;
  5539  0383  3082               	movlw	130
  5540  0384  00AB               	movwf	_time_tone
  5541  0385  3000               	movlw	0
  5542  0386  00AC               	movwf	_time_tone+1
  5543                           
  5544                           ;main.c: 147:         ff.bits.LAST_BEEP_LONG = 1;
  5545  0387  17F9               	bsf	_ff+3,7
  5546                           
  5547                           ;main.c: 148:         start_tone();
  5548  0388  2444               	fcall	_start_tone
  5549  0389  0008               	return
  5550  038A                     __end_of_beep_long:
  5551                           
  5552                           	psect	text46
  5553  0444                     __ptext46:	
  5554 ;; *************** function _start_tone *****************
  5555 ;; Defined at:
  5556 ;;		line 122 in file "main.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		None
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1
  5570 ;;      Params:         0       0       0
  5571 ;;      Locals:         0       0       0
  5572 ;;      Temps:          0       0       0
  5573 ;;      Totals:         0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used: 1
  5576 ;; This function calls:
  5577 ;;		Nothing
  5578 ;; This function is called by:
  5579 ;;		_beep_short
  5580 ;;		_beep_long
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584  0444                     _start_tone:	
  5585                           ;psect for function _start_tone
  5586                           
  5587                           
  5588                           ;main.c: 123:     ff.bits.ZUM_BUSY = 1;
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in _start_tone: []
  5592  0444  1678               	bsf	_ff+2,4
  5593                           
  5594                           ;main.c: 124:     ff.bits.TONE_ON = 1;
  5595  0445  14F8               	bsf	_ff+2,1
  5596                           
  5597                           ;main.c: 125:     ff.bits.TONE_OFF = 0;
  5598  0446  1178               	bcf	_ff+2,2
  5599  0447  0008               	return
  5600  0448                     __end_of_start_tone:
  5601                           
  5602                           	psect	text47
  5603  0436                     __ptext47:	
  5604 ;; *************** function _ms_100_work *****************
  5605 ;; Defined at:
  5606 ;;		line 514 in file "main.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;		None
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		None
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1
  5620 ;;      Params:         0       0       0
  5621 ;;      Locals:         0       0       0
  5622 ;;      Temps:          0       0       0
  5623 ;;      Totals:         0       0       0
  5624 ;;Total ram usage:        0 bytes
  5625 ;; Hardware stack levels used: 1
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_ms_tick
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633  0436                     _ms_100_work:	
  5634                           ;psect for function _ms_100_work
  5635                           
  5636                           
  5637                           ;main.c: 515:     if (ff.bits.NORMAL_WORK_MODE_ON || ff.bits.UNIVERSAL_VORK_MODE_ON) {
  5638                           
  5639                           ;incstack = 0
  5640                           ; Regs used in _ms_100_work: []
  5641  0436  1879               	btfsc	_ff+3,0
  5642  0437  2C3A               	goto	i1l446
  5643  0438  1CF9               	btfss	_ff+3,1
  5644  0439  0008               	return
  5645  043A                     i1l446:
  5646                           
  5647                           ;main.c: 516:         ff.bits.ALLOW_MEASURE = 1;
  5648  043A  1676               	bsf	_ff,4
  5649  043B  0008               	return
  5650  043C                     __end_of_ms_100_work:
  5651                           
  5652                           	psect	text48
  5653  03A6                     __ptext48:	
  5654 ;; *************** function _TMR0_ISR *****************
  5655 ;; Defined at:
  5656 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  1    wreg      void 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0, pclath, cstack
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMMON   BANK0   BANK1
  5670 ;;      Params:         0       0       0
  5671 ;;      Locals:         0       0       0
  5672 ;;      Temps:          0       0       0
  5673 ;;      Totals:         0       0       0
  5674 ;;Total ram usage:        0 bytes
  5675 ;; Hardware stack levels used: 1
  5676 ;; Hardware stack levels required when called: 1
  5677 ;; This function calls:
  5678 ;;		Absolute function
  5679 ;;		_TMR0_DefaultInterruptHandler
  5680 ;;		_zummer_switch
  5681 ;; This function is called by:
  5682 ;;		_INTERRUPT_InterruptManager
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686  03A6                     _TMR0_ISR:	
  5687                           ;psect for function _TMR0_ISR
  5688                           
  5689                           
  5690                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  5691                           
  5692                           ;incstack = 0
  5693                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5694  03A6  110B               	bcf	11,2	;volatile
  5695                           
  5696                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  5697  03A7  0020               	movlb	0	; select bank0
  5698  03A8  0843               	movf	_timer0ReloadVal,w	;volatile
  5699  03A9  0095               	movwf	21	;volatile
  5700                           
  5701                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  5702  03AA  083F               	movf	_TMR0_InterruptHandler,w
  5703  03AB  0440               	iorwf	_TMR0_InterruptHandler+1,w
  5704  03AC  1903               	btfsc	3,2
  5705  03AD  0008               	return
  5706                           
  5707                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  5708  03AE  0840               	movf	_TMR0_InterruptHandler+1,w
  5709  03AF  008A               	movwf	10
  5710  03B0  083F               	movf	_TMR0_InterruptHandler,w
  5711  03B1  000A               	callw
  5712  03B2  3183               	pagesel	$
  5713  03B3  0008               	return
  5714  03B4                     __end_of_TMR0_ISR:
  5715                           
  5716                           	psect	text49
  5717  0467                     __ptext49:	
  5718 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5719 ;; Defined at:
  5720 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		None
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMMON   BANK0   BANK1
  5734 ;;      Params:         0       0       0
  5735 ;;      Locals:         0       0       0
  5736 ;;      Temps:          0       0       0
  5737 ;;      Totals:         0       0       0
  5738 ;;Total ram usage:        0 bytes
  5739 ;; Hardware stack levels used: 1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_TMR0_Initialize
  5744 ;;		_TMR0_ISR
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748  0467                     _TMR0_DefaultInterruptHandler:	
  5749                           ;psect for function _TMR0_DefaultInterruptHandler
  5750                           
  5751                           
  5752                           ;incstack = 0
  5753                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5754  0467  0008               	return
  5755  0468                     __end_of_TMR0_DefaultInterruptHandler:
  5756                           
  5757                           	psect	text50
  5758  03D8                     __ptext50:	
  5759 ;; *************** function _zummer_switch *****************
  5760 ;; Defined at:
  5761 ;;		line 581 in file "main.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;		None
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1
  5775 ;;      Params:         0       0       0
  5776 ;;      Locals:         0       0       0
  5777 ;;      Temps:          0       0       0
  5778 ;;      Totals:         0       0       0
  5779 ;;Total ram usage:        0 bytes
  5780 ;; Hardware stack levels used: 1
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_start_setup
  5785 ;;		_TMR0_ISR
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789  03D8                     _zummer_switch:	
  5790                           ;psect for function _zummer_switch
  5791                           
  5792                           
  5793                           ;incstack = 0
  5794                           ; Regs used in _zummer_switch: [status,0]
  5795                           ;main.c: 586:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5796  03D8  1003               	clrc
  5797  03D9  0022               	movlb	2	; select bank2
  5798  03DA  1E8C               	btfss	12,5	;volatile
  5799  03DB  1403               	setc
  5800  03DC  1C03               	btfss	3,0
  5801  03DD  2BE1               	goto	u206_20
  5802  03DE  0022               	movlb	2	; select bank2
  5803  03DF  168C               	bsf	12,5	;volatile
  5804  03E0  0008               	return
  5805  03E1                     u206_20:
  5806  03E1  0022               	movlb	2	; select bank2
  5807  03E2  128C               	bcf	12,5	;volatile
  5808  03E3  0008               	return
  5809  03E4                     __end_of_zummer_switch:
  5810  007E                     btemp	set	126	;btemp
  5811  007E                     int$flags	set	126
  5812  007E                     wtemp0	set	126
  5813                           
  5814                           	psect	idloc
  5815                           
  5816                           ;Config register IDLOC0 @ 0x8000
  5817                           ;	unspecified, using default values
  5818  8000                     	org	32768
  5819  8000  3FFF               	dw	16383
  5820                           
  5821                           ;Config register IDLOC1 @ 0x8001
  5822                           ;	unspecified, using default values
  5823  8001                     	org	32769
  5824  8001  3FFF               	dw	16383
  5825                           
  5826                           ;Config register IDLOC2 @ 0x8002
  5827                           ;	unspecified, using default values
  5828  8002                     	org	32770
  5829  8002  3FFF               	dw	16383
  5830                           
  5831                           ;Config register IDLOC3 @ 0x8003
  5832                           ;	unspecified, using default values
  5833  8003                     	org	32771
  5834  8003  3FFF               	dw	16383
  5835                           
  5836                           	psect	config
  5837                           
  5838                           ;Config register CONFIG1 @ 0x8007
  5839                           ;	Oscillator Selection
  5840                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  5841                           ;	Watchdog Timer Enable
  5842                           ;	WDTE = ON, WDT enabled
  5843                           ;	Power-up Timer Enable
  5844                           ;	PWRTE = ON, PWRT enabled
  5845                           ;	MCLR Pin Function Select
  5846                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5847                           ;	Flash Program Memory Code Protection
  5848                           ;	CP = OFF, Program memory code protection is disabled
  5849                           ;	Data Memory Code Protection
  5850                           ;	CPD = OFF, Data memory code protection is disabled
  5851                           ;	Brown-out Reset Enable
  5852                           ;	BOREN = ON, Brown-out Reset enabled
  5853                           ;	Clock Out Enable
  5854                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5855                           ;	Internal/External Switchover
  5856                           ;	IESO = ON, Internal/External Switchover mode is enabled
  5857                           ;	Fail-Safe Clock Monitor Enable
  5858                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  5859  8007                     	org	32775
  5860  8007  3FDC               	dw	16348
  5861                           
  5862                           ;Config register CONFIG2 @ 0x8008
  5863                           ;	Flash Memory Self-Write Protection
  5864                           ;	WRT = OFF, Write protection off
  5865                           ;	PLL Enable
  5866                           ;	PLLEN = OFF, 4x PLL disabled
  5867                           ;	Stack Overflow/Underflow Reset Enable
  5868                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5869                           ;	Brown-out Reset Voltage Selection
  5870                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5871                           ;	Low-Voltage Programming Enable
  5872                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5873  8008                     	org	32776
  5874  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    24
    Data        0
    BSS         36
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80      2      38
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> zummer_switch(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> zummer_switch(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ms_tick(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ms_tick(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_get_wsp
    _switch_wm->_rele_off
    _eeprom_set->_EEPROM_WriteByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _get_wsp->_ADC_GetConversion
    _open->_rele_off
    _close->_rele_off

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ms_tick->_sec_work
    _sec_work->_minute_tick
    _sec_work->_sec_30_work

Critical Paths under _main in BANK0

    _main->_get_wsp
    _start_setup->_eeprom_set

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1549
                  _autorotation_work
                              _close
                           _fun_work
                            _get_fun
                           _get_jump
                            _get_wsp
                      _hardware_work
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            1     1      0       0
                                              3 COMMON     1     1      0
                           _rele_off
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    1453
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _eeprom_set
 ---------------------------------------------------------------------------------
 (2) _eeprom_set                                           2     2      0     757
                                              0 BANK0      2     2      0
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     4     3      1     692
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _EEPROM_ReadByte                                      3     3      0      31
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _hardware_work                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_wsp                                              4     4      0      96
                                              4 COMMON     2     2      0
                                              0 BANK0      2     2      0
                  _ADC_GetConversion
                        _clear_alarm
                        _start_alarm
 ---------------------------------------------------------------------------------
 (2) _start_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             1     1      0       0
                                              3 COMMON     1     1      0
                              _close
                               _open
 ---------------------------------------------------------------------------------
 (2) _open                                                 0     0      0       0
                            _go_open
                        _go_open_alt
                           _rele_off
 ---------------------------------------------------------------------------------
 (3) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _close                                                0     0      0       0
                           _go_close
                       _go_close_alt
                           _rele_off
 ---------------------------------------------------------------------------------
 (2) _rele_off                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _go_close                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autorotation_work                                    1     1      0       0
                                              2 COMMON     1     1      0
                     _go_close_short
                            _go_open
 ---------------------------------------------------------------------------------
 (3) _go_open                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close_short                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                            _ms_tick *
 ---------------------------------------------------------------------------------
 (7) _ms_tick                                              0     0      0       0
                        _ms_100_work
                        _ms_200_work
                           _sec_work
                          _stop_tone
 ---------------------------------------------------------------------------------
 (8) _stop_tone                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _sec_work                                             1     1      0       0
                                              1 COMMON     1     1      0
                        _minute_tick
                          _rele_tick
                        _sec_30_work
 ---------------------------------------------------------------------------------
 (9) _sec_30_work                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _rele_tick                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _minute_tick                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ms_200_work                                          0     0      0       0
                        _beep_double
                          _beep_long
                         _beep_short
 ---------------------------------------------------------------------------------
 (9) _beep_double                                          0     0      0       0
                          _beep_long
                         _beep_short
 ---------------------------------------------------------------------------------
 (9) _beep_short                                           0     0      0       0
                         _start_tone
 ---------------------------------------------------------------------------------
 (9) _beep_long                                            0     0      0       0
                         _start_tone
 ---------------------------------------------------------------------------------
 (10) _start_tone                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ms_100_work                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                      _zummer_switch *
 ---------------------------------------------------------------------------------
 (7) _zummer_switch                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _autorotation_work
     _go_close_short
     _go_open
   _close
     _go_close
     _go_close_alt
     _rele_off
   _fun_work
     _close
     _open
       _go_open
       _go_open_alt
       _rele_off
   _get_fun
   _get_jump
   _get_wsp
     _ADC_GetConversion
     _clear_alarm
     _start_alarm
   _hardware_work
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _eeprom_set
       _EEPROM_ReadByte
       _EEPROM_WriteByte
   _switch_wm
     _rele_off

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _zummer_switch *
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _ms_tick *
       _ms_100_work
       _ms_200_work
         _beep_double
           _beep_long
             _start_tone
           _beep_short
             _start_tone
         _beep_long
         _beep_short
       _sec_work
         _minute_tick
         _rele_tick
         _sec_30_work
       _stop_tone

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      32       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      2      26       6       47.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      32       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed May 18 12:47:23 2022

        __end_of_TMR2_SetInterruptHandler 042A                        get_fun@fun_counter 0036  
                                      l61 02ED                                        _RD 0CA8  
                                      _WR 0CA9                             ?_go_close_alt 0070  
                                      _ff 0076                 __end_of_autorotation_work 0104  
                         _timer0ReloadVal 0043                                       l334 03EA  
                                     l351 03C8                                       l336 03E8  
                                     l344 0335                                       l345 0336  
                                     l349 03C4                                       l357 03B8  
                                     l390 02D0                                       l359 03BC  
                                     l572 022B                                       l548 0392  
                                     l578 033E                                       _GIE 005F  
                             _start_alarm 0417                                       _PR2 001B  
                             _start_setup 0141                              ?_go_open_alt 0070  
                         _TMR2_Initialize 034D                                       wreg 0009  
                            ?_sec_30_work 0070                                      l2411 020D  
                                    l2325 00E5                                      l2405 01A9  
                                    l2421 021D                                      l2275 02B3  
                                    l2611 00AF                                      l2429 0228  
                                    l2623 00C5                                      l2607 00A4  
                                    l2385 018B                                      l2617 00BA  
                                    l2397 019E                                      l2567 0247  
                                    l2683 038C                                      u1110 01F9  
                                    u1030 01DD                                      u1104 01F4  
                                    u1050 01E4                                      u1124 01FB  
                                    u1044 01DF                                      u1070 01EB  
                                    u1064 01E6                                      u1090 01F2  
                                    u1084 01ED                                      _LATA 010C  
                                    _LATC 010E                                      u2315 00EF  
                                    u2255 00D2                                      u2660 0246  
                                    u2827 0088                                      u2837 02E8  
                                    u2847 017D                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _main 038A                                      _open 03B4  
                                    fsr0h 0005                                      indf0 0000  
                                    fsr0l 0004                      EEPROM_WriteByte@addr 0075  
                                    btemp 007E                           ?_go_close_short 0070  
                                    start 0016                            ??_go_close_alt 0072  
                 __end_of_TMR0_Initialize 031A            ??_TMR0_DefaultInterruptHandler 0070  
           __end_of_OSCILLATOR_Initialize 0417                                     ?_main 0070  
                                   _EEADR 0191                                     ?_open 0070  
                                   _T2CON 001C                          __end_of_RELE_GAP 045F  
                                   i1l114 0014                                     i1l108 000B  
                                   i1l413 0034                                     i1l414 0033  
                                   i1l431 0298                                     i1l418 005D  
                                   i1l372 012B                                     i1l365 0108  
                                   i1l446 043A                                     i1l367 011A  
                                   _TRISA 008C                                     _TRISC 008E  
                         ??_hardware_work 0072                 ?_TMR0_SetInterruptHandler 0072  
                        __end_of_TMR0_ISR 03B4                           __end_of_get_fun 01AB  
                        __end_of_TMR2_ISR 03D8                           __end_of_get_wsp 00C7  
                         __end_of_go_open 032C                                     _close 03C0  
                          _WDT_Initialize 043C                           __end_of_ms_tick 01D8  
                          __pbitbssCOMMON 03D8                        _SHORT_ZUMMER_DELAY 0465  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 0448  
                         __initialization 0017                            eeprom_set@vers 0045  
                            __end_of_main 0398                              __end_of_open 03C0  
                 __end_of_TMR2_Initialize 035D               ?_INTERRUPT_InterruptManager 0070  
                _TMR2_SetInterruptHandler 0424                                    ??_main 0076  
                                  ??_open 0073                              ?_minute_tick 0070  
                  __end_of_WDT_Initialize 0440                                    ?_close 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  i1l2103 0076                                    i1l2121 028D  
                                  i1l2113 0291                                    i1l2115 0293  
                                  i1l2125 029D                                    i1l2231 01CE  
                                  i1l2129 02A1                                    i1l2217 01BD  
                                  i1l2091 004E                                    i1l2083 0042  
                                  i1l2093 004F                                    i1l2085 0043  
                                  i1l1915 0373                                    i1l1941 0434  
                                  i1l1927 0383                                    i1l1965 012D  
                                  i1l1967 0131                                    i1l1987 03FC  
                                  u206_20 03E1                          _GOOD_WSP_VOLTAGE 044E  
                                  _OSCCON 0099                                    _WDTCON 0097  
                        __end_of_get_jump 022A                          __end_of_go_close 0269  
             __end_of_MELODY_REPEAT_DELAY 045B                          ?_TMR0_Initialize 0070  
                       ??_EEPROM_ReadByte 0072                          __end_of_fun_work 02C3  
                __end_of_EEPROM_WriteByte 024A                          __end_of_sec_work 007F  
                               ??_get_fun 0072                          __end_of_rele_off 033D  
                               ??_get_wsp 0074                                 ??_go_open 0072  
           __end_of_RELE_POWER_WORK_DELAY 0461                                 ??_ms_tick 0072  
                         ?_WDT_Initialize 0070                    EEPROM_WriteByte@status 03D8  
                ADC_GetConversion@channel 0073                     _HIGH_WATER_RESISTANSE 0456  
                 __end_of_TMR2_StartTimer 044B  TMR0_SetInterruptHandler@InterruptHandler 0072  
TMR2_SetInterruptHandler@InterruptHandler 0072                      __end_of_go_close_alt 03EF  
                       _SYSTEM_Initialize 0409                   __end_of__initialization 0023  
                      _AUTOROTATION_DELAY 0452                        ?_SYSTEM_Initialize 0070  
                           _UP_RESISTANSE 0454                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0075                     __end_of_zummer_switch 03E4  
                               ?_TMR0_ISR 0070                                 ?_TMR2_ISR 0070  
                           __end_of_close 03CC                          ?_TMR2_Initialize 0070  
                            ?_start_alarm 0070               get_wsp@bad_measures_counter 0037  
                          _OPTION_REGbits 0095                              ?_start_setup 0070  
                                 ??_close 0073                                _beep_short 036C  
               __end_of_SYSTEM_Initialize 0410                          ??_go_close_short 0072  
                              __pbssBANK0 0020                                __pmaintext 038A  
        __end_of_TMR0_SetInterruptHandler 0430                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0072                           _time_rele_power 0031  
                              __pintentry 0004                         _time_rele_control 002F  
                              _eeprom_set 0398                                   _OSCTUNE 0098  
                       __end_of_beep_long 038A                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_go_close 0070  
                               ?_fun_work 0070                                 ?_sec_work 0070  
                               ?_rele_off 0070                      _ADC_InterruptHandler 0033  
              ??_TMR2_SetInterruptHandler 0074                             ??_beep_double 0070  
   __end_of_RELE_POWER_AUTOROTATION_DELAY 0460             _RELE_POWER_AUTOROTATION_DELAY 045F  
                __end_of_GOOD_WSP_VOLTAGE 0450                                   __ptext1 02C3  
                                 __ptext2 0141                                   __ptext3 0398  
                                 __ptext4 022A                                   __ptext5 033D  
                                 __ptext6 0448                                   __ptext7 0409  
                                 __ptext8 043C                                   __ptext9 034D  
                                 _get_fun 0176                                   _get_wsp 007F  
                                 _go_open 031A                     _OSCILLATOR_Initialize 0410  
                               _T2CONbits 001C                  ??_PIN_MANAGER_Initialize 0072  
                                 _ms_tick 01AB                     __end_of_hardware_work 0202  
                             ?_beep_short 0070                                   clrloop0 041F  
                              ??_get_jump 0072                                ??_go_close 0072  
                       __end_of_rele_tick 0141                      end_of_initialization 0023  
                              ??_fun_work 0073                           _EEPROM_ReadByte 033D  
                              ??_sec_work 0071                                ??_rele_off 0072  
                           ??_clear_alarm 0072                             ??_ms_100_work 0070  
                           ??_ms_200_work 0070                            _FUN_MEAS_COUNT 0462  
                            _go_close_alt 03E4                          ??_WDT_Initialize 0072  
            __end_of_LOW_WATER_RESISTANSE 045A                  _TMR0_SetInterruptHandler 042A  
                               _PORTAbits 000C                                 _PORTCbits 000E  
                       ?_EEPROM_WriteByte 0072                         __end_of_stop_tone 0444  
                     __end_of_beep_double 0436                         __end_of_switch_wm 02DB  
                             ?_eeprom_set 0070                        ??_EEPROM_WriteByte 0073  
                               _TRISAbits 008C                                 _TRISCbits 008E  
                      EEPROM_WriteByte@dt 0072                                _start_tone 0444  
                              get_wsp@res 0044                    __end_of_FUN_MEAS_COUNT 0463  
    __end_of_TMR2_DefaultInterruptHandler 0467              _TMR2_DefaultInterruptHandler 0466  
                     __end_of_clear_alarm 044E                            _ADC_Initialize 0401  
                  ?_OSCILLATOR_Initialize 0070                       __end_of_ms_100_work 043C  
                     __end_of_ms_200_work 02A7                             ??_go_open_alt 0072  
                     start_initialization 0017                     _RELE_POWER_WORK_DELAY 0460  
                           ??_sec_30_work 0070                   __end_of_EEPROM_ReadByte 034D  
                        _beep_short_count 007A                               _beep_double 0430  
                  __end_of_ADC_Initialize 0409             ?_TMR2_DefaultInterruptHandler 0070  
                       _AUTOROTATION_DAYS 045C                               __pbssCOMMON 0076  
                               ___latbits 0000                             __pcstackBANK0 0044  
                     __end_of_go_open_alt 03F8                              sec_work@iled 0038  
                             ?_start_tone 0070                                 _beep_long 037B  
                     __end_of_sec_30_work 0401                      _LOW_WATER_RESISTANSE 0458  
                   _TMR0_InterruptHandler 003F                                 __pnvBANK0 003F  
                             _clear_alarm 044B                    _PIN_MANAGER_Initialize 02F1  
                             _ms_100_work 0436                               _ms_200_work 0288  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0072  
               __end_of_AUTOROTATION_DAYS 045D                                  ?_get_fun 0070  
                                ?_get_wsp 0070                                  ?_go_open 0070  
                           ??_minute_tick 0070                                  ?_ms_tick 0070  
                            ??_beep_short 0070                            _WSP_MEAS_COUNT 0463  
                        ?_EEPROM_ReadByte 0070                                 _sec_count 003E  
                       ??_TMR0_Initialize 0074                                ?_beep_long 0070  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 0104                                 clear_ram0 041E  
                                _PIE1bits 0091                                  _RELE_GAP 045E  
              ??_TMR0_SetInterruptHandler 0074                                  _PIR1bits 0011  
                               _time_meas 003B                          _time_moving_wait 003C  
                                _TMR0_ISR 03A6                                 _time_tone 002B  
                                _TMR2_ISR 03CC                             _zummer_switch 03D8  
                      __end_of_beep_short 037B                           _beep_long_count 003A  
                              _ADCON0bits 009D                              ??_eeprom_set 0044  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 03EF  
               ?_TMR2_SetInterruptHandler 0072                    __end_of_WSP_MEAS_COUNT 0464  
                               _stop_tone 0440                                 _switch_wm 02C3  
                             _sec_30_work 03F8                           ms_tick@ms_count 0025  
                     __end_of_minute_tick 036C                         _beep_double_count 0039  
                       ??_TMR2_Initialize 0074                                ?_rele_tick 0070  
                   __end_of_UP_RESISTANSE 0456                       _MELODY_REPEAT_DELAY 045A  
                       _ADC_GetConversion 02DB                           _JUMP_MEAS_COUNT 0461  
                      __end_of_eeprom_set 03A6                            ?_zummer_switch 0070  
                 ??_OSCILLATOR_Initialize 0072                        ?_ADC_GetConversion 0070  
                           ??_start_alarm 0072                __end_of_SHORT_ZUMMER_DELAY 0466  
                              _ANSELAbits 018C                                _ANSELCbits 018E  
                     ??_ADC_GetConversion 0072                             ??_start_setup 0076  
                              ?_stop_tone 0070                             _time_rele_gap 002D  
                              ?_switch_wm 0070                                  __ptext10 0424  
                                __ptext11 0306                                  __ptext20 02DB  
                                __ptext12 042A                                  __ptext21 0202  
                                __ptext13 02F1                                  __ptext30 00C7  
                                __ptext22 0176                                  __ptext14 0410  
                                __ptext31 031A                                  __ptext23 02A7  
                                __ptext15 0401                                  __ptext40 0104  
                                __ptext32 0269                                  __ptext24 03B4  
                                __ptext16 01D8                                  __ptext41 035D  
                                __ptext25 03EF                                  __ptext17 007F  
                                __ptext50 03D8                                  __ptext42 0288  
                                __ptext34 03CC                                  __ptext26 03C0  
                                __ptext18 0417                                  __ptext43 0430  
                                __ptext35 0466                                  __ptext27 032C  
                                __ptext19 044B                                  __ptext44 036C  
                                __ptext36 01AB                                  __ptext28 03E4  
                                __ptext45 037B                                  __ptext37 0440  
                                __ptext29 024A                                  __ptext46 0444  
                                __ptext38 0026                                  __ptext47 0436  
                                __ptext39 03F8                                  __ptext48 03A6  
                                __ptext49 0467                                  _get_jump 0202  
                                _go_close 024A                           _BAD_WSP_VOLTAGE 0450  
                           _time_rotation 0020                               ??_beep_long 0070  
                                _fun_work 02A7      __end_of_TMR0_DefaultInterruptHandler 0468  
            _TMR0_DefaultInterruptHandler 0467                                  _sec_work 0026  
               __end_of_ADC_GetConversion 02F1                                  _rele_off 032C  
                       _MOVING_WAIT_DELAY 045B                              ?_beep_double 0070  
                                int$flags 007E                         ??_TMR2_StartTimer 0072  
      __end_of_INTERRUPT_InterruptManager 0016                _INTERRUPT_InterruptManager 0004  
                          ms_tick@s_count 0023                      get_jump@jump_counter 0035  
                             _minute_tick 035D                                _INTCONbits 000B  
           __end_of_HIGH_WATER_RESISTANSE 0458                            __pstringtext10 0458  
                          __pstringtext11 045E                            __pstringtext12 045F  
                          __pstringtext13 0460                            __pstringtext14 0461  
                          __pstringtext15 0462                            __pstringtext16 0463  
                          __pstringtext17 0464                            __pstringtext18 0465  
                           _hardware_work 01D8                       __end_of_start_alarm 041E  
                     __end_of_start_setup 0176                                  intlevel1 0000  
                            ??_start_tone 0070                   __end_of_JUMP_MEAS_COUNT 0462  
                 ?_PIN_MANAGER_Initialize 0070                               ??_rele_tick 0070  
               __end_of_MOVING_WAIT_DELAY 045C                         _LONG_ZUMMER_DELAY 0464  
                     EEPROM_ReadByte@addr 0074                          ??_ADC_Initialize 0072  
                            ?_clear_alarm 0070                            _go_close_short 0269  
           ?_TMR0_DefaultInterruptHandler 0070                           ??_zummer_switch 0070  
                            ?_ms_100_work 0070                              ?_ms_200_work 0070  
                           __pstringtext1 044E                             __pstringtext2 0450  
                           __pstringtext3 0452                             __pstringtext4 0454  
                           __pstringtext5 045A                             __pstringtext6 045B  
                           __pstringtext7 045C                             __pstringtext8 045D  
                           __pstringtext9 0456                        __end_of_start_tone 0448  
                              _OPTION_REG 0095                         _time_zummer_short 0029  
     __end_of_FRIMWARE_VERSION_EEPROM_ADR 045E               _FRIMWARE_VERSION_EEPROM_ADR 045D  
                             _time_melody 003D                         _autorotation_work 00C7  
                         _TMR0_Initialize 0306                __end_of_AUTOROTATION_DELAY 0454  
                 __end_of_BAD_WSP_VOLTAGE 0452                        ?_autorotation_work 0070  
                             ??_stop_tone 0070                               ??_switch_wm 0073  
                          ?_hardware_work 0070                          _time_zummer_long 0027  
          __end_of_PIN_MANAGER_Initialize 0306                       ??_autorotation_work 0072  
               __end_of_LONG_ZUMMER_DELAY 0465                          _EEPROM_WriteByte 022A  
                  __end_of_go_close_short 0288                     _TMR2_InterruptHandler 0041  
