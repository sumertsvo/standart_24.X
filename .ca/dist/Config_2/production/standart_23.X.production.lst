

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed May 18 12:48:00 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F1823
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext15,global,class=STRCODE,delta=2,noexec
    19                           	psect	stringtext16,global,class=STRCODE,delta=2,noexec
    20                           	psect	stringtext17,global,class=STRCODE,delta=2,noexec
    21                           	psect	stringtext18,global,class=STRCODE,delta=2,noexec
    22                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
    25                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    26                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2
    32                           	psect	text2,local,class=CODE,merge=1,delta=2
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2
    40                           	psect	text10,local,class=CODE,merge=1,delta=2
    41                           	psect	text11,local,class=CODE,merge=1,delta=2
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	text17,local,class=CODE,merge=1,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	psect	text19,local,class=CODE,merge=1,delta=2
    50                           	psect	text20,local,class=CODE,merge=1,delta=2
    51                           	psect	text21,local,class=CODE,merge=1,delta=2
    52                           	psect	text22,local,class=CODE,merge=1,delta=2
    53                           	psect	text23,local,class=CODE,merge=1,delta=2
    54                           	psect	text24,local,class=CODE,merge=1,delta=2
    55                           	psect	text25,local,class=CODE,merge=1,delta=2
    56                           	psect	text26,local,class=CODE,merge=1,delta=2
    57                           	psect	text27,local,class=CODE,merge=1,delta=2
    58                           	psect	text28,local,class=CODE,merge=1,delta=2
    59                           	psect	text29,local,class=CODE,merge=1,delta=2
    60                           	psect	text30,local,class=CODE,merge=1,delta=2
    61                           	psect	text31,local,class=CODE,merge=1,delta=2
    62                           	psect	text32,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text34,local,class=CODE,merge=1,delta=2
    65                           	psect	text35,local,class=CODE,merge=1,delta=2
    66                           	psect	text36,local,class=CODE,merge=1,delta=2
    67                           	psect	text37,local,class=CODE,merge=1,delta=2
    68                           	psect	text38,local,class=CODE,merge=1,delta=2
    69                           	psect	text39,local,class=CODE,merge=1,delta=2
    70                           	psect	text40,local,class=CODE,merge=1,delta=2
    71                           	psect	text41,local,class=CODE,merge=1,delta=2
    72                           	psect	text42,local,class=CODE,merge=1,delta=2
    73                           	psect	text43,local,class=CODE,merge=1,delta=2
    74                           	psect	text44,local,class=CODE,merge=1,delta=2
    75                           	psect	text45,local,class=CODE,merge=1,delta=2
    76                           	psect	text46,local,class=CODE,merge=1,delta=2
    77                           	psect	text47,local,class=CODE,merge=1,delta=2
    78                           	psect	text48,local,class=CODE,merge=1,delta=2
    79                           	psect	text49,local,class=CODE,merge=1,delta=2
    80                           	psect	text50,local,class=CODE,merge=1,delta=2
    81                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    82                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    83                           	dabs	1,0x7E,2
    84  0000                     
    85                           ; Version 2.40
    86                           ; Generated 17/11/2021 GMT
    87                           ; 
    88                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution. Publication is not required when
   102                           ;        this file is used in an embedded application.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16F1823 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000E                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008E                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0095                     	;# 
   152  0096                     	;# 
   153  0097                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009A                     	;# 
   157  009B                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  010C                     	;# 
   163  010E                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0115                     	;# 
   169  0116                     	;# 
   170  0117                     	;# 
   171  0118                     	;# 
   172  0119                     	;# 
   173  011A                     	;# 
   174  011B                     	;# 
   175  011D                     	;# 
   176  011D                     	;# 
   177  018C                     	;# 
   178  018E                     	;# 
   179  0191                     	;# 
   180  0191                     	;# 
   181  0192                     	;# 
   182  0193                     	;# 
   183  0193                     	;# 
   184  0193                     	;# 
   185  0194                     	;# 
   186  0195                     	;# 
   187  0196                     	;# 
   188  0199                     	;# 
   189  019A                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019B                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019D                     	;# 
   197  019E                     	;# 
   198  019F                     	;# 
   199  020C                     	;# 
   200  020E                     	;# 
   201  0211                     	;# 
   202  0211                     	;# 
   203  0212                     	;# 
   204  0212                     	;# 
   205  0213                     	;# 
   206  0213                     	;# 
   207  0214                     	;# 
   208  0214                     	;# 
   209  0215                     	;# 
   210  0215                     	;# 
   211  0215                     	;# 
   212  0216                     	;# 
   213  0216                     	;# 
   214  0217                     	;# 
   215  0217                     	;# 
   216  0291                     	;# 
   217  0291                     	;# 
   218  0292                     	;# 
   219  0293                     	;# 
   220  0294                     	;# 
   221  0295                     	;# 
   222  0295                     	;# 
   223  0296                     	;# 
   224  0391                     	;# 
   225  0392                     	;# 
   226  0393                     	;# 
   227  039A                     	;# 
   228  039C                     	;# 
   229  039D                     	;# 
   230  039E                     	;# 
   231  039F                     	;# 
   232  0FE4                     	;# 
   233  0FE5                     	;# 
   234  0FE6                     	;# 
   235  0FE7                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEB                     	;# 
   240  0FED                     	;# 
   241  0FEE                     	;# 
   242  0FEF                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000E                     	;# 
   257  0011                     	;# 
   258  0012                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001E                     	;# 
   269  001F                     	;# 
   270  008C                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  010C                     	;# 
   286  010E                     	;# 
   287  0111                     	;# 
   288  0112                     	;# 
   289  0113                     	;# 
   290  0114                     	;# 
   291  0115                     	;# 
   292  0116                     	;# 
   293  0117                     	;# 
   294  0118                     	;# 
   295  0119                     	;# 
   296  011A                     	;# 
   297  011B                     	;# 
   298  011D                     	;# 
   299  011D                     	;# 
   300  018C                     	;# 
   301  018E                     	;# 
   302  0191                     	;# 
   303  0191                     	;# 
   304  0192                     	;# 
   305  0193                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0194                     	;# 
   309  0195                     	;# 
   310  0196                     	;# 
   311  0199                     	;# 
   312  019A                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019C                     	;# 
   318  019C                     	;# 
   319  019D                     	;# 
   320  019E                     	;# 
   321  019F                     	;# 
   322  020C                     	;# 
   323  020E                     	;# 
   324  0211                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0212                     	;# 
   328  0213                     	;# 
   329  0213                     	;# 
   330  0214                     	;# 
   331  0214                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0215                     	;# 
   335  0216                     	;# 
   336  0216                     	;# 
   337  0217                     	;# 
   338  0217                     	;# 
   339  0291                     	;# 
   340  0291                     	;# 
   341  0292                     	;# 
   342  0293                     	;# 
   343  0294                     	;# 
   344  0295                     	;# 
   345  0295                     	;# 
   346  0296                     	;# 
   347  0391                     	;# 
   348  0392                     	;# 
   349  0393                     	;# 
   350  039A                     	;# 
   351  039C                     	;# 
   352  039D                     	;# 
   353  039E                     	;# 
   354  039F                     	;# 
   355  0FE4                     	;# 
   356  0FE5                     	;# 
   357  0FE6                     	;# 
   358  0FE7                     	;# 
   359  0FE8                     	;# 
   360  0FE9                     	;# 
   361  0FEA                     	;# 
   362  0FEB                     	;# 
   363  0FED                     	;# 
   364  0FEE                     	;# 
   365  0FEF                     	;# 
   366  0000                     	;# 
   367  0001                     	;# 
   368  0002                     	;# 
   369  0003                     	;# 
   370  0004                     	;# 
   371  0005                     	;# 
   372  0006                     	;# 
   373  0007                     	;# 
   374  0008                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0016                     	;# 
   385  0017                     	;# 
   386  0018                     	;# 
   387  0019                     	;# 
   388  001A                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  001E                     	;# 
   392  001F                     	;# 
   393  008C                     	;# 
   394  008E                     	;# 
   395  0091                     	;# 
   396  0092                     	;# 
   397  0095                     	;# 
   398  0096                     	;# 
   399  0097                     	;# 
   400  0098                     	;# 
   401  0099                     	;# 
   402  009A                     	;# 
   403  009B                     	;# 
   404  009B                     	;# 
   405  009C                     	;# 
   406  009D                     	;# 
   407  009E                     	;# 
   408  010C                     	;# 
   409  010E                     	;# 
   410  0111                     	;# 
   411  0112                     	;# 
   412  0113                     	;# 
   413  0114                     	;# 
   414  0115                     	;# 
   415  0116                     	;# 
   416  0117                     	;# 
   417  0118                     	;# 
   418  0119                     	;# 
   419  011A                     	;# 
   420  011B                     	;# 
   421  011D                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019C                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019F                     	;# 
   445  020C                     	;# 
   446  020E                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0216                     	;# 
   459  0216                     	;# 
   460  0217                     	;# 
   461  0217                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0294                     	;# 
   467  0295                     	;# 
   468  0295                     	;# 
   469  0296                     	;# 
   470  0391                     	;# 
   471  0392                     	;# 
   472  0393                     	;# 
   473  039A                     	;# 
   474  039C                     	;# 
   475  039D                     	;# 
   476  039E                     	;# 
   477  039F                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000E                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  001E                     	;# 
   515  001F                     	;# 
   516  008C                     	;# 
   517  008E                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0098                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010E                     	;# 
   533  0111                     	;# 
   534  0112                     	;# 
   535  0113                     	;# 
   536  0114                     	;# 
   537  0115                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  0118                     	;# 
   541  0119                     	;# 
   542  011A                     	;# 
   543  011B                     	;# 
   544  011D                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020C                     	;# 
   569  020E                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0294                     	;# 
   590  0295                     	;# 
   591  0295                     	;# 
   592  0296                     	;# 
   593  0391                     	;# 
   594  0392                     	;# 
   595  0393                     	;# 
   596  039A                     	;# 
   597  039C                     	;# 
   598  039D                     	;# 
   599  039E                     	;# 
   600  039F                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000E                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  001E                     	;# 
   638  001F                     	;# 
   639  008C                     	;# 
   640  008E                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0098                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010E                     	;# 
   656  0111                     	;# 
   657  0112                     	;# 
   658  0113                     	;# 
   659  0114                     	;# 
   660  0115                     	;# 
   661  0116                     	;# 
   662  0117                     	;# 
   663  0118                     	;# 
   664  0119                     	;# 
   665  011A                     	;# 
   666  011B                     	;# 
   667  011D                     	;# 
   668  011D                     	;# 
   669  018C                     	;# 
   670  018E                     	;# 
   671  0191                     	;# 
   672  0191                     	;# 
   673  0192                     	;# 
   674  0193                     	;# 
   675  0193                     	;# 
   676  0193                     	;# 
   677  0194                     	;# 
   678  0195                     	;# 
   679  0196                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019E                     	;# 
   690  019F                     	;# 
   691  020C                     	;# 
   692  020E                     	;# 
   693  0211                     	;# 
   694  0211                     	;# 
   695  0212                     	;# 
   696  0212                     	;# 
   697  0213                     	;# 
   698  0213                     	;# 
   699  0214                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0294                     	;# 
   713  0295                     	;# 
   714  0295                     	;# 
   715  0296                     	;# 
   716  0391                     	;# 
   717  0392                     	;# 
   718  0393                     	;# 
   719  039A                     	;# 
   720  039C                     	;# 
   721  039D                     	;# 
   722  039E                     	;# 
   723  039F                     	;# 
   724  0FE4                     	;# 
   725  0FE5                     	;# 
   726  0FE6                     	;# 
   727  0FE7                     	;# 
   728  0FE8                     	;# 
   729  0FE9                     	;# 
   730  0FEA                     	;# 
   731  0FEB                     	;# 
   732  0FED                     	;# 
   733  0FEE                     	;# 
   734  0FEF                     	;# 
   735  0000                     	;# 
   736  0001                     	;# 
   737  0002                     	;# 
   738  0003                     	;# 
   739  0004                     	;# 
   740  0005                     	;# 
   741  0006                     	;# 
   742  0007                     	;# 
   743  0008                     	;# 
   744  0009                     	;# 
   745  000A                     	;# 
   746  000B                     	;# 
   747  000C                     	;# 
   748  000E                     	;# 
   749  0011                     	;# 
   750  0012                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008E                     	;# 
   764  0091                     	;# 
   765  0092                     	;# 
   766  0095                     	;# 
   767  0096                     	;# 
   768  0097                     	;# 
   769  0098                     	;# 
   770  0099                     	;# 
   771  009A                     	;# 
   772  009B                     	;# 
   773  009B                     	;# 
   774  009C                     	;# 
   775  009D                     	;# 
   776  009E                     	;# 
   777  010C                     	;# 
   778  010E                     	;# 
   779  0111                     	;# 
   780  0112                     	;# 
   781  0113                     	;# 
   782  0114                     	;# 
   783  0115                     	;# 
   784  0116                     	;# 
   785  0117                     	;# 
   786  0118                     	;# 
   787  0119                     	;# 
   788  011A                     	;# 
   789  011B                     	;# 
   790  011D                     	;# 
   791  011D                     	;# 
   792  018C                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0193                     	;# 
   800  0194                     	;# 
   801  0195                     	;# 
   802  0196                     	;# 
   803  0199                     	;# 
   804  019A                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019C                     	;# 
   810  019C                     	;# 
   811  019D                     	;# 
   812  019E                     	;# 
   813  019F                     	;# 
   814  020C                     	;# 
   815  020E                     	;# 
   816  0211                     	;# 
   817  0211                     	;# 
   818  0212                     	;# 
   819  0212                     	;# 
   820  0213                     	;# 
   821  0213                     	;# 
   822  0214                     	;# 
   823  0214                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0216                     	;# 
   828  0216                     	;# 
   829  0217                     	;# 
   830  0217                     	;# 
   831  0291                     	;# 
   832  0291                     	;# 
   833  0292                     	;# 
   834  0293                     	;# 
   835  0294                     	;# 
   836  0295                     	;# 
   837  0295                     	;# 
   838  0296                     	;# 
   839  0391                     	;# 
   840  0392                     	;# 
   841  0393                     	;# 
   842  039A                     	;# 
   843  039C                     	;# 
   844  039D                     	;# 
   845  039E                     	;# 
   846  039F                     	;# 
   847  0FE4                     	;# 
   848  0FE5                     	;# 
   849  0FE6                     	;# 
   850  0FE7                     	;# 
   851  0FE8                     	;# 
   852  0FE9                     	;# 
   853  0FEA                     	;# 
   854  0FEB                     	;# 
   855  0FED                     	;# 
   856  0FEE                     	;# 
   857  0FEF                     	;# 
   858  0000                     	;# 
   859  0001                     	;# 
   860  0002                     	;# 
   861  0003                     	;# 
   862  0004                     	;# 
   863  0005                     	;# 
   864  0006                     	;# 
   865  0007                     	;# 
   866  0008                     	;# 
   867  0009                     	;# 
   868  000A                     	;# 
   869  000B                     	;# 
   870  000C                     	;# 
   871  000E                     	;# 
   872  0011                     	;# 
   873  0012                     	;# 
   874  0015                     	;# 
   875  0016                     	;# 
   876  0016                     	;# 
   877  0017                     	;# 
   878  0018                     	;# 
   879  0019                     	;# 
   880  001A                     	;# 
   881  001B                     	;# 
   882  001C                     	;# 
   883  001E                     	;# 
   884  001F                     	;# 
   885  008C                     	;# 
   886  008E                     	;# 
   887  0091                     	;# 
   888  0092                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0097                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  010C                     	;# 
   901  010E                     	;# 
   902  0111                     	;# 
   903  0112                     	;# 
   904  0113                     	;# 
   905  0114                     	;# 
   906  0115                     	;# 
   907  0116                     	;# 
   908  0117                     	;# 
   909  0118                     	;# 
   910  0119                     	;# 
   911  011A                     	;# 
   912  011B                     	;# 
   913  011D                     	;# 
   914  011D                     	;# 
   915  018C                     	;# 
   916  018E                     	;# 
   917  0191                     	;# 
   918  0191                     	;# 
   919  0192                     	;# 
   920  0193                     	;# 
   921  0193                     	;# 
   922  0193                     	;# 
   923  0194                     	;# 
   924  0195                     	;# 
   925  0196                     	;# 
   926  0199                     	;# 
   927  019A                     	;# 
   928  019B                     	;# 
   929  019B                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019C                     	;# 
   933  019C                     	;# 
   934  019D                     	;# 
   935  019E                     	;# 
   936  019F                     	;# 
   937  020C                     	;# 
   938  020E                     	;# 
   939  0211                     	;# 
   940  0211                     	;# 
   941  0212                     	;# 
   942  0212                     	;# 
   943  0213                     	;# 
   944  0213                     	;# 
   945  0214                     	;# 
   946  0214                     	;# 
   947  0215                     	;# 
   948  0215                     	;# 
   949  0215                     	;# 
   950  0216                     	;# 
   951  0216                     	;# 
   952  0217                     	;# 
   953  0217                     	;# 
   954  0291                     	;# 
   955  0291                     	;# 
   956  0292                     	;# 
   957  0293                     	;# 
   958  0294                     	;# 
   959  0295                     	;# 
   960  0295                     	;# 
   961  0296                     	;# 
   962  0391                     	;# 
   963  0392                     	;# 
   964  0393                     	;# 
   965  039A                     	;# 
   966  039C                     	;# 
   967  039D                     	;# 
   968  039E                     	;# 
   969  039F                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000E                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  001E                     	;# 
  1007  001F                     	;# 
  1008  008C                     	;# 
  1009  008E                     	;# 
  1010  0091                     	;# 
  1011  0092                     	;# 
  1012  0095                     	;# 
  1013  0096                     	;# 
  1014  0097                     	;# 
  1015  0098                     	;# 
  1016  0099                     	;# 
  1017  009A                     	;# 
  1018  009B                     	;# 
  1019  009B                     	;# 
  1020  009C                     	;# 
  1021  009D                     	;# 
  1022  009E                     	;# 
  1023  010C                     	;# 
  1024  010E                     	;# 
  1025  0111                     	;# 
  1026  0112                     	;# 
  1027  0113                     	;# 
  1028  0114                     	;# 
  1029  0115                     	;# 
  1030  0116                     	;# 
  1031  0117                     	;# 
  1032  0118                     	;# 
  1033  0119                     	;# 
  1034  011A                     	;# 
  1035  011B                     	;# 
  1036  011D                     	;# 
  1037  011D                     	;# 
  1038  018C                     	;# 
  1039  018E                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0194                     	;# 
  1047  0195                     	;# 
  1048  0196                     	;# 
  1049  0199                     	;# 
  1050  019A                     	;# 
  1051  019B                     	;# 
  1052  019B                     	;# 
  1053  019B                     	;# 
  1054  019B                     	;# 
  1055  019C                     	;# 
  1056  019C                     	;# 
  1057  019D                     	;# 
  1058  019E                     	;# 
  1059  019F                     	;# 
  1060  020C                     	;# 
  1061  020E                     	;# 
  1062  0211                     	;# 
  1063  0211                     	;# 
  1064  0212                     	;# 
  1065  0212                     	;# 
  1066  0213                     	;# 
  1067  0213                     	;# 
  1068  0214                     	;# 
  1069  0214                     	;# 
  1070  0215                     	;# 
  1071  0215                     	;# 
  1072  0215                     	;# 
  1073  0216                     	;# 
  1074  0216                     	;# 
  1075  0217                     	;# 
  1076  0217                     	;# 
  1077  0291                     	;# 
  1078  0291                     	;# 
  1079  0292                     	;# 
  1080  0293                     	;# 
  1081  0294                     	;# 
  1082  0295                     	;# 
  1083  0295                     	;# 
  1084  0296                     	;# 
  1085  0391                     	;# 
  1086  0392                     	;# 
  1087  0393                     	;# 
  1088  039A                     	;# 
  1089  039C                     	;# 
  1090  039D                     	;# 
  1091  039E                     	;# 
  1092  039F                     	;# 
  1093  0FE4                     	;# 
  1094  0FE5                     	;# 
  1095  0FE6                     	;# 
  1096  0FE7                     	;# 
  1097  0FE8                     	;# 
  1098  0FE9                     	;# 
  1099  0FEA                     	;# 
  1100  0FEB                     	;# 
  1101  0FED                     	;# 
  1102  0FEE                     	;# 
  1103  0FEF                     	;# 
  1104  0000                     	;# 
  1105  0001                     	;# 
  1106  0002                     	;# 
  1107  0003                     	;# 
  1108  0004                     	;# 
  1109  0005                     	;# 
  1110  0006                     	;# 
  1111  0007                     	;# 
  1112  0008                     	;# 
  1113  0009                     	;# 
  1114  000A                     	;# 
  1115  000B                     	;# 
  1116  000C                     	;# 
  1117  000E                     	;# 
  1118  0011                     	;# 
  1119  0012                     	;# 
  1120  0015                     	;# 
  1121  0016                     	;# 
  1122  0016                     	;# 
  1123  0017                     	;# 
  1124  0018                     	;# 
  1125  0019                     	;# 
  1126  001A                     	;# 
  1127  001B                     	;# 
  1128  001C                     	;# 
  1129  001E                     	;# 
  1130  001F                     	;# 
  1131  008C                     	;# 
  1132  008E                     	;# 
  1133  0091                     	;# 
  1134  0092                     	;# 
  1135  0095                     	;# 
  1136  0096                     	;# 
  1137  0097                     	;# 
  1138  0098                     	;# 
  1139  0099                     	;# 
  1140  009A                     	;# 
  1141  009B                     	;# 
  1142  009B                     	;# 
  1143  009C                     	;# 
  1144  009D                     	;# 
  1145  009E                     	;# 
  1146  010C                     	;# 
  1147  010E                     	;# 
  1148  0111                     	;# 
  1149  0112                     	;# 
  1150  0113                     	;# 
  1151  0114                     	;# 
  1152  0115                     	;# 
  1153  0116                     	;# 
  1154  0117                     	;# 
  1155  0118                     	;# 
  1156  0119                     	;# 
  1157  011A                     	;# 
  1158  011B                     	;# 
  1159  011D                     	;# 
  1160  011D                     	;# 
  1161  018C                     	;# 
  1162  018E                     	;# 
  1163  0191                     	;# 
  1164  0191                     	;# 
  1165  0192                     	;# 
  1166  0193                     	;# 
  1167  0193                     	;# 
  1168  0193                     	;# 
  1169  0194                     	;# 
  1170  0195                     	;# 
  1171  0196                     	;# 
  1172  0199                     	;# 
  1173  019A                     	;# 
  1174  019B                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019B                     	;# 
  1178  019C                     	;# 
  1179  019C                     	;# 
  1180  019D                     	;# 
  1181  019E                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020E                     	;# 
  1185  0211                     	;# 
  1186  0211                     	;# 
  1187  0212                     	;# 
  1188  0212                     	;# 
  1189  0213                     	;# 
  1190  0213                     	;# 
  1191  0214                     	;# 
  1192  0214                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0216                     	;# 
  1197  0216                     	;# 
  1198  0217                     	;# 
  1199  0217                     	;# 
  1200  0291                     	;# 
  1201  0291                     	;# 
  1202  0292                     	;# 
  1203  0293                     	;# 
  1204  0294                     	;# 
  1205  0295                     	;# 
  1206  0295                     	;# 
  1207  0296                     	;# 
  1208  0391                     	;# 
  1209  0392                     	;# 
  1210  0393                     	;# 
  1211  039A                     	;# 
  1212  039C                     	;# 
  1213  039D                     	;# 
  1214  039E                     	;# 
  1215  039F                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227                           
  1228                           	psect	stringtext1
  1229  0431                     __pstringtext1:
  1230  0431                     _GOOD_WSP_VOLTAGE:
  1231  0431  348E               	retlw	142
  1232  0432  3400               	retlw	0
  1233  0433                     __end_of_GOOD_WSP_VOLTAGE:
  1234                           
  1235                           	psect	stringtext2
  1236  0433                     __pstringtext2:
  1237  0433                     _BAD_WSP_VOLTAGE:
  1238  0433  3480               	retlw	128
  1239  0434  3400               	retlw	0
  1240  0435                     __end_of_BAD_WSP_VOLTAGE:
  1241                           
  1242                           	psect	stringtext3
  1243  0435                     __pstringtext3:
  1244  0435                     _AUTOROTATION_DELAY:
  1245  0435  3478               	retlw	120
  1246  0436  3400               	retlw	0
  1247  0437                     __end_of_AUTOROTATION_DELAY:
  1248                           
  1249                           	psect	stringtext4
  1250  0437                     __pstringtext4:
  1251  0437                     _UP_RESISTANSE:
  1252  0437  3420               	retlw	32
  1253  0438  344E               	retlw	78
  1254  0439                     __end_of_UP_RESISTANSE:
  1255                           
  1256                           	psect	stringtext5
  1257  043F                     __pstringtext5:
  1258  043F                     _MELODY_REPEAT_DELAY:
  1259  043F  3403               	retlw	3
  1260  0440                     __end_of_MELODY_REPEAT_DELAY:
  1261                           
  1262                           	psect	stringtext6
  1263  0440                     __pstringtext6:
  1264  0440                     _MOVING_WAIT_DELAY:
  1265  0440  3402               	retlw	2
  1266  0441                     __end_of_MOVING_WAIT_DELAY:
  1267                           
  1268                           	psect	stringtext7
  1269  0441                     __pstringtext7:
  1270  0441                     _AUTOROTATION_DAYS:
  1271  0441  340E               	retlw	14
  1272  0442                     __end_of_AUTOROTATION_DAYS:
  1273                           
  1274                           	psect	stringtext8
  1275  0442                     __pstringtext8:
  1276  0442                     _FRIMWARE_VERSION_EEPROM_ADR:
  1277  0442  3401               	retlw	1
  1278  0443                     __end_of_FRIMWARE_VERSION_EEPROM_ADR:
  1279                           
  1280                           	psect	stringtext9
  1281  0439                     __pstringtext9:
  1282  0439                     _HIGH_WATER_RESISTANSE:
  1283  0439  34A8               	retlw	168
  1284  043A  3461               	retlw	97
  1285  043B                     __end_of_HIGH_WATER_RESISTANSE:
  1286                           
  1287                           	psect	stringtext10
  1288  043B                     __pstringtext10:
  1289  043B                     _LOW_WATER_RESISTANSE:
  1290  043B  3420               	retlw	32
  1291  043C  344E               	retlw	78
  1292  043D                     __end_of_LOW_WATER_RESISTANSE:
  1293                           
  1294                           	psect	stringtext11
  1295  0443                     __pstringtext11:
  1296  0443                     _RELE_GAP:
  1297  0443  3402               	retlw	2
  1298  0444                     __end_of_RELE_GAP:
  1299                           
  1300                           	psect	stringtext12
  1301  0444                     __pstringtext12:
  1302  0444                     _RELE_POWER_AUTOROTATION_DELAY:
  1303  0444  3405               	retlw	5
  1304  0445                     __end_of_RELE_POWER_AUTOROTATION_DELAY:
  1305                           
  1306                           	psect	stringtext13
  1307  0445                     __pstringtext13:
  1308  0445                     _RELE_POWER_WORK_DELAY:
  1309  0445  340F               	retlw	15
  1310  0446                     __end_of_RELE_POWER_WORK_DELAY:
  1311                           
  1312                           	psect	stringtext14
  1313  0446                     __pstringtext14:
  1314  0446                     _JUMP_MEAS_COUNT:
  1315  0446  340A               	retlw	10
  1316  0447                     __end_of_JUMP_MEAS_COUNT:
  1317                           
  1318                           	psect	stringtext15
  1319  0447                     __pstringtext15:
  1320  0447                     _FUN_MEAS_COUNT:
  1321  0447  340A               	retlw	10
  1322  0448                     __end_of_FUN_MEAS_COUNT:
  1323                           
  1324                           	psect	stringtext16
  1325  0448                     __pstringtext16:
  1326  0448                     _WSP_MEAS_COUNT:
  1327  0448  3404               	retlw	4
  1328  0449                     __end_of_WSP_MEAS_COUNT:
  1329                           
  1330                           	psect	stringtext17
  1331  0449                     __pstringtext17:
  1332  0449                     _LONG_ZUMMER_DELAY:
  1333  0449  3482               	retlw	130
  1334  044A                     __end_of_LONG_ZUMMER_DELAY:
  1335                           
  1336                           	psect	stringtext18
  1337  044A                     __pstringtext18:
  1338  044A                     _SHORT_ZUMMER_DELAY:
  1339  044A  341E               	retlw	30
  1340  044B                     __end_of_SHORT_ZUMMER_DELAY:
  1341                           
  1342                           	psect	nvBANK0
  1343  003F                     __pnvBANK0:
  1344  003F                     _TMR0_InterruptHandler:
  1345  003F                     	ds	2
  1346  0041                     _TMR2_InterruptHandler:
  1347  0041                     	ds	2
  1348  0043                     _timer0ReloadVal:
  1349  0043                     	ds	1
  1350  000C                     _PORTAbits	set	12
  1351  000E                     _PORTCbits	set	14
  1352  0015                     _TMR0	set	21
  1353  001C                     _T2CONbits	set	28
  1354  001C                     _T2CON	set	28
  1355  001A                     _TMR2	set	26
  1356  001B                     _PR2	set	27
  1357  0011                     _PIR1bits	set	17
  1358  000B                     _INTCONbits	set	11
  1359  005F                     _GIE	set	95
  1360  008C                     _TRISAbits	set	140
  1361  008E                     _TRISCbits	set	142
  1362  0095                     _OPTION_REG	set	149
  1363  0091                     _PIE1bits	set	145
  1364  0095                     _OPTION_REGbits	set	149
  1365  008E                     _TRISC	set	142
  1366  008C                     _TRISA	set	140
  1367  009D                     _ADCON0bits	set	157
  1368  009D                     _ADCON0	set	157
  1369  009C                     _ADRESH	set	156
  1370  009B                     _ADRESL	set	155
  1371  009E                     _ADCON1	set	158
  1372  0097                     _WDTCON	set	151
  1373  0098                     _OSCTUNE	set	152
  1374  0099                     _OSCCON	set	153
  1375  010C                     _LATAbits	set	268
  1376  010E                     _LATCbits	set	270
  1377  011D                     _APFCON	set	285
  1378  010E                     _LATC	set	270
  1379  010C                     _LATA	set	268
  1380  0116                     _BORCON	set	278
  1381  0191                     _EEADR	set	401
  1382  0196                     _EECON2	set	406
  1383  0193                     _EEDATA	set	403
  1384  018C                     _ANSELAbits	set	396
  1385  018E                     _ANSELCbits	set	398
  1386  018C                     _ANSELA	set	396
  1387  018E                     _ANSELC	set	398
  1388  0CA8                     _RD	set	3240
  1389  0CAA                     _WREN	set	3242
  1390  0CA9                     _WR	set	3241
  1391  020E                     _WPUC	set	526
  1392  020C                     _WPUA	set	524
  1393                           
  1394                           	psect	cinit
  1395  0017                     start_initialization:	
  1396                           ; #config settings
  1397                           
  1398  0017                     __initialization:
  1399                           
  1400                           ; Clear objects allocated to BITCOMMON
  1401  0017  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1402                           
  1403                           ; Clear objects allocated to COMMON
  1404  0018  01F6               	clrf	__pbssCOMMON& (0+127)
  1405  0019  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1406  001A  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1407  001B  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1408  001C  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  1409                           
  1410                           ; Clear objects allocated to BANK0
  1411  001D  3020               	movlw	low __pbssBANK0
  1412  001E  0084               	movwf	4
  1413  001F  3000               	movlw	high __pbssBANK0
  1414  0020  0085               	movwf	5
  1415  0021  301F               	movlw	31
  1416  0022  23FE               	fcall	clear_ram0
  1417  0023                     end_of_initialization:	
  1418                           ;End of C runtime variable initialization code
  1419                           
  1420  0023                     __end_of__initialization:
  1421  0023  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1422  0024  0020               	movlb	0
  1423  0025  2B48               	ljmp	_main	;jump to C main() function
  1424                           
  1425                           	psect	bitbssCOMMON
  1426  03D8                     __pbitbssCOMMON:
  1427  03D8                     EEPROM_WriteByte@status:
  1428  03D8                     	ds	1
  1429                           
  1430                           	psect	bssCOMMON
  1431  0076                     __pbssCOMMON:
  1432  0076                     _ff:
  1433  0076                     	ds	4
  1434  007A                     _beep_short_count:
  1435  007A                     	ds	1
  1436                           
  1437                           	psect	bssBANK0
  1438  0020                     __pbssBANK0:
  1439  0020                     _time_rotation:
  1440  0020                     	ds	3
  1441  0023                     ms_tick@s_count:
  1442  0023                     	ds	2
  1443  0025                     ms_tick@ms_count:
  1444  0025                     	ds	2
  1445  0027                     _time_zummer_long:
  1446  0027                     	ds	2
  1447  0029                     _time_zummer_short:
  1448  0029                     	ds	2
  1449  002B                     _time_tone:
  1450  002B                     	ds	2
  1451  002D                     _time_rele_gap:
  1452  002D                     	ds	2
  1453  002F                     _time_rele_control:
  1454  002F                     	ds	2
  1455  0031                     _time_rele_power:
  1456  0031                     	ds	2
  1457  0033                     _ADC_InterruptHandler:
  1458  0033                     	ds	2
  1459  0035                     get_jump@jump_counter:
  1460  0035                     	ds	1
  1461  0036                     get_fun@fun_counter:
  1462  0036                     	ds	1
  1463  0037                     get_wsp@bad_measures_counter:
  1464  0037                     	ds	1
  1465  0038                     sec_work@iled:
  1466  0038                     	ds	1
  1467  0039                     _beep_double_count:
  1468  0039                     	ds	1
  1469  003A                     _beep_long_count:
  1470  003A                     	ds	1
  1471  003B                     _time_meas:
  1472  003B                     	ds	1
  1473  003C                     _time_moving_wait:
  1474  003C                     	ds	1
  1475  003D                     _time_melody:
  1476  003D                     	ds	1
  1477  003E                     _sec_count:
  1478  003E                     	ds	1
  1479                           
  1480                           	psect	clrtext
  1481  03FE                     clear_ram0:	
  1482                           ;	Called with FSR0 containing the base address, and
  1483                           ;	WREG with the size to clear
  1484                           
  1485  03FE  0064               	clrwdt	;clear the watchdog before getting into this loop
  1486  03FF                     clrloop0:
  1487  03FF  0180               	clrf	0	;clear RAM location pointed to by FSR
  1488  0400  3101               	addfsr 0,1
  1489  0401  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1490  0402  2BFF               	goto	clrloop0	;have we reached the end yet?
  1491  0403  3400               	retlw	0	;all done for this memory range, return
  1492                           
  1493                           	psect	cstackCOMMON
  1494  0070                     __pcstackCOMMON:
  1495  0070                     ?_PIN_MANAGER_Initialize:
  1496  0070                     ?_OSCILLATOR_Initialize:	
  1497                           ; 1 bytes @ 0x0
  1498                           
  1499  0070                     ?_WDT_Initialize:	
  1500                           ; 1 bytes @ 0x0
  1501                           
  1502  0070                     ?_TMR2_Initialize:	
  1503                           ; 1 bytes @ 0x0
  1504                           
  1505  0070                     ?_ADC_Initialize:	
  1506                           ; 1 bytes @ 0x0
  1507                           
  1508  0070                     ?_TMR0_Initialize:	
  1509                           ; 1 bytes @ 0x0
  1510                           
  1511  0070                     ?_TMR0_ISR:	
  1512                           ; 1 bytes @ 0x0
  1513                           
  1514  0070                     ??_TMR0_ISR:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0070                     ?_TMR2_ISR:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0070                     ?_TMR2_DefaultInterruptHandler:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0070                     ??_TMR2_DefaultInterruptHandler:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0070                     ?_TMR0_DefaultInterruptHandler:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0070                     ??_TMR0_DefaultInterruptHandler:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0070                     ?_EEPROM_ReadByte:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0070                     ?_SYSTEM_Initialize:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0070                     ?_ADC_GetConversion:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0070                     ?_INTERRUPT_InterruptManager:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0070                     ?_TMR2_StartTimer:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0070                     ?_start_tone:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0070                     ??_start_tone:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0070                     ?_stop_tone:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0070                     ??_stop_tone:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0070                     ?_beep_short:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ??_beep_short:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ?_beep_long:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ??_beep_long:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_beep_double:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ??_beep_double:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_go_close:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_go_close_short:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ?_go_open:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_go_close_alt:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_go_open_alt:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_rele_off:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_close:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_open:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_rele_tick:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ??_rele_tick:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_start_alarm:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_clear_alarm:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_fun_work:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_switch_wm:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_autorotation_work:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_minute_tick:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ??_minute_tick:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_sec_30_work:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ??_sec_30_work:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ?_sec_work:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ?_ms_200_work:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ??_ms_200_work:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ?_ms_100_work:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0070                     ??_ms_100_work:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0070                     ?_ms_tick:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0070                     ?_eeprom_set:	
  1653                           ; 1 bytes @ 0x0
  1654                           
  1655  0070                     ?_hardware_work:	
  1656                           ; 1 bytes @ 0x0
  1657                           
  1658  0070                     ?_zummer_switch:	
  1659                           ; 1 bytes @ 0x0
  1660                           
  1661  0070                     ??_zummer_switch:	
  1662                           ; 1 bytes @ 0x0
  1663                           
  1664  0070                     ?_get_wsp:	
  1665                           ; 1 bytes @ 0x0
  1666                           
  1667  0070                     ?_get_fun:	
  1668                           ; 1 bytes @ 0x0
  1669                           
  1670  0070                     ?_get_jump:	
  1671                           ; 1 bytes @ 0x0
  1672                           
  1673  0070                     ?_start_setup:	
  1674                           ; 1 bytes @ 0x0
  1675                           
  1676  0070                     ?_main:	
  1677                           ; 1 bytes @ 0x0
  1678                           
  1679                           
  1680                           ; 1 bytes @ 0x0
  1681  0070                     	ds	1
  1682  0071                     ??_sec_work:
  1683                           
  1684                           ; 1 bytes @ 0x1
  1685  0071                     	ds	1
  1686  0072                     ??_PIN_MANAGER_Initialize:
  1687  0072                     ??_OSCILLATOR_Initialize:	
  1688                           ; 1 bytes @ 0x2
  1689                           
  1690  0072                     ??_WDT_Initialize:	
  1691                           ; 1 bytes @ 0x2
  1692                           
  1693  0072                     ??_ADC_Initialize:	
  1694                           ; 1 bytes @ 0x2
  1695                           
  1696  0072                     ??_TMR2_ISR:	
  1697                           ; 1 bytes @ 0x2
  1698                           
  1699  0072                     ?_TMR2_SetInterruptHandler:	
  1700                           ; 1 bytes @ 0x2
  1701                           
  1702  0072                     ?_TMR0_SetInterruptHandler:	
  1703                           ; 1 bytes @ 0x2
  1704                           
  1705  0072                     ??_EEPROM_ReadByte:	
  1706                           ; 1 bytes @ 0x2
  1707                           
  1708  0072                     ?_EEPROM_WriteByte:	
  1709                           ; 1 bytes @ 0x2
  1710                           
  1711  0072                     ??_ADC_GetConversion:	
  1712                           ; 1 bytes @ 0x2
  1713                           
  1714  0072                     ??_INTERRUPT_InterruptManager:	
  1715                           ; 1 bytes @ 0x2
  1716                           
  1717  0072                     ??_TMR2_StartTimer:	
  1718                           ; 1 bytes @ 0x2
  1719                           
  1720  0072                     ??_go_close:	
  1721                           ; 1 bytes @ 0x2
  1722                           
  1723  0072                     ??_go_close_short:	
  1724                           ; 1 bytes @ 0x2
  1725                           
  1726  0072                     ??_go_open:	
  1727                           ; 1 bytes @ 0x2
  1728                           
  1729  0072                     ??_go_close_alt:	
  1730                           ; 1 bytes @ 0x2
  1731                           
  1732  0072                     ??_go_open_alt:	
  1733                           ; 1 bytes @ 0x2
  1734                           
  1735  0072                     ??_rele_off:	
  1736                           ; 1 bytes @ 0x2
  1737                           
  1738  0072                     ??_start_alarm:	
  1739                           ; 1 bytes @ 0x2
  1740                           
  1741  0072                     ??_clear_alarm:	
  1742                           ; 1 bytes @ 0x2
  1743                           
  1744  0072                     ??_autorotation_work:	
  1745                           ; 1 bytes @ 0x2
  1746                           
  1747  0072                     ??_ms_tick:	
  1748                           ; 1 bytes @ 0x2
  1749                           
  1750  0072                     ??_hardware_work:	
  1751                           ; 1 bytes @ 0x2
  1752                           
  1753  0072                     ??_get_fun:	
  1754                           ; 1 bytes @ 0x2
  1755                           
  1756  0072                     ??_get_jump:	
  1757                           ; 1 bytes @ 0x2
  1758                           
  1759  0072                     EEPROM_WriteByte@dt:	
  1760                           ; 1 bytes @ 0x2
  1761                           
  1762  0072                     TMR2_SetInterruptHandler@InterruptHandler:	
  1763                           ; 1 bytes @ 0x2
  1764                           
  1765  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1766                           ; 2 bytes @ 0x2
  1767                           
  1768                           
  1769                           ; 2 bytes @ 0x2
  1770  0072                     	ds	1
  1771  0073                     ??_EEPROM_WriteByte:
  1772  0073                     ??_close:	
  1773                           ; 1 bytes @ 0x3
  1774                           
  1775  0073                     ??_open:	
  1776                           ; 1 bytes @ 0x3
  1777                           
  1778  0073                     ??_fun_work:	
  1779                           ; 1 bytes @ 0x3
  1780                           
  1781  0073                     ??_switch_wm:	
  1782                           ; 1 bytes @ 0x3
  1783                           
  1784  0073                     ADC_GetConversion@channel:	
  1785                           ; 1 bytes @ 0x3
  1786                           
  1787                           
  1788                           ; 1 bytes @ 0x3
  1789  0073                     	ds	1
  1790  0074                     ??_TMR2_Initialize:
  1791  0074                     ??_TMR0_Initialize:	
  1792                           ; 1 bytes @ 0x4
  1793                           
  1794  0074                     ??_TMR2_SetInterruptHandler:	
  1795                           ; 1 bytes @ 0x4
  1796                           
  1797  0074                     ??_TMR0_SetInterruptHandler:	
  1798                           ; 1 bytes @ 0x4
  1799                           
  1800  0074                     ??_get_wsp:	
  1801                           ; 1 bytes @ 0x4
  1802                           
  1803  0074                     EEPROM_ReadByte@addr:	
  1804                           ; 1 bytes @ 0x4
  1805                           
  1806                           
  1807                           ; 1 bytes @ 0x4
  1808  0074                     	ds	1
  1809  0075                     ??_SYSTEM_Initialize:
  1810  0075                     EEPROM_WriteByte@addr:	
  1811                           ; 1 bytes @ 0x5
  1812                           
  1813                           
  1814                           ; 1 bytes @ 0x5
  1815  0075                     	ds	1
  1816  0076                     ??_start_setup:
  1817  0076                     ??_main:	
  1818                           ; 1 bytes @ 0x6
  1819                           
  1820                           
  1821                           	psect	cstackBANK0
  1822  0044                     __pcstackBANK0:	
  1823                           ; 1 bytes @ 0x6
  1824                           
  1825  0044                     ??_eeprom_set:
  1826  0044                     get_wsp@res:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829                           
  1830                           ; 2 bytes @ 0x0
  1831  0044                     	ds	1
  1832  0045                     eeprom_set@vers:
  1833                           
  1834                           ; 1 bytes @ 0x1
  1835  0045                     	ds	1
  1836                           
  1837                           	psect	maintext
  1838  0348                     __pmaintext:	
  1839 ;;
  1840 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1841 ;;
  1842 ;; *************** function _main *****************
  1843 ;; Defined at:
  1844 ;;		line 829 in file "main.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : B1F/0
  1855 ;;		On exit  : 1D/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1
  1858 ;;      Params:         0       0       0
  1859 ;;      Locals:         0       0       0
  1860 ;;      Temps:          0       0       0
  1861 ;;      Totals:         0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels required when called: 11
  1864 ;; This function calls:
  1865 ;;		_autorotation_work
  1866 ;;		_close
  1867 ;;		_fun_work
  1868 ;;		_get_fun
  1869 ;;		_get_jump
  1870 ;;		_get_wsp
  1871 ;;		_hardware_work
  1872 ;;		_start_setup
  1873 ;;		_switch_wm
  1874 ;; This function is called by:
  1875 ;;		Startup code after reset
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879  0348                     _main:	
  1880                           ;psect for function _main
  1881                           
  1882                           
  1883                           ;main.c: 831:     start_setup();
  1884                           
  1885                           ;incstack = 0
  1886                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1887  0348  2137               	fcall	_start_setup
  1888  0349  2B50               	goto	l548
  1889  034A                     l2525:
  1890                           
  1891                           ;main.c: 844:             get_jump();
  1892  034A  21F4               	fcall	_get_jump
  1893                           
  1894                           ;main.c: 845:             switch_wm();
  1895  034B  22B2               	fcall	_switch_wm
  1896                           
  1897                           ;main.c: 847:             get_fun();
  1898  034C  216C               	fcall	_get_fun
  1899                           
  1900                           ;main.c: 848:             fun_work();
  1901  034D  2296               	fcall	_fun_work
  1902                           
  1903                           ;main.c: 850:             get_wsp();
  1904  034E  207A               	fcall	_get_wsp
  1905                           
  1906                           ;main.c: 852:                autorotation_work();
  1907  034F  20C0               	fcall	_autorotation_work
  1908  0350                     l548:	
  1909                           ;main.c: 834:     while (1) {
  1910                           
  1911                           ;main.c: 854:         } else {
  1912                           
  1913  0350  0064               	clrwdt	;# 
  1914                           
  1915                           ;main.c: 838:         hardware_work();
  1916  0351  21A1               	fcall	_hardware_work
  1917                           
  1918                           ;main.c: 842:         if (!ff.bits.ALARM_ON) {
  1919  0352  1C76               	btfss	_ff,0
  1920  0353  2B4A               	goto	l2525
  1921                           
  1922                           ;main.c: 855:             close();
  1923  0354  23A8               	fcall	_close
  1924  0355  2B50               	goto	l548
  1925  0356                     __end_of_main:
  1926                           
  1927                           	psect	text1
  1928  02B2                     __ptext1:	
  1929 ;; *************** function _switch_wm *****************
  1930 ;; Defined at:
  1931 ;;		line 358 in file "main.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 1D/2
  1942 ;;		On exit  : 1D/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1
  1945 ;;      Params:         0       0       0
  1946 ;;      Locals:         0       0       0
  1947 ;;      Temps:          1       0       0
  1948 ;;      Totals:         1       0       0
  1949 ;;Total ram usage:        1 bytes
  1950 ;; Hardware stack levels used: 1
  1951 ;; Hardware stack levels required when called: 8
  1952 ;; This function calls:
  1953 ;;		_rele_off
  1954 ;; This function is called by:
  1955 ;;		_main
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959  02B2                     _switch_wm:	
  1960                           ;psect for function _switch_wm
  1961                           
  1962                           
  1963                           ;main.c: 359:     if (ff.bits.JUMP_LOW) {
  1964                           
  1965                           ;incstack = 0
  1966                           ; Regs used in _switch_wm: [wreg+status,2+status,0+pclath+cstack]
  1967  02B2  1FF6               	btfss	_ff,7
  1968  02B3  2ABE               	goto	l390
  1969                           
  1970                           ;main.c: 360:         if (!ff.bits.UNIVERSAL_VORK_MODE_ON) {
  1971  02B4  18F9               	btfsc	_ff+3,1
  1972  02B5  0008               	return
  1973                           
  1974                           ;main.c: 361:             ff.bits.NORMAL_WORK_MODE_ON = 0;
  1975  02B6  1079               	bcf	_ff+3,0
  1976                           
  1977                           ;main.c: 362:             ff.bits.UNIVERSAL_VORK_MODE_ON = 1;
  1978  02B7  14F9               	bsf	_ff+3,1
  1979                           
  1980                           ;main.c: 363:             rele_off();
  1981  02B8  2318               	fcall	_rele_off
  1982                           
  1983                           ;main.c: 365:             beep_long_count = 2;
  1984  02B9  3002               	movlw	2
  1985  02BA  00F3               	movwf	??_switch_wm
  1986  02BB  0873               	movf	??_switch_wm,w
  1987  02BC  00BA               	movwf	_beep_long_count
  1988  02BD  0008               	return
  1989  02BE                     l390:
  1990  02BE  1C77               	btfss	_ff+1,0
  1991  02BF  0008               	return
  1992                           
  1993                           ;main.c: 368:         if (!ff.bits.NORMAL_WORK_MODE_ON) {
  1994  02C0  1879               	btfsc	_ff+3,0
  1995  02C1  0008               	return
  1996                           
  1997                           ;main.c: 369:             ff.bits.NORMAL_WORK_MODE_ON = 1;
  1998  02C2  1479               	bsf	_ff+3,0
  1999                           
  2000                           ;main.c: 370:             ff.bits.UNIVERSAL_VORK_MODE_ON = 0;
  2001  02C3  10F9               	bcf	_ff+3,1
  2002                           
  2003                           ;main.c: 371:             rele_off();
  2004  02C4  2318               	fcall	_rele_off
  2005                           
  2006                           ;main.c: 373:             beep_long_count = 1;
  2007  02C5  01BA               	clrf	_beep_long_count
  2008  02C6  0ABA               	incf	_beep_long_count,f
  2009  02C7  0008               	return
  2010  02C8                     __end_of_switch_wm:
  2011                           
  2012                           	psect	text2
  2013  0137                     __ptext2:	
  2014 ;; *************** function _start_setup *****************
  2015 ;; Defined at:
  2016 ;;		line 749 in file "main.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0, pclath, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : B1F/0
  2027 ;;		On exit  : 1F/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1
  2030 ;;      Params:         0       0       0
  2031 ;;      Locals:         0       0       0
  2032 ;;      Temps:          0       0       0
  2033 ;;      Totals:         0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used: 1
  2036 ;; Hardware stack levels required when called: 10
  2037 ;; This function calls:
  2038 ;;		_SYSTEM_Initialize
  2039 ;;		_TMR0_SetInterruptHandler
  2040 ;;		_TMR2_SetInterruptHandler
  2041 ;;		_TMR2_StartTimer
  2042 ;;		_eeprom_set
  2043 ;; This function is called by:
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048  0137                     _start_setup:	
  2049                           ;psect for function _start_setup
  2050                           
  2051                           
  2052                           ;main.c: 751:     SYSTEM_Initialize();
  2053                           
  2054                           ;incstack = 0
  2055                           ; Regs used in _start_setup: [wreg+status,2+status,0+pclath+cstack]
  2056  0137  23F0               	fcall	_SYSTEM_Initialize
  2057                           
  2058                           ;main.c: 752:     (INTCONbits.GIE = 1);
  2059  0138  178B               	bsf	11,7	;volatile
  2060                           
  2061                           ;main.c: 753:     (INTCONbits.PEIE = 1);
  2062  0139  170B               	bsf	11,6	;volatile
  2063                           
  2064                           ;main.c: 756:     eeprom_set();
  2065  013A  2356               	fcall	_eeprom_set
  2066                           
  2067                           ;main.c: 758:     TMR0_SetInterruptHandler(zummer_switch);
  2068  013B  30B4               	movlw	low _zummer_switch
  2069  013C  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2070  013D  3003               	movlw	high _zummer_switch
  2071  013E  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2072  013F  240A               	fcall	_TMR0_SetInterruptHandler
  2073                           
  2074                           ;main.c: 759:     TMR2_SetInterruptHandler(ms_tick);
  2075  0140  30CB               	movlw	low _ms_tick
  2076  0141  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2077  0142  3001               	movlw	high _ms_tick
  2078  0143  00F3               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2079  0144  2404               	fcall	_TMR2_SetInterruptHandler
  2080                           
  2081                           ;main.c: 760:     TMR2_StartTimer();
  2082  0145  243D               	fcall	_TMR2_StartTimer
  2083                           
  2084                           ;main.c: 777:     INTCONbits.TMR0IE = 0;
  2085  0146  128B               	bcf	11,5	;volatile
  2086                           
  2087                           ;main.c: 778:     ff.value = 0;
  2088  0147  3000               	movlw	0
  2089  0148  00F9               	movwf	_ff+3
  2090  0149  3000               	movlw	0
  2091  014A  00F8               	movwf	_ff+2
  2092  014B  3000               	movlw	0
  2093  014C  00F7               	movwf	_ff+1
  2094  014D  3000               	movlw	0
  2095  014E  00F6               	movwf	_ff
  2096  014F  0022               	movlb	2	; select bank2
  2097  0150  128E               	bcf	14,5	;volatile
  2098  0151  120E               	bcf	14,4	;volatile
  2099  0152  100E               	bcf	14,0	;volatile
  2100  0153  108E               	bcf	14,1	;volatile
  2101  0154  128C               	bcf	12,5	;volatile
  2102  0155  120C               	bcf	12,4	;volatile
  2103                           
  2104                           ;main.c: 787:     time_rotation = 0;
  2105  0156  3000               	movlw	0
  2106  0157  0020               	movlb	0	; select bank0
  2107  0158  00A0               	movwf	_time_rotation
  2108  0159  3000               	movlw	0
  2109  015A  00A1               	movwf	_time_rotation+1
  2110  015B  3000               	movlw	0
  2111  015C  00A2               	movwf	_time_rotation+2
  2112                           
  2113                           ;main.c: 788:     time_rele_power = 0;
  2114  015D  01B1               	clrf	_time_rele_power
  2115  015E  01B2               	clrf	_time_rele_power+1
  2116                           
  2117                           ;main.c: 789:     time_rele_control = 0;
  2118  015F  01AF               	clrf	_time_rele_control
  2119  0160  01B0               	clrf	_time_rele_control+1
  2120                           
  2121                           ;main.c: 790:     time_rele_gap = 0;
  2122  0161  01AD               	clrf	_time_rele_gap
  2123  0162  01AE               	clrf	_time_rele_gap+1
  2124                           
  2125                           ;main.c: 791:     time_tone = 0;
  2126  0163  01AB               	clrf	_time_tone
  2127  0164  01AC               	clrf	_time_tone+1
  2128                           
  2129                           ;main.c: 796:     time_melody = 0;
  2130  0165  01BD               	clrf	_time_melody
  2131                           
  2132                           ;main.c: 797:     time_zummer_short = 0;
  2133  0166  01A9               	clrf	_time_zummer_short
  2134  0167  01AA               	clrf	_time_zummer_short+1
  2135                           
  2136                           ;main.c: 798:     time_zummer_long = 0;
  2137  0168  01A7               	clrf	_time_zummer_long
  2138  0169  01A8               	clrf	_time_zummer_long+1
  2139                           
  2140                           ;main.c: 801:     time_meas = 0;
  2141  016A  01BB               	clrf	_time_meas
  2142  016B  0008               	return
  2143  016C                     __end_of_start_setup:
  2144                           
  2145                           	psect	text3
  2146  0356                     __ptext3:	
  2147 ;; *************** function _eeprom_set *****************
  2148 ;; Defined at:
  2149 ;;		line 557 in file "main.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;		None
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  vers            1    1[BANK0 ] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      void 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0, pclath, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 1F/0
  2160 ;;		On exit  : 1C/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMMON   BANK0   BANK1
  2163 ;;      Params:         0       0       0
  2164 ;;      Locals:         0       1       0
  2165 ;;      Temps:          0       1       0
  2166 ;;      Totals:         0       2       0
  2167 ;;Total ram usage:        2 bytes
  2168 ;; Hardware stack levels used: 1
  2169 ;; Hardware stack levels required when called: 8
  2170 ;; This function calls:
  2171 ;;		_EEPROM_ReadByte
  2172 ;;		_EEPROM_WriteByte
  2173 ;; This function is called by:
  2174 ;;		_start_setup
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178  0356                     _eeprom_set:	
  2179                           ;psect for function _eeprom_set
  2180                           
  2181                           
  2182                           ;main.c: 558:     char vers = EEPROM_ReadByte(FRIMWARE_VERSION_EEPROM_ADR);
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in _eeprom_set: [wreg+status,2+status,0+pclath+cstack]
  2186  0356  3001               	movlw	1
  2187  0357  2329               	fcall	_EEPROM_ReadByte
  2188  0358  0020               	movlb	0	; select bank0
  2189  0359  00C4               	movwf	??_eeprom_set
  2190  035A  0844               	movf	??_eeprom_set,w
  2191  035B  00C5               	movwf	eeprom_set@vers
  2192                           
  2193                           ;main.c: 559:     if (vers == 0xFF) {
  2194  035C  0A45               	incf	eeprom_set@vers,w
  2195  035D  1D03               	btfss	3,2
  2196  035E  0008               	return
  2197                           
  2198                           ;main.c: 560:         EEPROM_WriteByte(FRIMWARE_VERSION_EEPROM_ADR, 1);
  2199  035F  01F2               	clrf	EEPROM_WriteByte@dt
  2200  0360  0AF2               	incf	EEPROM_WriteByte@dt,f
  2201  0361  3001               	movlw	1
  2202  0362  221C               	fcall	_EEPROM_WriteByte
  2203  0363  0008               	return
  2204  0364                     __end_of_eeprom_set:
  2205                           
  2206                           	psect	text4
  2207  021C                     __ptext4:	
  2208 ;; *************** function _EEPROM_WriteByte *****************
  2209 ;; Defined at:
  2210 ;;		line 6 in file "eeprom.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  addr            1    wreg     unsigned char 
  2213 ;;  dt              1    2[COMMON] unsigned char 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  addr            1    5[COMMON] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg
  2220 ;; Tracked objects:
  2221 ;;		On entry : 1F/0
  2222 ;;		On exit  : 1F/3
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMMON   BANK0   BANK1
  2225 ;;      Params:         1       0       0
  2226 ;;      Locals:         1       0       0
  2227 ;;      Temps:          2       0       0
  2228 ;;      Totals:         4       0       0
  2229 ;;Total ram usage:        4 bytes
  2230 ;; Hardware stack levels used: 1
  2231 ;; Hardware stack levels required when called: 7
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_eeprom_set
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239  021C                     _EEPROM_WriteByte:	
  2240                           ;psect for function _EEPROM_WriteByte
  2241                           
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _EEPROM_WriteByte: [wreg]
  2245                           ;EEPROM_WriteByte@addr stored from wreg
  2246  021C  00F5               	movwf	EEPROM_WriteByte@addr
  2247  021D                     l572:	
  2248                           ;eeprom.c: 7:    static __bit status;;eeprom.c: 8:     while (WR);
  2249                           
  2250  021D  0023               	movlb	3	; select bank3
  2251  021E  1895               	btfsc	21,1	;volsfr
  2252  021F  2A1D               	goto	l572
  2253                           
  2254                           ;eeprom.c: 9:     status = GIE;
  2255  0220  107B               	bcf	EEPROM_WriteByte@status/(0+8),EEPROM_WriteByte@status& (0+7)
  2256  0221  1B8B               	btfsc	11,7	;volatile
  2257  0222  147B               	bsf	EEPROM_WriteByte@status/(0+8),EEPROM_WriteByte@status& (0+7)
  2258                           
  2259                           ;eeprom.c: 10:     GIE = 0;
  2260  0223  138B               	bcf	11,7	;volatile
  2261                           
  2262                           ;eeprom.c: 11:     EEADR = addr;
  2263  0224  0875               	movf	EEPROM_WriteByte@addr,w
  2264  0225  00F3               	movwf	??_EEPROM_WriteByte
  2265  0226  01F4               	clrf	??_EEPROM_WriteByte+1
  2266  0227  0873               	movf	??_EEPROM_WriteByte,w
  2267  0228  0023               	movlb	3	; select bank3
  2268  0229  0091               	movwf	17	;volatile
  2269  022A  0874               	movf	??_EEPROM_WriteByte+1,w
  2270  022B  0092               	movwf	18	;volatile
  2271                           
  2272                           ;eeprom.c: 12:     EEDATA = dt;
  2273  022C  0872               	movf	EEPROM_WriteByte@dt,w
  2274  022D  0093               	movwf	19	;volatile
  2275                           
  2276                           ;eeprom.c: 13:     WREN = 1;
  2277  022E  1515               	bsf	21,2	;volsfr
  2278                           
  2279                           ;eeprom.c: 14:     EECON2 = 0x55;
  2280  022F  3055               	movlw	85
  2281  0230  0096               	movwf	22	;volsfr
  2282                           
  2283                           ;eeprom.c: 15:     EECON2 = 0xAA;
  2284  0231  30AA               	movlw	170
  2285  0232  0096               	movwf	22	;volsfr
  2286                           
  2287                           ;eeprom.c: 16:     WR = 1;
  2288  0233  1495               	bsf	21,1	;volsfr
  2289                           
  2290                           ;eeprom.c: 17:     GIE = status;
  2291  0234  1C7B               	btfss	EEPROM_WriteByte@status/(0+8),EEPROM_WriteByte@status& (0+7)
  2292  0235  2A38               	goto	u2540
  2293  0236  178B               	bsf	11,7	;volatile
  2294  0237  2A39               	goto	l2423
  2295  0238                     u2540:
  2296  0238  138B               	bcf	11,7	;volatile
  2297  0239                     l2423:
  2298                           
  2299                           ;eeprom.c: 18:     WREN = 0;
  2300  0239  0023               	movlb	3	; select bank3
  2301  023A  1115               	bcf	21,2	;volsfr
  2302  023B  0008               	return
  2303  023C                     __end_of_EEPROM_WriteByte:
  2304                           
  2305                           	psect	text5
  2306  0329                     __ptext5:	
  2307 ;; *************** function _EEPROM_ReadByte *****************
  2308 ;; Defined at:
  2309 ;;		line 21 in file "eeprom.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  addr            1    wreg     unsigned char 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  addr            1    4[COMMON] unsigned char 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      unsigned char 
  2316 ;; Registers used:
  2317 ;;		wreg
  2318 ;; Tracked objects:
  2319 ;;		On entry : 1F/0
  2320 ;;		On exit  : 1F/3
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1
  2323 ;;      Params:         0       0       0
  2324 ;;      Locals:         1       0       0
  2325 ;;      Temps:          2       0       0
  2326 ;;      Totals:         3       0       0
  2327 ;;Total ram usage:        3 bytes
  2328 ;; Hardware stack levels used: 1
  2329 ;; Hardware stack levels required when called: 7
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_eeprom_set
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337  0329                     _EEPROM_ReadByte:	
  2338                           ;psect for function _EEPROM_ReadByte
  2339                           
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in _EEPROM_ReadByte: [wreg]
  2343                           ;EEPROM_ReadByte@addr stored from wreg
  2344  0329  00F4               	movwf	EEPROM_ReadByte@addr
  2345  032A                     l578:	
  2346                           ;eeprom.c: 22:     while (RD || WR);
  2347                           
  2348  032A  0023               	movlb	3	; select bank3
  2349  032B  1815               	btfsc	21,0	;volsfr
  2350  032C  2B2A               	goto	l578
  2351  032D  1895               	btfsc	21,1	;volsfr
  2352  032E  2B2A               	goto	l578
  2353                           
  2354                           ;eeprom.c: 23:     EEADR = addr;
  2355  032F  0874               	movf	EEPROM_ReadByte@addr,w
  2356  0330  00F2               	movwf	??_EEPROM_ReadByte
  2357  0331  01F3               	clrf	??_EEPROM_ReadByte+1
  2358  0332  0872               	movf	??_EEPROM_ReadByte,w
  2359  0333  0091               	movwf	17	;volatile
  2360  0334  0873               	movf	??_EEPROM_ReadByte+1,w
  2361  0335  0092               	movwf	18	;volatile
  2362                           
  2363                           ;eeprom.c: 24:     RD = 1;
  2364  0336  1415               	bsf	21,0	;volsfr
  2365                           
  2366                           ;eeprom.c: 25:     return EEDATA;
  2367  0337  0813               	movf	19,w	;volatile
  2368  0338  0008               	return
  2369  0339                     __end_of_EEPROM_ReadByte:
  2370                           
  2371                           	psect	text6
  2372  043D                     __ptext6:	
  2373 ;; *************** function _TMR2_StartTimer *****************
  2374 ;; Defined at:
  2375 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;		None
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;		None
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		None
  2384 ;; Tracked objects:
  2385 ;;		On entry : 1F/0
  2386 ;;		On exit  : 1F/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMMON   BANK0   BANK1
  2389 ;;      Params:         0       0       0
  2390 ;;      Locals:         0       0       0
  2391 ;;      Temps:          0       0       0
  2392 ;;      Totals:         0       0       0
  2393 ;;Total ram usage:        0 bytes
  2394 ;; Hardware stack levels used: 1
  2395 ;; Hardware stack levels required when called: 7
  2396 ;; This function calls:
  2397 ;;		Nothing
  2398 ;; This function is called by:
  2399 ;;		_start_setup
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403  043D                     _TMR2_StartTimer:	
  2404                           ;psect for function _TMR2_StartTimer
  2405                           
  2406                           
  2407                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _TMR2_StartTimer: []
  2411  043D  151C               	bsf	28,2	;volatile
  2412  043E  0008               	return
  2413  043F                     __end_of_TMR2_StartTimer:
  2414                           
  2415                           	psect	text7
  2416  03F0                     __ptext7:	
  2417 ;; *************** function _SYSTEM_Initialize *****************
  2418 ;; Defined at:
  2419 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;		None
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, pclath, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : B1F/0
  2430 ;;		On exit  : 1F/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMMON   BANK0   BANK1
  2433 ;;      Params:         0       0       0
  2434 ;;      Locals:         0       0       0
  2435 ;;      Temps:          0       0       0
  2436 ;;      Totals:         0       0       0
  2437 ;;Total ram usage:        0 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 9
  2440 ;; This function calls:
  2441 ;;		_ADC_Initialize
  2442 ;;		_OSCILLATOR_Initialize
  2443 ;;		_PIN_MANAGER_Initialize
  2444 ;;		_TMR0_Initialize
  2445 ;;		_TMR2_Initialize
  2446 ;;		_WDT_Initialize
  2447 ;; This function is called by:
  2448 ;;		_start_setup
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452  03F0                     _SYSTEM_Initialize:	
  2453                           ;psect for function _SYSTEM_Initialize
  2454                           
  2455                           
  2456                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2457                           
  2458                           ;incstack = 0
  2459                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2460  03F0  22DE               	fcall	_PIN_MANAGER_Initialize
  2461                           
  2462                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2463  03F1  23F7               	fcall	_OSCILLATOR_Initialize
  2464                           
  2465                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  2466  03F2  2422               	fcall	_WDT_Initialize
  2467                           
  2468                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  2469  03F3  2339               	fcall	_TMR2_Initialize
  2470                           
  2471                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  2472  03F4  23E8               	fcall	_ADC_Initialize
  2473                           
  2474                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  2475  03F5  22F3               	fcall	_TMR0_Initialize
  2476  03F6  0008               	return
  2477  03F7                     __end_of_SYSTEM_Initialize:
  2478                           
  2479                           	psect	text8
  2480  0422                     __ptext8:	
  2481 ;; *************** function _WDT_Initialize *****************
  2482 ;; Defined at:
  2483 ;;		line 71 in file "mcc_generated_files/mcc.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;		None
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg
  2492 ;; Tracked objects:
  2493 ;;		On entry : B1F/2
  2494 ;;		On exit  : B1F/1
  2495 ;;		Unchanged: B00/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1
  2497 ;;      Params:         0       0       0
  2498 ;;      Locals:         0       0       0
  2499 ;;      Temps:          0       0       0
  2500 ;;      Totals:         0       0       0
  2501 ;;Total ram usage:        0 bytes
  2502 ;; Hardware stack levels used: 1
  2503 ;; Hardware stack levels required when called: 7
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_SYSTEM_Initialize
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511  0422                     _WDT_Initialize:	
  2512                           ;psect for function _WDT_Initialize
  2513                           
  2514                           
  2515                           ;mcc_generated_files/mcc.c: 74:     WDTCON = 0x0A;
  2516                           
  2517                           ;incstack = 0
  2518                           ; Regs used in _WDT_Initialize: [wreg]
  2519  0422  300A               	movlw	10
  2520  0423  0021               	movlb	1	; select bank1
  2521  0424  0097               	movwf	23	;volatile
  2522  0425  0008               	return
  2523  0426                     __end_of_WDT_Initialize:
  2524                           
  2525                           	psect	text9
  2526  0339                     __ptext9:	
  2527 ;; *************** function _TMR2_Initialize *****************
  2528 ;; Defined at:
  2529 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, status,2, status,0, pclath, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : B1F/1
  2540 ;;		On exit  : 1F/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1
  2543 ;;      Params:         0       0       0
  2544 ;;      Locals:         0       0       0
  2545 ;;      Temps:          0       0       0
  2546 ;;      Totals:         0       0       0
  2547 ;;Total ram usage:        0 bytes
  2548 ;; Hardware stack levels used: 1
  2549 ;; Hardware stack levels required when called: 8
  2550 ;; This function calls:
  2551 ;;		_TMR2_SetInterruptHandler
  2552 ;; This function is called by:
  2553 ;;		_SYSTEM_Initialize
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557  0339                     _TMR2_Initialize:	
  2558                           ;psect for function _TMR2_Initialize
  2559                           
  2560                           
  2561                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x63;
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2565  0339  3063               	movlw	99
  2566  033A  0020               	movlb	0	; select bank0
  2567  033B  009B               	movwf	27	;volatile
  2568                           
  2569                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  2570  033C  019A               	clrf	26	;volatile
  2571                           
  2572                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  2573  033D  1091               	bcf	17,1	;volatile
  2574                           
  2575                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  2576  033E  0021               	movlb	1	; select bank1
  2577  033F  1491               	bsf	17,1	;volatile
  2578                           
  2579                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  2580  0340  304B               	movlw	low _TMR2_DefaultInterruptHandler
  2581  0341  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  2582  0342  3004               	movlw	high _TMR2_DefaultInterruptHandler
  2583  0343  00F3               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  2584  0344  2404               	fcall	_TMR2_SetInterruptHandler
  2585                           
  2586                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x4D;
  2587  0345  304D               	movlw	77
  2588  0346  009C               	movwf	28	;volatile
  2589  0347  0008               	return
  2590  0348                     __end_of_TMR2_Initialize:
  2591                           
  2592                           	psect	text10
  2593  0404                     __ptext10:	
  2594 ;; *************** function _TMR2_SetInterruptHandler *****************
  2595 ;; Defined at:
  2596 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2599 ;;		 -> ms_tick(1), TMR2_DefaultInterruptHandler(1), 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg
  2606 ;; Tracked objects:
  2607 ;;		On entry : 1E/0
  2608 ;;		On exit  : 1F/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         2       0       0
  2612 ;;      Locals:         0       0       0
  2613 ;;      Temps:          0       0       0
  2614 ;;      Totals:         2       0       0
  2615 ;;Total ram usage:        2 bytes
  2616 ;; Hardware stack levels used: 1
  2617 ;; Hardware stack levels required when called: 7
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_TMR2_Initialize
  2622 ;;		_start_setup
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626  0404                     _TMR2_SetInterruptHandler:	
  2627                           ;psect for function _TMR2_SetInterruptHandler
  2628                           
  2629                           
  2630                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  2634  0404  0873               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  2635  0405  0020               	movlb	0	; select bank0
  2636  0406  00C2               	movwf	_TMR2_InterruptHandler+1
  2637  0407  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  2638  0408  00C1               	movwf	_TMR2_InterruptHandler
  2639  0409  0008               	return
  2640  040A                     __end_of_TMR2_SetInterruptHandler:
  2641                           
  2642                           	psect	text11
  2643  02F3                     __ptext11:	
  2644 ;; *************** function _TMR0_Initialize *****************
  2645 ;; Defined at:
  2646 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;		None
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, status,0, pclath, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 1F/1
  2657 ;;		On exit  : 1F/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMMON   BANK0   BANK1
  2660 ;;      Params:         0       0       0
  2661 ;;      Locals:         0       0       0
  2662 ;;      Temps:          1       0       0
  2663 ;;      Totals:         1       0       0
  2664 ;;Total ram usage:        1 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 8
  2667 ;; This function calls:
  2668 ;;		_TMR0_SetInterruptHandler
  2669 ;; This function is called by:
  2670 ;;		_SYSTEM_Initialize
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674  02F3                     _TMR0_Initialize:	
  2675                           ;psect for function _TMR0_Initialize
  2676                           
  2677                           
  2678                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD1 
      +                          & 0x3F));
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2682  02F3  0815               	movf	21,w	;volatile
  2683  02F4  39C0               	andlw	192
  2684  02F5  3811               	iorlw	17
  2685  02F6  0095               	movwf	21	;volatile
  2686                           
  2687                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0x83;
  2688  02F7  3083               	movlw	131
  2689  02F8  0020               	movlb	0	; select bank0
  2690  02F9  0095               	movwf	21	;volatile
  2691                           
  2692                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 131;
  2693  02FA  3083               	movlw	131
  2694  02FB  00F4               	movwf	??_TMR0_Initialize
  2695  02FC  0874               	movf	??_TMR0_Initialize,w
  2696  02FD  00C3               	movwf	_timer0ReloadVal	;volatile
  2697                           
  2698                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  2699  02FE  110B               	bcf	11,2	;volatile
  2700                           
  2701                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  2702  02FF  168B               	bsf	11,5	;volatile
  2703                           
  2704                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  2705  0300  304C               	movlw	low _TMR0_DefaultInterruptHandler
  2706  0301  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2707  0302  3004               	movlw	high _TMR0_DefaultInterruptHandler
  2708  0303  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2709  0304  240A               	fcall	_TMR0_SetInterruptHandler
  2710  0305  0008               	return
  2711  0306                     __end_of_TMR0_Initialize:
  2712                           
  2713                           	psect	text12
  2714  040A                     __ptext12:	
  2715 ;; *************** function _TMR0_SetInterruptHandler *****************
  2716 ;; Defined at:
  2717 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2720 ;;		 -> zummer_switch(1), TMR0_DefaultInterruptHandler(1), 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg
  2727 ;; Tracked objects:
  2728 ;;		On entry : 1C/0
  2729 ;;		On exit  : 1F/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMMON   BANK0   BANK1
  2732 ;;      Params:         2       0       0
  2733 ;;      Locals:         0       0       0
  2734 ;;      Temps:          0       0       0
  2735 ;;      Totals:         2       0       0
  2736 ;;Total ram usage:        2 bytes
  2737 ;; Hardware stack levels used: 1
  2738 ;; Hardware stack levels required when called: 7
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_TMR0_Initialize
  2743 ;;		_start_setup
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747  040A                     _TMR0_SetInterruptHandler:	
  2748                           ;psect for function _TMR0_SetInterruptHandler
  2749                           
  2750                           
  2751                           ;mcc_generated_files/tmr0.c: 126:     TMR0_InterruptHandler = InterruptHandler;
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2755  040A  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2756  040B  0020               	movlb	0	; select bank0
  2757  040C  00C0               	movwf	_TMR0_InterruptHandler+1
  2758  040D  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2759  040E  00BF               	movwf	_TMR0_InterruptHandler
  2760  040F  0008               	return
  2761  0410                     __end_of_TMR0_SetInterruptHandler:
  2762                           
  2763                           	psect	text13
  2764  02DE                     __ptext13:	
  2765 ;; *************** function _PIN_MANAGER_Initialize *****************
  2766 ;; Defined at:
  2767 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;		None
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;		None
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2
  2776 ;; Tracked objects:
  2777 ;;		On entry : B1F/0
  2778 ;;		On exit  : B1F/2
  2779 ;;		Unchanged: B00/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1
  2781 ;;      Params:         0       0       0
  2782 ;;      Locals:         0       0       0
  2783 ;;      Temps:          0       0       0
  2784 ;;      Totals:         0       0       0
  2785 ;;Total ram usage:        0 bytes
  2786 ;; Hardware stack levels used: 1
  2787 ;; Hardware stack levels required when called: 7
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_SYSTEM_Initialize
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795  02DE                     _PIN_MANAGER_Initialize:	
  2796                           ;psect for function _PIN_MANAGER_Initialize
  2797                           
  2798                           
  2799                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2800                           
  2801                           ;incstack = 0
  2802                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2803  02DE  0022               	movlb	2	; select bank2
  2804  02DF  018C               	clrf	12	;volatile
  2805                           
  2806                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  2807  02E0  018E               	clrf	14	;volatile
  2808                           
  2809                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x0F;
  2810  02E1  300F               	movlw	15
  2811  02E2  0021               	movlb	1	; select bank1
  2812  02E3  008C               	movwf	12	;volatile
  2813                           
  2814                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x0C;
  2815  02E4  300C               	movlw	12
  2816  02E5  008E               	movwf	14	;volatile
  2817                           
  2818                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x08;
  2819  02E6  3008               	movlw	8
  2820  02E7  0023               	movlb	3	; select bank3
  2821  02E8  008E               	movwf	14	;volatile
  2822                           
  2823                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x05;
  2824  02E9  3005               	movlw	5
  2825  02EA  008C               	movwf	12	;volatile
  2826                           
  2827                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  2828  02EB  0024               	movlb	4	; select bank4
  2829  02EC  018C               	clrf	12	;volatile
  2830                           
  2831                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  2832  02ED  018E               	clrf	14	;volatile
  2833                           
  2834                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  2835  02EE  0021               	movlb	1	; select bank1
  2836  02EF  1795               	bsf	21,7	;volatile
  2837                           
  2838                           ;mcc_generated_files/pin_manager.c: 86:     APFCON = 0x00;
  2839  02F0  0022               	movlb	2	; select bank2
  2840  02F1  019D               	clrf	29	;volatile
  2841  02F2  0008               	return
  2842  02F3                     __end_of_PIN_MANAGER_Initialize:
  2843                           
  2844                           	psect	text14
  2845  03F7                     __ptext14:	
  2846 ;; *************** function _OSCILLATOR_Initialize *****************
  2847 ;; Defined at:
  2848 ;;		line 61 in file "mcc_generated_files/mcc.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2
  2857 ;; Tracked objects:
  2858 ;;		On entry : B1F/2
  2859 ;;		On exit  : B1F/2
  2860 ;;		Unchanged: B00/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1
  2862 ;;      Params:         0       0       0
  2863 ;;      Locals:         0       0       0
  2864 ;;      Temps:          0       0       0
  2865 ;;      Totals:         0       0       0
  2866 ;;Total ram usage:        0 bytes
  2867 ;; Hardware stack levels used: 1
  2868 ;; Hardware stack levels required when called: 7
  2869 ;; This function calls:
  2870 ;;		Nothing
  2871 ;; This function is called by:
  2872 ;;		_SYSTEM_Initialize
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876  03F7                     _OSCILLATOR_Initialize:	
  2877                           ;psect for function _OSCILLATOR_Initialize
  2878                           
  2879                           
  2880                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0x78;
  2881                           
  2882                           ;incstack = 0
  2883                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2884  03F7  3078               	movlw	120
  2885  03F8  0021               	movlb	1	; select bank1
  2886  03F9  0099               	movwf	25	;volatile
  2887                           
  2888                           ;mcc_generated_files/mcc.c: 66:     OSCTUNE = 0x00;
  2889  03FA  0198               	clrf	24	;volatile
  2890                           
  2891                           ;mcc_generated_files/mcc.c: 68:     BORCON = 0x00;
  2892  03FB  0022               	movlb	2	; select bank2
  2893  03FC  0196               	clrf	22	;volatile
  2894  03FD  0008               	return
  2895  03FE                     __end_of_OSCILLATOR_Initialize:
  2896                           
  2897                           	psect	text15
  2898  03E8                     __ptext15:	
  2899 ;; *************** function _ADC_Initialize *****************
  2900 ;; Defined at:
  2901 ;;		line 67 in file "mcc_generated_files/adc.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2
  2910 ;; Tracked objects:
  2911 ;;		On entry : 1F/0
  2912 ;;		On exit  : 1F/1
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1
  2915 ;;      Params:         0       0       0
  2916 ;;      Locals:         0       0       0
  2917 ;;      Temps:          0       0       0
  2918 ;;      Totals:         0       0       0
  2919 ;;Total ram usage:        0 bytes
  2920 ;; Hardware stack levels used: 1
  2921 ;; Hardware stack levels required when called: 7
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_SYSTEM_Initialize
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929  03E8                     _ADC_Initialize:	
  2930                           ;psect for function _ADC_Initialize
  2931                           
  2932                           
  2933                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x50;
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  2937  03E8  3050               	movlw	80
  2938  03E9  0021               	movlb	1	; select bank1
  2939  03EA  009E               	movwf	30	;volatile
  2940                           
  2941                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  2942  03EB  019B               	clrf	27	;volatile
  2943                           
  2944                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  2945  03EC  019C               	clrf	28	;volatile
  2946                           
  2947                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x1D;
  2948  03ED  301D               	movlw	29
  2949  03EE  009D               	movwf	29	;volatile
  2950  03EF  0008               	return
  2951  03F0                     __end_of_ADC_Initialize:
  2952                           
  2953                           	psect	text16
  2954  01A1                     __ptext16:	
  2955 ;; *************** function _hardware_work *****************
  2956 ;; Defined at:
  2957 ;;		line 565 in file "main.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		None
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 1F/2
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1
  2971 ;;      Params:         0       0       0
  2972 ;;      Locals:         0       0       0
  2973 ;;      Temps:          0       0       0
  2974 ;;      Totals:         0       0       0
  2975 ;;Total ram usage:        0 bytes
  2976 ;; Hardware stack levels used: 1
  2977 ;; Hardware stack levels required when called: 7
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985  01A1                     _hardware_work:	
  2986                           ;psect for function _hardware_work
  2987                           
  2988                           
  2989                           ;main.c: 566:     LATCbits.LATC0 = ff.bits.ALARM_ON;
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _hardware_work: []
  2993  01A1  1C76               	btfss	_ff,0
  2994  01A2  29A6               	goto	u1030
  2995  01A3  0022               	movlb	2	; select bank2
  2996  01A4  140E               	bsf	14,0	;volatile
  2997  01A5  29A8               	goto	u1044
  2998  01A6                     u1030:
  2999  01A6  0022               	movlb	2	; select bank2
  3000  01A7  100E               	bcf	14,0	;volatile
  3001  01A8                     u1044:
  3002                           
  3003                           ;main.c: 567:     LATCbits.LATC1 = ff.bits.MEAS_ON;
  3004  01A8  1E79               	btfss	_ff+3,4
  3005  01A9  29AD               	goto	u1050
  3006  01AA  0022               	movlb	2	; select bank2
  3007  01AB  148E               	bsf	14,1	;volatile
  3008  01AC  29AF               	goto	u1064
  3009  01AD                     u1050:
  3010  01AD  0022               	movlb	2	; select bank2
  3011  01AE  108E               	bcf	14,1	;volatile
  3012  01AF                     u1064:
  3013                           
  3014                           ;main.c: 568:     LATCbits.LATC4 = ff.bits.RELE_CONTROL_ON;
  3015  01AF  1F77               	btfss	_ff+1,6
  3016  01B0  29B4               	goto	u1070
  3017  01B1  0022               	movlb	2	; select bank2
  3018  01B2  160E               	bsf	14,4	;volatile
  3019  01B3  29B6               	goto	u1084
  3020  01B4                     u1070:
  3021  01B4  0022               	movlb	2	; select bank2
  3022  01B5  120E               	bcf	14,4	;volatile
  3023  01B6                     u1084:
  3024                           
  3025                           ;main.c: 569:     LATCbits.LATC5 = ff.bits.RELE_POWER_ON;
  3026  01B6  1EF7               	btfss	_ff+1,5
  3027  01B7  29BB               	goto	u1090
  3028  01B8  0022               	movlb	2	; select bank2
  3029  01B9  168E               	bsf	14,5	;volatile
  3030  01BA  29BD               	goto	u1104
  3031  01BB                     u1090:
  3032  01BB  0022               	movlb	2	; select bank2
  3033  01BC  128E               	bcf	14,5	;volatile
  3034  01BD                     u1104:
  3035                           
  3036                           ;main.c: 570:     LATAbits.LATA4 = ff.bits.LED_ON;
  3037  01BD  1D79               	btfss	_ff+3,2
  3038  01BE  29C2               	goto	u1110
  3039  01BF  0022               	movlb	2	; select bank2
  3040  01C0  160C               	bsf	12,4	;volatile
  3041  01C1  29C4               	goto	u1124
  3042  01C2                     u1110:
  3043  01C2  0022               	movlb	2	; select bank2
  3044  01C3  120C               	bcf	12,4	;volatile
  3045  01C4                     u1124:
  3046                           
  3047                           ;main.c: 572:     if (ff.bits.TONE_ON) {
  3048  01C4  18F8               	btfsc	_ff+2,1
  3049                           
  3050                           ;main.c: 573:         INTCONbits.TMR0IE = 1;
  3051  01C5  168B               	bsf	11,5	;volatile
  3052                           
  3053                           ;main.c: 575:     if (ff.bits.TONE_OFF) {
  3054                           
  3055                           ;main.c: 574:     };
  3056  01C6  1D78               	btfss	_ff+2,2
  3057  01C7  0008               	return
  3058                           
  3059                           ;main.c: 576:         INTCONbits.TMR0IE = 0;
  3060  01C8  128B               	bcf	11,5	;volatile
  3061                           
  3062                           ;main.c: 577:         do { LATAbits.LATA5 = 0; } while(0);
  3063  01C9  128C               	bcf	12,5	;volatile
  3064  01CA  0008               	return
  3065  01CB                     __end_of_hardware_work:
  3066                           
  3067                           	psect	text17
  3068  007A                     __ptext17:	
  3069 ;; *************** function _get_wsp *****************
  3070 ;; Defined at:
  3071 ;;		line 590 in file "main.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  res             2    0[BANK0 ] unsigned int 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0, pclath, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/2
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1
  3085 ;;      Params:         0       0       0
  3086 ;;      Locals:         0       2       0
  3087 ;;      Temps:          2       0       0
  3088 ;;      Totals:         2       2       0
  3089 ;;Total ram usage:        4 bytes
  3090 ;; Hardware stack levels used: 1
  3091 ;; Hardware stack levels required when called: 8
  3092 ;; This function calls:
  3093 ;;		_ADC_GetConversion
  3094 ;;		_clear_alarm
  3095 ;;		_start_alarm
  3096 ;; This function is called by:
  3097 ;;		_main
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101  007A                     _get_wsp:	
  3102                           ;psect for function _get_wsp
  3103                           
  3104                           
  3105                           ;main.c: 592:     if (ff.bits.ALLOW_MEASURE) {
  3106                           
  3107                           ;incstack = 0
  3108                           ; Regs used in _get_wsp: [wreg+status,2+status,0+pclath+cstack]
  3109  007A  1E76               	btfss	_ff,4
  3110  007B  0008               	return
  3111                           
  3112                           ;main.c: 594:         static signed char bad_measures_counter = 0;;main.c: 595:         
      +                          do { LATCbits.LATC1 = 1; } while(0);
  3113  007C  0022               	movlb	2	; select bank2
  3114  007D  148E               	bsf	14,1	;volatile
  3115                           
  3116                           ;main.c: 596:         do { ANSELCbits.ANSC3 = 1; } while(0);
  3117  007E  0023               	movlb	3	; select bank3
  3118  007F  158E               	bsf	14,3	;volatile
  3119                           
  3120                           ;main.c: 597:         _delay((unsigned long)((1)*(16000000/4000.0)));
  3121  0080  3006               	movlw	6
  3122  0081  00F4               	movwf	??_get_wsp
  3123  0082  3030               	movlw	48
  3124  0083                     u2647:
  3125  0083  0B89               	decfsz	9,f
  3126  0084  2883               	goto	u2647
  3127  0085  0BF4               	decfsz	??_get_wsp,f
  3128  0086  2883               	goto	u2647
  3129  0087  3200               	nop2
  3130                           
  3131                           ;main.c: 598:         unsigned res = ADC_GetConversion(PIN_WSP_STATE);
  3132  0088  3007               	movlw	7
  3133  0089  22C8               	fcall	_ADC_GetConversion
  3134  008A  00F4               	movwf	??_get_wsp
  3135  008B  01F5               	clrf	??_get_wsp+1
  3136  008C  0874               	movf	??_get_wsp,w
  3137  008D  0020               	movlb	0	; select bank0
  3138  008E  00C4               	movwf	get_wsp@res
  3139  008F  0875               	movf	??_get_wsp+1,w
  3140  0090  00C5               	movwf	get_wsp@res+1
  3141  0091  0023               	movlb	3	; select bank3
  3142  0092  118E               	bcf	14,3	;volatile
  3143  0093  0022               	movlb	2	; select bank2
  3144  0094  108E               	bcf	14,1	;volatile
  3145                           
  3146                           ;main.c: 601:         if (res < BAD_WSP_VOLTAGE) {
  3147  0095  3000               	movlw	0
  3148  0096  0020               	movlb	0	; select bank0
  3149  0097  0245               	subwf	get_wsp@res+1,w
  3150  0098  3080               	movlw	128
  3151  0099  1903               	skipnz
  3152  009A  0244               	subwf	get_wsp@res,w
  3153  009B  1803               	skipnc
  3154  009C  289F               	goto	l2463
  3155                           
  3156                           ;main.c: 602:             bad_measures_counter++;
  3157  009D  3001               	movlw	1
  3158  009E  28A7               	goto	L1
  3159  009F                     l2463:	
  3160                           ;main.c: 603:         } else {
  3161                           
  3162                           
  3163                           ;main.c: 604:             if (res > GOOD_WSP_VOLTAGE) {
  3164  009F  3000               	movlw	0
  3165  00A0  0245               	subwf	get_wsp@res+1,w
  3166  00A1  308F               	movlw	143
  3167  00A2  1903               	skipnz
  3168  00A3  0244               	subwf	get_wsp@res,w
  3169  00A4  1C03               	skipc
  3170  00A5  28AA               	goto	l2467
  3171                           
  3172                           ;main.c: 605:                 bad_measures_counter--;
  3173  00A6  30FF               	movlw	255
  3174  00A7                     L1:
  3175  00A7  00F4               	movwf	??_get_wsp
  3176  00A8  0874               	movf	??_get_wsp,w
  3177  00A9  07B7               	addwf	get_wsp@bad_measures_counter,f
  3178  00AA                     l2467:
  3179                           
  3180                           ;main.c: 608:         if (bad_measures_counter > WSP_MEAS_COUNT) {
  3181  00AA  0837               	movf	get_wsp@bad_measures_counter,w
  3182  00AB  3A80               	xorlw	128
  3183  00AC  3E7B               	addlw	-133
  3184  00AD  1C03               	skipc
  3185  00AE  28B4               	goto	l2473
  3186                           
  3187                           ;main.c: 609:             start_alarm();
  3188  00AF  2410               	fcall	_start_alarm
  3189                           
  3190                           ;main.c: 610:             bad_measures_counter = WSP_MEAS_COUNT;
  3191  00B0  3004               	movlw	4
  3192  00B1  00F4               	movwf	??_get_wsp
  3193  00B2  0874               	movf	??_get_wsp,w
  3194  00B3  00B7               	movwf	get_wsp@bad_measures_counter
  3195  00B4                     l2473:
  3196                           
  3197                           ;main.c: 612:         if (bad_measures_counter < -WSP_MEAS_COUNT) {
  3198  00B4  0837               	movf	get_wsp@bad_measures_counter,w
  3199  00B5  3A80               	xorlw	128
  3200  00B6  3E84               	addlw	132
  3201  00B7  1803               	skipnc
  3202  00B8  28BE               	goto	l2479
  3203                           
  3204                           ;main.c: 613:             clear_alarm();
  3205  00B9  242E               	fcall	_clear_alarm
  3206                           
  3207                           ;main.c: 614:             bad_measures_counter = -WSP_MEAS_COUNT;
  3208  00BA  30FC               	movlw	252
  3209  00BB  00F4               	movwf	??_get_wsp
  3210  00BC  0874               	movf	??_get_wsp,w
  3211  00BD  00B7               	movwf	get_wsp@bad_measures_counter
  3212  00BE                     l2479:
  3213                           
  3214                           ;main.c: 616:         ff.bits.ALLOW_MEASURE = 0;
  3215  00BE  1276               	bcf	_ff,4
  3216  00BF  0008               	return
  3217  00C0                     __end_of_get_wsp:
  3218                           
  3219                           	psect	text18
  3220  0410                     __ptext18:	
  3221 ;; *************** function _start_alarm *****************
  3222 ;; Defined at:
  3223 ;;		line 321 in file "main.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;		None
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      void 
  3230 ;; Registers used:
  3231 ;;		status,2
  3232 ;; Tracked objects:
  3233 ;;		On entry : 1F/0
  3234 ;;		On exit  : 1F/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1
  3237 ;;      Params:         0       0       0
  3238 ;;      Locals:         0       0       0
  3239 ;;      Temps:          0       0       0
  3240 ;;      Totals:         0       0       0
  3241 ;;Total ram usage:        0 bytes
  3242 ;; Hardware stack levels used: 1
  3243 ;; Hardware stack levels required when called: 7
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_get_wsp
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251  0410                     _start_alarm:	
  3252                           ;psect for function _start_alarm
  3253                           
  3254                           
  3255                           ;main.c: 322:     ff.bits.ALARM_ON = 1;
  3256                           
  3257                           ;incstack = 0
  3258                           ; Regs used in _start_alarm: [status,2]
  3259  0410  1476               	bsf	_ff,0
  3260                           
  3261                           ;main.c: 323:     ff.bits.ALARM_OFF = 0;
  3262  0411  10F6               	bcf	_ff,1
  3263                           
  3264                           ;main.c: 324:     ff.bits.MELODY_ON = 1;
  3265  0412  1779               	bsf	_ff+3,6
  3266                           
  3267                           ;main.c: 325:     ff.bits.SIREN = 1;
  3268  0413  15F8               	bsf	_ff+2,3
  3269                           
  3270                           ;main.c: 326:     sec_count=0;
  3271  0414  01BE               	clrf	_sec_count
  3272  0415  0008               	return
  3273  0416                     __end_of_start_alarm:
  3274                           
  3275                           	psect	text19
  3276  042E                     __ptext19:	
  3277 ;; *************** function _clear_alarm *****************
  3278 ;; Defined at:
  3279 ;;		line 329 in file "main.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;		None
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		None
  3288 ;; Tracked objects:
  3289 ;;		On entry : 1F/0
  3290 ;;		On exit  : 1F/0
  3291 ;;		Unchanged: 1F/0
  3292 ;; Data sizes:     COMMON   BANK0   BANK1
  3293 ;;      Params:         0       0       0
  3294 ;;      Locals:         0       0       0
  3295 ;;      Temps:          0       0       0
  3296 ;;      Totals:         0       0       0
  3297 ;;Total ram usage:        0 bytes
  3298 ;; Hardware stack levels used: 1
  3299 ;; Hardware stack levels required when called: 7
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_get_wsp
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307  042E                     _clear_alarm:	
  3308                           ;psect for function _clear_alarm
  3309                           
  3310                           
  3311                           ;main.c: 330:     ff.bits.ALARM_ON = 0;
  3312                           
  3313                           ;incstack = 0
  3314                           ; Regs used in _clear_alarm: []
  3315  042E  1076               	bcf	_ff,0
  3316                           
  3317                           ;main.c: 331:     ff.bits.ALARM_OFF = 1;
  3318  042F  14F6               	bsf	_ff,1
  3319  0430  0008               	return
  3320  0431                     __end_of_clear_alarm:
  3321                           
  3322                           	psect	text20
  3323  02C8                     __ptext20:	
  3324 ;; *************** function _ADC_GetConversion *****************
  3325 ;; Defined at:
  3326 ;;		line 112 in file "mcc_generated_files/adc.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  channel         1    wreg     enum E2178
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  channel         1    3[COMMON] enum E2178
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      unsigned char 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/3
  3337 ;;		On exit  : 1F/1
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1
  3340 ;;      Params:         0       0       0
  3341 ;;      Locals:         1       0       0
  3342 ;;      Temps:          1       0       0
  3343 ;;      Totals:         2       0       0
  3344 ;;Total ram usage:        2 bytes
  3345 ;; Hardware stack levels used: 1
  3346 ;; Hardware stack levels required when called: 7
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_get_wsp
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354  02C8                     _ADC_GetConversion:	
  3355                           ;psect for function _ADC_GetConversion
  3356                           
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  3360                           ;ADC_GetConversion@channel stored from wreg
  3361  02C8  00F3               	movwf	ADC_GetConversion@channel
  3362                           
  3363                           ;mcc_generated_files/adc.c: 112: char ADC_GetConversion(adc_channel_t channel);mcc_gener
      +                          ated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = channel;
  3364  02C9  0873               	movf	ADC_GetConversion@channel,w
  3365  02CA  00F2               	movwf	??_ADC_GetConversion
  3366  02CB  0DF2               	rlf	??_ADC_GetConversion,f
  3367  02CC  0DF2               	rlf	??_ADC_GetConversion,f
  3368  02CD  0021               	movlb	1	; select bank1
  3369  02CE  081D               	movf	29,w	;volatile
  3370  02CF  0672               	xorwf	??_ADC_GetConversion,w
  3371  02D0  3983               	andlw	-125
  3372  02D1  0672               	xorwf	??_ADC_GetConversion,w
  3373  02D2  009D               	movwf	29	;volatile
  3374                           
  3375                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  3376  02D3  141D               	bsf	29,0	;volatile
  3377                           
  3378                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(16000000/4000000.0)));
  3379  02D4  3006               	movlw	6
  3380  02D5                     u2657:
  3381  02D5  0B89               	decfsz	9,f
  3382  02D6  2AD5               	goto	u2657
  3383  02D7  3200               	nop2
  3384                           
  3385                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  3386  02D8  0021               	movlb	1	; select bank1
  3387  02D9  149D               	bsf	29,1	;volatile
  3388  02DA                     l61:	
  3389                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  3390                           
  3391                           
  3392                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  3393  02DA  189D               	btfsc	29,1	;volatile
  3394  02DB  2ADA               	goto	l61
  3395                           
  3396                           ;mcc_generated_files/adc.c: 132:     return (ADRESH);
  3397  02DC  081C               	movf	28,w	;volatile
  3398  02DD  0008               	return
  3399  02DE                     __end_of_ADC_GetConversion:
  3400                           
  3401                           	psect	text21
  3402  01F4                     __ptext21:	
  3403 ;; *************** function _get_jump *****************
  3404 ;; Defined at:
  3405 ;;		line 685 in file "main.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0
  3414 ;; Tracked objects:
  3415 ;;		On entry : 1F/2
  3416 ;;		On exit  : 1D/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMMON   BANK0   BANK1
  3419 ;;      Params:         0       0       0
  3420 ;;      Locals:         0       0       0
  3421 ;;      Temps:          1       0       0
  3422 ;;      Totals:         1       0       0
  3423 ;;Total ram usage:        1 bytes
  3424 ;; Hardware stack levels used: 1
  3425 ;; Hardware stack levels required when called: 7
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433  01F4                     _get_jump:	
  3434                           ;psect for function _get_jump
  3435                           
  3436                           
  3437                           ;main.c: 687:     static signed char jump_counter;;main.c: 689:     if (ff.bits.ALLOW_JU
      +                          MP) {
  3438                           
  3439                           ;incstack = 0
  3440                           ; Regs used in _get_jump: [wreg+status,2+status,0]
  3441  01F4  1F76               	btfss	_ff,6
  3442  01F5  0008               	return
  3443                           
  3444                           ;main.c: 691:         do { ANSELAbits.ANSA1 = 0; } while(0);
  3445  01F6  0023               	movlb	3	; select bank3
  3446  01F7  108C               	bcf	12,1	;volatile
  3447                           
  3448                           ;main.c: 692:         do { TRISAbits.TRISA1 = 1; } while(0);
  3449  01F8  0021               	movlb	1	; select bank1
  3450  01F9  148C               	bsf	12,1	;volatile
  3451                           
  3452                           ;main.c: 693:         if (PORTAbits.RA1) jump_counter++;
  3453  01FA  0020               	movlb	0	; select bank0
  3454  01FB  1C8C               	btfss	12,1	;volatile
  3455  01FC  29FF               	goto	l2323
  3456  01FD  3001               	movlw	1
  3457  01FE  2A00               	goto	L2
  3458  01FF                     l2323:
  3459  01FF  30FF               	movlw	255
  3460  0200                     L2:
  3461  0200  00F2               	movwf	??_get_jump
  3462  0201  0872               	movf	??_get_jump,w
  3463  0202  07B5               	addwf	get_jump@jump_counter,f
  3464                           
  3465                           ;main.c: 702:         if (jump_counter > JUMP_MEAS_COUNT) {
  3466  0203  0835               	movf	get_jump@jump_counter,w
  3467  0204  3A80               	xorlw	128
  3468  0205  3E75               	addlw	-139
  3469  0206  1C03               	skipc
  3470  0207  2A0F               	goto	l2333
  3471                           
  3472                           ;main.c: 703:             jump_counter = JUMP_MEAS_COUNT;
  3473  0208  300A               	movlw	10
  3474  0209  00F2               	movwf	??_get_jump
  3475  020A  0872               	movf	??_get_jump,w
  3476  020B  00B5               	movwf	get_jump@jump_counter
  3477                           
  3478                           ;main.c: 704:             ff.bits.JUMP_LOW = 0;
  3479  020C  13F6               	bcf	_ff,7
  3480                           
  3481                           ;main.c: 705:             ff.bits.JUMP_HIGH = 1;
  3482  020D  1477               	bsf	_ff+1,0
  3483                           
  3484                           ;main.c: 706:         } else if (jump_counter<-JUMP_MEAS_COUNT) {
  3485  020E  2A1A               	goto	l2341
  3486  020F                     l2333:
  3487  020F  0835               	movf	get_jump@jump_counter,w
  3488  0210  3A80               	xorlw	128
  3489  0211  3E8A               	addlw	138
  3490  0212  1803               	skipnc
  3491  0213  2A1A               	goto	l2341
  3492                           
  3493                           ;main.c: 707:             jump_counter = -JUMP_MEAS_COUNT;
  3494  0214  30F6               	movlw	246
  3495  0215  00F2               	movwf	??_get_jump
  3496  0216  0872               	movf	??_get_jump,w
  3497  0217  00B5               	movwf	get_jump@jump_counter
  3498                           
  3499                           ;main.c: 708:             ff.bits.JUMP_LOW = 1;
  3500  0218  17F6               	bsf	_ff,7
  3501                           
  3502                           ;main.c: 709:             ff.bits.JUMP_HIGH = 0;
  3503  0219  1077               	bcf	_ff+1,0
  3504  021A                     l2341:
  3505                           
  3506                           ;main.c: 711:         ff.bits.ALLOW_JUMP = 0;
  3507  021A  1376               	bcf	_ff,6
  3508  021B  0008               	return
  3509  021C                     __end_of_get_jump:
  3510                           
  3511                           	psect	text22
  3512  016C                     __ptext22:	
  3513 ;; *************** function _get_fun *****************
  3514 ;; Defined at:
  3515 ;;		line 620 in file "main.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0
  3524 ;; Tracked objects:
  3525 ;;		On entry : 1D/2
  3526 ;;		On exit  : 1D/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1
  3529 ;;      Params:         0       0       0
  3530 ;;      Locals:         0       0       0
  3531 ;;      Temps:          1       0       0
  3532 ;;      Totals:         1       0       0
  3533 ;;Total ram usage:        1 bytes
  3534 ;; Hardware stack levels used: 1
  3535 ;; Hardware stack levels required when called: 7
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543  016C                     _get_fun:	
  3544                           ;psect for function _get_fun
  3545                           
  3546                           
  3547                           ;main.c: 622:     if (ff.bits.ALLOW_FUN) {
  3548                           
  3549                           ;incstack = 0
  3550                           ; Regs used in _get_fun: [wreg+status,2+status,0]
  3551  016C  1EF6               	btfss	_ff,5
  3552  016D  0008               	return
  3553                           
  3554                           ;main.c: 624:         static signed char fun_counter;;main.c: 625:         do { LATCbits
      +                          .LATC1 = 1; } while(0);
  3555  016E  0022               	movlb	2	; select bank2
  3556  016F  148E               	bsf	14,1	;volatile
  3557                           
  3558                           ;main.c: 626:         _delay((unsigned long)((1)*(16000000/4000.0)));
  3559  0170  3006               	movlw	6
  3560  0171  00F2               	movwf	??_get_fun
  3561  0172  3030               	movlw	48
  3562  0173                     u2667:
  3563  0173  0B89               	decfsz	9,f
  3564  0174  2973               	goto	u2667
  3565  0175  0BF2               	decfsz	??_get_fun,f
  3566  0176  2973               	goto	u2667
  3567  0177  3200               	nop2
  3568  0178  0023               	movlb	3	; select bank3
  3569  0179  110E               	bcf	14,2	;volatile
  3570  017A  0021               	movlb	1	; select bank1
  3571  017B  150E               	bsf	14,2	;volatile
  3572                           
  3573                           ;main.c: 629:         if (PORTCbits.RC2) fun_counter--;
  3574  017C  0020               	movlb	0	; select bank0
  3575  017D  1D0E               	btfss	14,2	;volatile
  3576  017E  2981               	goto	l2297
  3577  017F  30FF               	movlw	255
  3578  0180  2982               	goto	L3
  3579  0181                     l2297:
  3580  0181  3001               	movlw	1
  3581  0182                     L3:
  3582  0182  00F2               	movwf	??_get_fun
  3583  0183  0872               	movf	??_get_fun,w
  3584  0184  07B6               	addwf	get_fun@fun_counter,f
  3585  0185  0022               	movlb	2	; select bank2
  3586  0186  108E               	bcf	14,1	;volatile
  3587                           
  3588                           ;main.c: 637:         if (fun_counter > FUN_MEAS_COUNT) {
  3589  0187  0020               	movlb	0	; select bank0
  3590  0188  0836               	movf	get_fun@fun_counter,w
  3591  0189  3A80               	xorlw	128
  3592  018A  3E75               	addlw	-139
  3593  018B  1C03               	skipc
  3594  018C  2994               	goto	l2309
  3595                           
  3596                           ;main.c: 638:             fun_counter = FUN_MEAS_COUNT;
  3597  018D  300A               	movlw	10
  3598  018E  00F2               	movwf	??_get_fun
  3599  018F  0872               	movf	??_get_fun,w
  3600  0190  00B6               	movwf	get_fun@fun_counter
  3601                           
  3602                           ;main.c: 639:             ff.bits.FUN_LOW = 0;
  3603  0191  11F6               	bcf	_ff,3
  3604                           
  3605                           ;main.c: 640:             ff.bits.FUN_HIGH = 1;
  3606  0192  1576               	bsf	_ff,2
  3607                           
  3608                           ;main.c: 641:         } else if (fun_counter<-FUN_MEAS_COUNT) {
  3609  0193  299F               	goto	l2317
  3610  0194                     l2309:
  3611  0194  0836               	movf	get_fun@fun_counter,w
  3612  0195  3A80               	xorlw	128
  3613  0196  3E8A               	addlw	138
  3614  0197  1803               	skipnc
  3615  0198  299F               	goto	l2317
  3616                           
  3617                           ;main.c: 642:             fun_counter = -FUN_MEAS_COUNT;
  3618  0199  30F6               	movlw	246
  3619  019A  00F2               	movwf	??_get_fun
  3620  019B  0872               	movf	??_get_fun,w
  3621  019C  00B6               	movwf	get_fun@fun_counter
  3622                           
  3623                           ;main.c: 643:             ff.bits.FUN_LOW = 1;
  3624  019D  15F6               	bsf	_ff,3
  3625                           
  3626                           ;main.c: 644:             ff.bits.FUN_HIGH = 0;
  3627  019E  1176               	bcf	_ff,2
  3628  019F                     l2317:
  3629                           
  3630                           ;main.c: 646:         ff.bits.ALLOW_FUN = 0;
  3631  019F  12F6               	bcf	_ff,5
  3632  01A0  0008               	return
  3633  01A1                     __end_of_get_fun:
  3634                           
  3635                           	psect	text23
  3636  0296                     __ptext23:	
  3637 ;; *************** function _fun_work *****************
  3638 ;; Defined at:
  3639 ;;		line 334 in file "main.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;		None
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      void 
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0, pclath, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : 1D/2
  3650 ;;		On exit  : 1D/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMMON   BANK0   BANK1
  3653 ;;      Params:         0       0       0
  3654 ;;      Locals:         0       0       0
  3655 ;;      Temps:          1       0       0
  3656 ;;      Totals:         1       0       0
  3657 ;;Total ram usage:        1 bytes
  3658 ;; Hardware stack levels used: 1
  3659 ;; Hardware stack levels required when called: 9
  3660 ;; This function calls:
  3661 ;;		_close
  3662 ;;		_open
  3663 ;; This function is called by:
  3664 ;;		_main
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668  0296                     _fun_work:	
  3669                           ;psect for function _fun_work
  3670                           
  3671                           
  3672                           ;main.c: 335:     {;main.c: 336:         if (
  3673                           
  3674                           ;incstack = 0
  3675                           ; Regs used in _fun_work: [wreg+status,2+status,0+pclath+cstack]
  3676  0296  19F6               	btfsc	_ff,3
  3677  0297  1976               	btfsc	_ff,2
  3678  0298  2AA2               	goto	l2187
  3679  0299  18F6               	btfsc	_ff,1
  3680  029A  1FF8               	btfss	_ff+2,7
  3681  029B  2AA2               	goto	l2187
  3682  029C  1D77               	btfss	_ff+1,2
  3683  029D  18F7               	btfsc	_ff+1,1
  3684  029E  2AA2               	goto	l2187
  3685                           
  3686                           ;main.c: 342:                 !ff.bits.OPENING) {;main.c: 343:             beep_short_co
      +                          unt = 1;
  3687  029F  01FA               	clrf	_beep_short_count
  3688  02A0  0AFA               	incf	_beep_short_count,f
  3689                           
  3690                           ;main.c: 344:             open();
  3691  02A1  239C               	fcall	_open
  3692  02A2                     l2187:
  3693                           
  3694                           ;main.c: 346:         if (
  3695  02A2  1D76               	btfss	_ff,2
  3696  02A3  0008               	return
  3697  02A4  1FF8               	btfss	_ff+2,7
  3698  02A5  0008               	return
  3699  02A6  19F6               	btfsc	_ff,3
  3700  02A7  0008               	return
  3701  02A8  1A77               	btfsc	_ff+1,4
  3702  02A9  0008               	return
  3703  02AA  19F7               	btfsc	_ff+1,3
  3704  02AB  0008               	return
  3705                           
  3706                           ;main.c: 351:                 !ff.bits.CLOSING) {;main.c: 352:             beep_short_co
      +                          unt = 2;
  3707  02AC  3002               	movlw	2
  3708  02AD  00F3               	movwf	??_fun_work
  3709  02AE  0873               	movf	??_fun_work,w
  3710  02AF  00FA               	movwf	_beep_short_count
  3711                           
  3712                           ;main.c: 353:             close();
  3713  02B0  23A8               	fcall	_close
  3714  02B1  0008               	return
  3715  02B2                     __end_of_fun_work:
  3716                           
  3717                           	psect	text24
  3718  039C                     __ptext24:	
  3719 ;; *************** function _open *****************
  3720 ;; Defined at:
  3721 ;;		line 265 in file "main.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0, pclath, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 1D/2
  3732 ;;		On exit  : 1D/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMMON   BANK0   BANK1
  3735 ;;      Params:         0       0       0
  3736 ;;      Locals:         0       0       0
  3737 ;;      Temps:          0       0       0
  3738 ;;      Totals:         0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used: 1
  3741 ;; Hardware stack levels required when called: 8
  3742 ;; This function calls:
  3743 ;;		_go_open
  3744 ;;		_go_open_alt
  3745 ;;		_rele_off
  3746 ;; This function is called by:
  3747 ;;		_fun_work
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751  039C                     _open:	
  3752                           ;psect for function _open
  3753                           
  3754                           
  3755                           ;main.c: 266:     if (ff.bits.CLOSING) {
  3756                           
  3757                           ;incstack = 0
  3758                           ; Regs used in _open: [wreg+status,2+status,0+pclath+cstack]
  3759  039C  1DF7               	btfss	_ff+1,3
  3760  039D  2BA0               	goto	l357
  3761                           
  3762                           ;main.c: 267:         rele_off();
  3763  039E  2318               	fcall	_rele_off
  3764                           
  3765                           ;main.c: 268:     } else {
  3766  039F  0008               	return
  3767  03A0                     l357:
  3768                           
  3769                           ;main.c: 269:         if (ff.bits.NORMAL_WORK_MODE_ON) {
  3770  03A0  1C79               	btfss	_ff+3,0
  3771  03A1  2BA4               	goto	l359
  3772                           
  3773                           ;main.c: 270:             go_open();
  3774  03A2  2306               	fcall	_go_open
  3775                           
  3776                           ;main.c: 271:         } else if (ff.bits.UNIVERSAL_VORK_MODE_ON) {
  3777  03A3  0008               	return
  3778  03A4                     l359:
  3779  03A4  1CF9               	btfss	_ff+3,1
  3780  03A5  0008               	return
  3781                           
  3782                           ;main.c: 272:             go_open_alt();
  3783  03A6  23D6               	fcall	_go_open_alt
  3784  03A7  0008               	return
  3785  03A8                     __end_of_open:
  3786                           
  3787                           	psect	text25
  3788  03D6                     __ptext25:	
  3789 ;; *************** function _go_open_alt *****************
  3790 ;; Defined at:
  3791 ;;		line 228 in file "main.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		None
  3800 ;; Tracked objects:
  3801 ;;		On entry : 1D/2
  3802 ;;		On exit  : 1D/0
  3803 ;;		Unchanged: 1D/0
  3804 ;; Data sizes:     COMMON   BANK0   BANK1
  3805 ;;      Params:         0       0       0
  3806 ;;      Locals:         0       0       0
  3807 ;;      Temps:          0       0       0
  3808 ;;      Totals:         0       0       0
  3809 ;;Total ram usage:        0 bytes
  3810 ;; Hardware stack levels used: 1
  3811 ;; Hardware stack levels required when called: 7
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_open
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819  03D6                     _go_open_alt:	
  3820                           ;psect for function _go_open_alt
  3821                           
  3822                           
  3823                           ;main.c: 229:     if (!ff.bits.OPENED && ff.bits.MOVING_ALLOWED) {
  3824                           
  3825                           ;incstack = 0
  3826                           ; Regs used in _go_open_alt: []
  3827  03D6  1977               	btfsc	_ff+1,2
  3828  03D7  0008               	return
  3829  03D8  1FF8               	btfss	_ff+2,7
  3830  03D9  0008               	return
  3831                           
  3832                           ;main.c: 230:         ff.bits.CLOSED = 0;
  3833  03DA  1277               	bcf	_ff+1,4
  3834                           
  3835                           ;main.c: 231:         ff.bits.OPENED = 1;
  3836  03DB  1577               	bsf	_ff+1,2
  3837                           
  3838                           ;main.c: 233:         ff.bits.RELE_CONTROL_ON = 0;
  3839  03DC  1377               	bcf	_ff+1,6
  3840                           
  3841                           ;main.c: 234:         ff.bits.RELE_POWER_ON = 0;
  3842  03DD  12F7               	bcf	_ff+1,5
  3843  03DE  0008               	return
  3844  03DF                     __end_of_go_open_alt:
  3845                           
  3846                           	psect	text26
  3847  03A8                     __ptext26:	
  3848 ;; *************** function _close *****************
  3849 ;; Defined at:
  3850 ;;		line 253 in file "main.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0, pclath, cstack
  3859 ;; Tracked objects:
  3860 ;;		On entry : 1D/2
  3861 ;;		On exit  : 1D/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMMON   BANK0   BANK1
  3864 ;;      Params:         0       0       0
  3865 ;;      Locals:         0       0       0
  3866 ;;      Temps:          0       0       0
  3867 ;;      Totals:         0       0       0
  3868 ;;Total ram usage:        0 bytes
  3869 ;; Hardware stack levels used: 1
  3870 ;; Hardware stack levels required when called: 8
  3871 ;; This function calls:
  3872 ;;		_go_close
  3873 ;;		_go_close_alt
  3874 ;;		_rele_off
  3875 ;; This function is called by:
  3876 ;;		_fun_work
  3877 ;;		_main
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881  03A8                     _close:	
  3882                           ;psect for function _close
  3883                           
  3884                           
  3885                           ;main.c: 254:     if (ff.bits.OPENING) {
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in _close: [wreg+status,2+status,0+pclath+cstack]
  3889  03A8  1CF7               	btfss	_ff+1,1
  3890  03A9  2BAC               	goto	l349
  3891                           
  3892                           ;main.c: 255:         rele_off();
  3893  03AA  2318               	fcall	_rele_off
  3894                           
  3895                           ;main.c: 256:     } else {
  3896  03AB  0008               	return
  3897  03AC                     l349:
  3898                           
  3899                           ;main.c: 257:         if (ff.bits.NORMAL_WORK_MODE_ON) {
  3900  03AC  1C79               	btfss	_ff+3,0
  3901  03AD  2BB0               	goto	l351
  3902                           
  3903                           ;main.c: 258:             go_close();
  3904  03AE  223C               	fcall	_go_close
  3905                           
  3906                           ;main.c: 259:         } else if (ff.bits.UNIVERSAL_VORK_MODE_ON) {
  3907  03AF  0008               	return
  3908  03B0                     l351:
  3909  03B0  1CF9               	btfss	_ff+3,1
  3910  03B1  0008               	return
  3911                           
  3912                           ;main.c: 260:             go_close_alt();
  3913  03B2  23C0               	fcall	_go_close_alt
  3914  03B3  0008               	return
  3915  03B4                     __end_of_close:
  3916                           
  3917                           	psect	text27
  3918  0318                     __ptext27:	
  3919 ;; *************** function _rele_off *****************
  3920 ;; Defined at:
  3921 ;;		line 238 in file "main.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		wreg
  3930 ;; Tracked objects:
  3931 ;;		On entry : 1D/2
  3932 ;;		On exit  : 1F/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1
  3935 ;;      Params:         0       0       0
  3936 ;;      Locals:         0       0       0
  3937 ;;      Temps:          1       0       0
  3938 ;;      Totals:         1       0       0
  3939 ;;Total ram usage:        1 bytes
  3940 ;; Hardware stack levels used: 1
  3941 ;; Hardware stack levels required when called: 7
  3942 ;; This function calls:
  3943 ;;		Nothing
  3944 ;; This function is called by:
  3945 ;;		_close
  3946 ;;		_open
  3947 ;;		_switch_wm
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951  0318                     _rele_off:	
  3952                           ;psect for function _rele_off
  3953                           
  3954                           
  3955                           ;main.c: 239:     ff.bits.RELE_CONTROL_ON = 0;
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _rele_off: [wreg]
  3959  0318  1377               	bcf	_ff+1,6
  3960                           
  3961                           ;main.c: 240:     ff.bits.RELE_POWER_ON = 0;
  3962  0319  12F7               	bcf	_ff+1,5
  3963                           
  3964                           ;main.c: 241:     ff.bits.CLOSING = 0;
  3965  031A  11F7               	bcf	_ff+1,3
  3966                           
  3967                           ;main.c: 242:     ff.bits.OPENING = 0;
  3968  031B  10F7               	bcf	_ff+1,1
  3969                           
  3970                           ;main.c: 243:     ff.bits.CLOSED = 0;
  3971  031C  1277               	bcf	_ff+1,4
  3972                           
  3973                           ;main.c: 244:     if (ff.bits.UNIVERSAL_VORK_MODE_ON) {
  3974  031D  1CF9               	btfss	_ff+3,1
  3975  031E  2B21               	goto	l344
  3976                           
  3977                           ;main.c: 245:         ff.bits.OPENED = 1;
  3978  031F  1577               	bsf	_ff+1,2
  3979                           
  3980                           ;main.c: 246:     } else {
  3981  0320  2B22               	goto	l345
  3982  0321                     l344:
  3983                           
  3984                           ;main.c: 247:         ff.bits.OPENED = 0;
  3985  0321  1177               	bcf	_ff+1,2
  3986  0322                     l345:	
  3987                           ;main.c: 248:     }
  3988                           
  3989                           
  3990                           ;main.c: 249:     ff.bits.MOVING_ALLOWED = 0;
  3991  0322  13F8               	bcf	_ff+2,7
  3992                           
  3993                           ;main.c: 250:     time_moving_wait = MOVING_WAIT_DELAY;
  3994  0323  3002               	movlw	2
  3995  0324  00F2               	movwf	??_rele_off
  3996  0325  0872               	movf	??_rele_off,w
  3997  0326  0020               	movlb	0	; select bank0
  3998  0327  00BC               	movwf	_time_moving_wait
  3999  0328  0008               	return
  4000  0329                     __end_of_rele_off:
  4001                           
  4002                           	psect	text28
  4003  03C0                     __ptext28:	
  4004 ;; *************** function _go_close_alt *****************
  4005 ;; Defined at:
  4006 ;;		line 217 in file "main.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		None
  4015 ;; Tracked objects:
  4016 ;;		On entry : 1D/2
  4017 ;;		On exit  : 1D/0
  4018 ;;		Unchanged: 1D/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1
  4020 ;;      Params:         0       0       0
  4021 ;;      Locals:         0       0       0
  4022 ;;      Temps:          0       0       0
  4023 ;;      Totals:         0       0       0
  4024 ;;Total ram usage:        0 bytes
  4025 ;; Hardware stack levels used: 1
  4026 ;; Hardware stack levels required when called: 7
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_close
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034  03C0                     _go_close_alt:	
  4035                           ;psect for function _go_close_alt
  4036                           
  4037                           
  4038                           ;main.c: 219:     if ((!ff.bits.CLOSED && ff.bits.MOVING_ALLOWED) || ff.bits.ALARM_ON) {
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in _go_close_alt: []
  4042  03C0  1A77               	btfsc	_ff+1,4
  4043  03C1  2BC4               	goto	l336
  4044  03C2  1BF8               	btfsc	_ff+2,7
  4045  03C3  2BC6               	goto	l334
  4046  03C4                     l336:
  4047  03C4  1C76               	btfss	_ff,0
  4048  03C5  0008               	return
  4049  03C6                     l334:
  4050                           
  4051                           ;main.c: 220:         ff.bits.OPENED = 0;
  4052  03C6  1177               	bcf	_ff+1,2
  4053                           
  4054                           ;main.c: 221:         ff.bits.CLOSED = 1;
  4055  03C7  1677               	bsf	_ff+1,4
  4056                           
  4057                           ;main.c: 223:         ff.bits.RELE_CONTROL_ON = 0;
  4058  03C8  1377               	bcf	_ff+1,6
  4059                           
  4060                           ;main.c: 224:         ff.bits.RELE_POWER_ON = 1;
  4061  03C9  16F7               	bsf	_ff+1,5
  4062  03CA  0008               	return
  4063  03CB                     __end_of_go_close_alt:
  4064                           
  4065                           	psect	text29
  4066  023C                     __ptext29:	
  4067 ;; *************** function _go_close *****************
  4068 ;; Defined at:
  4069 ;;		line 160 in file "main.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg
  4078 ;; Tracked objects:
  4079 ;;		On entry : 1D/2
  4080 ;;		On exit  : 1D/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1
  4083 ;;      Params:         0       0       0
  4084 ;;      Locals:         0       0       0
  4085 ;;      Temps:          0       0       0
  4086 ;;      Totals:         0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used: 1
  4089 ;; Hardware stack levels required when called: 7
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_close
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097  023C                     _go_close:	
  4098                           ;psect for function _go_close
  4099                           
  4100                           
  4101                           ;main.c: 162:     if (!ff.bits.CLOSING && !ff.bits.CLOSED && ff.bits.MOVING_ALLOWED) {
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _go_close: [wreg]
  4105  023C  19F7               	btfsc	_ff+1,3
  4106  023D  0008               	return
  4107  023E  1A77               	btfsc	_ff+1,4
  4108  023F  0008               	return
  4109  0240  1FF8               	btfss	_ff+2,7
  4110  0241  0008               	return
  4111                           
  4112                           ;main.c: 163:         ff.bits.CLOSING = 1;
  4113  0242  15F7               	bsf	_ff+1,3
  4114                           
  4115                           ;main.c: 164:         ff.bits.OPENED = 0;
  4116  0243  1177               	bcf	_ff+1,2
  4117                           
  4118                           ;main.c: 165:         ff.bits.OPENING = 0;
  4119  0244  10F7               	bcf	_ff+1,1
  4120                           
  4121                           ;main.c: 167:         ff.bits.RELE_POWER_ON = 0;
  4122  0245  12F7               	bcf	_ff+1,5
  4123                           
  4124                           ;main.c: 168:         ff.bits.RELE_CONTROL_ON = 1;
  4125  0246  1777               	bsf	_ff+1,6
  4126                           
  4127                           ;main.c: 170:         time_rele_control = RELE_GAP + RELE_POWER_WORK_DELAY + RELE_GAP;
  4128  0247  3013               	movlw	19
  4129  0248  0020               	movlb	0	; select bank0
  4130  0249  00AF               	movwf	_time_rele_control
  4131  024A  3000               	movlw	0
  4132  024B  00B0               	movwf	_time_rele_control+1
  4133                           
  4134                           ;main.c: 171:         time_rele_power = RELE_POWER_WORK_DELAY;
  4135  024C  300F               	movlw	15
  4136  024D  00B1               	movwf	_time_rele_power
  4137  024E  3000               	movlw	0
  4138  024F  00B2               	movwf	_time_rele_power+1
  4139                           
  4140                           ;main.c: 172:         time_rele_gap = RELE_GAP;
  4141  0250  3002               	movlw	2
  4142  0251  00AD               	movwf	_time_rele_gap
  4143  0252  3000               	movlw	0
  4144  0253  00AE               	movwf	_time_rele_gap+1
  4145                           
  4146                           ;main.c: 174:         time_rotation = 0;
  4147  0254  3000               	movlw	0
  4148  0255  00A0               	movwf	_time_rotation
  4149  0256  3000               	movlw	0
  4150  0257  00A1               	movwf	_time_rotation+1
  4151  0258  3000               	movlw	0
  4152  0259  00A2               	movwf	_time_rotation+2
  4153  025A  0008               	return
  4154  025B                     __end_of_go_close:
  4155                           
  4156                           	psect	text30
  4157  00C0                     __ptext30:	
  4158 ;; *************** function _autorotation_work *****************
  4159 ;; Defined at:
  4160 ;;		line 378 in file "main.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/2
  4171 ;;		On exit  : 1F/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1
  4174 ;;      Params:         0       0       0
  4175 ;;      Locals:         0       0       0
  4176 ;;      Temps:          1       0       0
  4177 ;;      Totals:         1       0       0
  4178 ;;Total ram usage:        1 bytes
  4179 ;; Hardware stack levels used: 1
  4180 ;; Hardware stack levels required when called: 8
  4181 ;; This function calls:
  4182 ;;		_go_close_short
  4183 ;;		_go_open
  4184 ;; This function is called by:
  4185 ;;		_main
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189  00C0                     _autorotation_work:	
  4190                           ;psect for function _autorotation_work
  4191                           
  4192                           
  4193                           ;main.c: 379:     if ((time_rotation > AUTOROTATION_DELAY) &&
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _autorotation_work: [wreg+status,2+status,0+pclath+cstack]
  4197  00C0  3000               	movlw	0
  4198  00C1  0020               	movlb	0	; select bank0
  4199  00C2  0222               	subwf	_time_rotation+2,w
  4200  00C3  1D03               	skipz
  4201  00C4  28CB               	goto	u2195
  4202  00C5  3000               	movlw	0
  4203  00C6  0221               	subwf	_time_rotation+1,w
  4204  00C7  1D03               	skipz
  4205  00C8  28CB               	goto	u2195
  4206  00C9  3079               	movlw	121
  4207  00CA  0220               	subwf	_time_rotation,w
  4208  00CB                     u2195:
  4209  00CB  1803               	btfsc	3,0
  4210  00CC  1A77               	btfsc	_ff+1,4
  4211  00CD  28DD               	goto	l2237
  4212  00CE  1DF7               	btfss	_ff+1,3
  4213  00CF  1CF6               	btfss	_ff,1
  4214  00D0  28DD               	goto	l2237
  4215  00D1  1BF8               	btfsc	_ff+2,7
  4216  00D2  1C79               	btfss	_ff+3,0
  4217  00D3  28DD               	goto	l2237
  4218                           
  4219                           ;main.c: 385:             ) {;main.c: 386:               go_close_short();
  4220  00D4  225B               	fcall	_go_close_short
  4221                           
  4222                           ;main.c: 387:               beep_short_count=3;
  4223  00D5  3003               	movlw	3
  4224  00D6  00F2               	movwf	??_autorotation_work
  4225  00D7  0872               	movf	??_autorotation_work,w
  4226  00D8  00FA               	movwf	_beep_short_count
  4227                           
  4228                           ;main.c: 388:               beep_long_count=3;
  4229  00D9  3003               	movlw	3
  4230  00DA  00F2               	movwf	??_autorotation_work
  4231  00DB  0872               	movf	??_autorotation_work,w
  4232  00DC  00BA               	movwf	_beep_long_count
  4233  00DD                     l2237:
  4234                           
  4235                           ;main.c: 391:     if ((time_rotation > (AUTOROTATION_DELAY + RELE_POWER_AUTOROTATION_DEL
      +                          AY + RELE_GAP * 2)) &&
  4236  00DD  3000               	movlw	0
  4237  00DE  0222               	subwf	_time_rotation+2,w
  4238  00DF  1D03               	skipz
  4239  00E0  28E7               	goto	u2255
  4240  00E1  3000               	movlw	0
  4241  00E2  0221               	subwf	_time_rotation+1,w
  4242  00E3  1D03               	skipz
  4243  00E4  28E7               	goto	u2255
  4244  00E5  3082               	movlw	130
  4245  00E6  0220               	subwf	_time_rotation,w
  4246  00E7                     u2255:
  4247  00E7  1C03               	skipc
  4248  00E8  0008               	return
  4249  00E9  1E77               	btfss	_ff+1,4
  4250  00EA  0008               	return
  4251  00EB  1DF7               	btfss	_ff+1,3
  4252  00EC  0008               	return
  4253  00ED  1CF6               	btfss	_ff,1
  4254  00EE  0008               	return
  4255  00EF  1FF8               	btfss	_ff+2,7
  4256  00F0  0008               	return
  4257  00F1  1C79               	btfss	_ff+3,0
  4258  00F2  0008               	return
  4259                           
  4260                           ;main.c: 397:             ) {;main.c: 398:         go_open();
  4261  00F3  2306               	fcall	_go_open
  4262                           
  4263                           ;main.c: 399:         time_rotation = 0;
  4264  00F4  3000               	movlw	0
  4265  00F5  0020               	movlb	0	; select bank0
  4266  00F6  00A0               	movwf	_time_rotation
  4267  00F7  3000               	movlw	0
  4268  00F8  00A1               	movwf	_time_rotation+1
  4269  00F9  3000               	movlw	0
  4270  00FA  00A2               	movwf	_time_rotation+2
  4271  00FB  0008               	return
  4272  00FC                     __end_of_autorotation_work:
  4273                           
  4274                           	psect	text31
  4275  0306                     __ptext31:	
  4276 ;; *************** function _go_open *****************
  4277 ;; Defined at:
  4278 ;;		line 199 in file "main.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg
  4287 ;; Tracked objects:
  4288 ;;		On entry : 1D/2
  4289 ;;		On exit  : 1D/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1
  4292 ;;      Params:         0       0       0
  4293 ;;      Locals:         0       0       0
  4294 ;;      Temps:          0       0       0
  4295 ;;      Totals:         0       0       0
  4296 ;;Total ram usage:        0 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; Hardware stack levels required when called: 7
  4299 ;; This function calls:
  4300 ;;		Nothing
  4301 ;; This function is called by:
  4302 ;;		_open
  4303 ;;		_autorotation_work
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307  0306                     _go_open:	
  4308                           ;psect for function _go_open
  4309                           
  4310                           
  4311                           ;main.c: 201:     if (!ff.bits.OPENED && !ff.bits.OPENING && ff.bits.MOVING_ALLOWED) {
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in _go_open: [wreg]
  4315  0306  1977               	btfsc	_ff+1,2
  4316  0307  0008               	return
  4317  0308  18F7               	btfsc	_ff+1,1
  4318  0309  0008               	return
  4319  030A  1FF8               	btfss	_ff+2,7
  4320  030B  0008               	return
  4321                           
  4322                           ;main.c: 202:         ff.bits.OPENING = 1;
  4323  030C  14F7               	bsf	_ff+1,1
  4324                           
  4325                           ;main.c: 203:         ff.bits.CLOSED = 0;
  4326  030D  1277               	bcf	_ff+1,4
  4327                           
  4328                           ;main.c: 204:         ff.bits.CLOSING = 0;
  4329  030E  11F7               	bcf	_ff+1,3
  4330                           
  4331                           ;main.c: 207:         ff.bits.RELE_CONTROL_ON = 0;
  4332  030F  1377               	bcf	_ff+1,6
  4333                           
  4334                           ;main.c: 208:         ff.bits.RELE_POWER_ON = 1;
  4335  0310  16F7               	bsf	_ff+1,5
  4336                           
  4337                           ;main.c: 210:         time_rele_power = RELE_POWER_WORK_DELAY;
  4338  0311  300F               	movlw	15
  4339  0312  0020               	movlb	0	; select bank0
  4340  0313  00B1               	movwf	_time_rele_power
  4341  0314  3000               	movlw	0
  4342  0315  00B2               	movwf	_time_rele_power+1
  4343                           
  4344                           ;main.c: 212:         ff.bits.AUTOROTATION_WORK = 0;
  4345  0316  12F9               	bcf	_ff+3,5
  4346  0317  0008               	return
  4347  0318                     __end_of_go_open:
  4348                           
  4349                           	psect	text32
  4350  025B                     __ptext32:	
  4351 ;; *************** function _go_close_short *****************
  4352 ;; Defined at:
  4353 ;;		line 179 in file "main.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg
  4362 ;; Tracked objects:
  4363 ;;		On entry : 1F/0
  4364 ;;		On exit  : 1F/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1
  4367 ;;      Params:         0       0       0
  4368 ;;      Locals:         0       0       0
  4369 ;;      Temps:          0       0       0
  4370 ;;      Totals:         0       0       0
  4371 ;;Total ram usage:        0 bytes
  4372 ;; Hardware stack levels used: 1
  4373 ;; Hardware stack levels required when called: 7
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_autorotation_work
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381  025B                     _go_close_short:	
  4382                           ;psect for function _go_close_short
  4383                           
  4384                           
  4385                           ;main.c: 181:     if (!ff.bits.CLOSING && !ff.bits.CLOSED && ff.bits.MOVING_ALLOWED) {
  4386                           
  4387                           ;incstack = 0
  4388                           ; Regs used in _go_close_short: [wreg]
  4389  025B  19F7               	btfsc	_ff+1,3
  4390  025C  0008               	return
  4391  025D  1A77               	btfsc	_ff+1,4
  4392  025E  0008               	return
  4393  025F  1FF8               	btfss	_ff+2,7
  4394  0260  0008               	return
  4395                           
  4396                           ;main.c: 182:         ff.bits.CLOSING = 1;
  4397  0261  15F7               	bsf	_ff+1,3
  4398                           
  4399                           ;main.c: 183:         ff.bits.OPENED = 0;
  4400  0262  1177               	bcf	_ff+1,2
  4401                           
  4402                           ;main.c: 184:         ff.bits.OPENING = 0;
  4403  0263  10F7               	bcf	_ff+1,1
  4404                           
  4405                           ;main.c: 186:         ff.bits.RELE_POWER_ON = 0;
  4406  0264  12F7               	bcf	_ff+1,5
  4407                           
  4408                           ;main.c: 187:         ff.bits.RELE_CONTROL_ON = 1;
  4409  0265  1777               	bsf	_ff+1,6
  4410                           
  4411                           ;main.c: 189:         time_rele_control = RELE_GAP + RELE_POWER_AUTOROTATION_DELAY + REL
      +                          E_GAP;
  4412  0266  3009               	movlw	9
  4413  0267  00AF               	movwf	_time_rele_control
  4414  0268  3000               	movlw	0
  4415  0269  00B0               	movwf	_time_rele_control+1
  4416                           
  4417                           ;main.c: 190:         time_rele_power = RELE_POWER_AUTOROTATION_DELAY;
  4418  026A  3005               	movlw	5
  4419  026B  00B1               	movwf	_time_rele_power
  4420  026C  3000               	movlw	0
  4421  026D  00B2               	movwf	_time_rele_power+1
  4422                           
  4423                           ;main.c: 191:         time_rele_gap = RELE_GAP;
  4424  026E  3002               	movlw	2
  4425  026F  00AD               	movwf	_time_rele_gap
  4426  0270  3000               	movlw	0
  4427  0271  00AE               	movwf	_time_rele_gap+1
  4428                           
  4429                           ;main.c: 193:         time_rotation = 0;
  4430  0272  3000               	movlw	0
  4431  0273  00A0               	movwf	_time_rotation
  4432  0274  3000               	movlw	0
  4433  0275  00A1               	movwf	_time_rotation+1
  4434  0276  3000               	movlw	0
  4435  0277  00A2               	movwf	_time_rotation+2
  4436  0278  0008               	return
  4437  0279                     __end_of_go_close_short:
  4438                           
  4439                           	psect	intentry
  4440  0004                     __pintentry:	
  4441 ;; *************** function _INTERRUPT_InterruptManager *****************
  4442 ;; Defined at:
  4443 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  1    wreg      void 
  4450 ;; Registers used:
  4451 ;;		wreg, status,2, status,0, pclath, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1
  4457 ;;      Params:         0       0       0
  4458 ;;      Locals:         0       0       0
  4459 ;;      Temps:          0       0       0
  4460 ;;      Totals:         0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used: 1
  4463 ;; Hardware stack levels required when called: 6
  4464 ;; This function calls:
  4465 ;;		_TMR0_ISR
  4466 ;;		_TMR2_ISR
  4467 ;; This function is called by:
  4468 ;;		Interrupt level 1
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472  0004                     _INTERRUPT_InterruptManager:
  4473                           
  4474                           ;incstack = 0
  4475  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4476                           
  4477                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  4478  0005  3180               	pagesel	$
  4479                           
  4480                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
  4481  0006  1A8B               	btfsc	11,5	;volatile
  4482  0007  1D0B               	btfss	11,2	;volatile
  4483  0008  280B               	goto	i1l108
  4484                           
  4485                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
  4486  0009  238E               	fcall	_TMR0_ISR
  4487                           
  4488                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  4489  000A  2814               	goto	i1l114
  4490  000B                     i1l108:	
  4491                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  4492                           
  4493  000B  1F0B               	btfss	11,6	;volatile
  4494  000C  2814               	goto	i1l114
  4495                           
  4496                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  4497  000D  0021               	movlb	1	; select bank1
  4498  000E  1C91               	btfss	17,1	;volatile
  4499  000F  2814               	goto	i1l114
  4500  0010  0020               	movlb	0	; select bank0
  4501  0011  1C91               	btfss	17,1	;volatile
  4502  0012  2814               	goto	i1l114
  4503                           
  4504                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
  4505  0013  23CB               	fcall	_TMR2_ISR
  4506  0014                     i1l114:	
  4507                           ;mcc_generated_files/interrupt_manager.c: 71:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 73:     }
  4508                           
  4509                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  4510                           
  4511  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4512  0015  0009               	retfie
  4513  0016                     __end_of_INTERRUPT_InterruptManager:
  4514                           
  4515                           	psect	text34
  4516  03CB                     __ptext34:	
  4517 ;; *************** function _TMR2_ISR *****************
  4518 ;; Defined at:
  4519 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;		None
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;		None
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      void 
  4526 ;; Registers used:
  4527 ;;		wreg, status,2, status,0, pclath, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 1F/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMMON   BANK0   BANK1
  4533 ;;      Params:         0       0       0
  4534 ;;      Locals:         0       0       0
  4535 ;;      Temps:          0       0       0
  4536 ;;      Totals:         0       0       0
  4537 ;;Total ram usage:        0 bytes
  4538 ;; Hardware stack levels used: 1
  4539 ;; Hardware stack levels required when called: 5
  4540 ;; This function calls:
  4541 ;;		Absolute function
  4542 ;;		_TMR2_DefaultInterruptHandler
  4543 ;;		_ms_tick
  4544 ;; This function is called by:
  4545 ;;		_INTERRUPT_InterruptManager
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549  03CB                     _TMR2_ISR:	
  4550                           ;psect for function _TMR2_ISR
  4551                           
  4552                           
  4553                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  4557  03CB  1091               	bcf	17,1	;volatile
  4558                           
  4559                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
  4560  03CC  0841               	movf	_TMR2_InterruptHandler,w
  4561  03CD  0442               	iorwf	_TMR2_InterruptHandler+1,w
  4562  03CE  1903               	btfsc	3,2
  4563  03CF  0008               	return
  4564                           
  4565                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
  4566  03D0  0842               	movf	_TMR2_InterruptHandler+1,w
  4567  03D1  008A               	movwf	10
  4568  03D2  0841               	movf	_TMR2_InterruptHandler,w
  4569  03D3  000A               	callw
  4570  03D4  3183               	pagesel	$
  4571  03D5  0008               	return
  4572  03D6                     __end_of_TMR2_ISR:
  4573                           
  4574                           	psect	text35
  4575  044B                     __ptext35:	
  4576 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  4577 ;; Defined at:
  4578 ;;		line 136 in file "mcc_generated_files/tmr2.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;		None
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;		None
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      void 
  4585 ;; Registers used:
  4586 ;;		None
  4587 ;; Tracked objects:
  4588 ;;		On entry : 1F/0
  4589 ;;		On exit  : 1F/0
  4590 ;;		Unchanged: 1F/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1
  4592 ;;      Params:         0       0       0
  4593 ;;      Locals:         0       0       0
  4594 ;;      Temps:          0       0       0
  4595 ;;      Totals:         0       0       0
  4596 ;;Total ram usage:        0 bytes
  4597 ;; Hardware stack levels used: 1
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_TMR2_Initialize
  4602 ;;		_TMR2_ISR
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606  044B                     _TMR2_DefaultInterruptHandler:	
  4607                           ;psect for function _TMR2_DefaultInterruptHandler
  4608                           
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  4612  044B  0008               	return
  4613  044C                     __end_of_TMR2_DefaultInterruptHandler:
  4614                           
  4615                           	psect	text36
  4616  01CB                     __ptext36:	
  4617 ;; *************** function _ms_tick *****************
  4618 ;; Defined at:
  4619 ;;		line 520 in file "main.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 1F/0
  4630 ;;		On exit  : 1F/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1
  4633 ;;      Params:         0       0       0
  4634 ;;      Locals:         0       0       0
  4635 ;;      Temps:          0       0       0
  4636 ;;      Totals:         0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used: 1
  4639 ;; Hardware stack levels required when called: 4
  4640 ;; This function calls:
  4641 ;;		_ms_100_work
  4642 ;;		_ms_200_work
  4643 ;;		_sec_work
  4644 ;;		_stop_tone
  4645 ;; This function is called by:
  4646 ;;		_start_setup
  4647 ;;		_TMR2_ISR
  4648 ;; This function uses a non-reentrant model
  4649 ;;
  4650                           
  4651  01CB                     _ms_tick:	
  4652                           ;psect for function _ms_tick
  4653                           
  4654                           
  4655                           ;main.c: 521:     static unsigned ms_count = 0;;main.c: 522:     static unsigned s_count
      +                           = 0;;main.c: 523:     ms_count++;
  4656                           
  4657                           ;incstack = 0
  4658                           ; Regs used in _ms_tick: [wreg+status,2+status,0+pclath+cstack]
  4659  01CB  3001               	movlw	1
  4660  01CC  07A5               	addwf	ms_tick@ms_count,f
  4661  01CD  3000               	movlw	0
  4662  01CE  3DA6               	addwfc	ms_tick@ms_count+1,f
  4663                           
  4664                           ;main.c: 524:     if (time_tone > 0) {
  4665  01CF  082B               	movf	_time_tone,w
  4666  01D0  042C               	iorwf	_time_tone+1,w
  4667  01D1  1903               	btfsc	3,2
  4668  01D2  29DC               	goto	i1l2129
  4669                           
  4670                           ;main.c: 525:         time_tone--;
  4671  01D3  3001               	movlw	1
  4672  01D4  02AB               	subwf	_time_tone,f
  4673  01D5  3000               	movlw	0
  4674  01D6  3BAC               	subwfb	_time_tone+1,f
  4675                           
  4676                           ;main.c: 526:         if (time_tone == 0) {
  4677  01D7  082B               	movf	_time_tone,w
  4678  01D8  042C               	iorwf	_time_tone+1,w
  4679  01D9  1D03               	btfss	3,2
  4680  01DA  29DC               	goto	i1l2129
  4681                           
  4682                           ;main.c: 527:             stop_tone();
  4683  01DB  2426               	fcall	_stop_tone
  4684  01DC                     i1l2129:
  4685                           
  4686                           ;main.c: 531:     ff.bits.ALLOW_FUN = 1;
  4687  01DC  16F6               	bsf	_ff,5
  4688                           
  4689                           ;main.c: 532:     ff.bits.ALLOW_JUMP = 1;
  4690  01DD  1776               	bsf	_ff,6
  4691                           
  4692                           ;main.c: 534:     if (ms_count == 100) {
  4693  01DE  3064               	movlw	100
  4694  01DF  0625               	xorwf	ms_tick@ms_count,w
  4695  01E0  0426               	iorwf	ms_tick@ms_count+1,w
  4696  01E1  1D03               	btfss	3,2
  4697  01E2  29EB               	goto	i1l2143
  4698                           
  4699                           ;main.c: 535:         ms_100_work();
  4700  01E3  241C               	fcall	_ms_100_work
  4701                           
  4702                           ;main.c: 536:         ms_200_work();
  4703  01E4  2279               	fcall	_ms_200_work
  4704                           
  4705                           ;main.c: 537:         s_count++;
  4706  01E5  3001               	movlw	1
  4707  01E6  07A3               	addwf	ms_tick@s_count,f
  4708  01E7  3000               	movlw	0
  4709  01E8  3DA4               	addwfc	ms_tick@s_count+1,f
  4710                           
  4711                           ;main.c: 538:         ms_count = 0;
  4712  01E9  01A5               	clrf	ms_tick@ms_count
  4713  01EA  01A6               	clrf	ms_tick@ms_count+1
  4714  01EB                     i1l2143:
  4715                           
  4716                           ;main.c: 546:     if (s_count == 10) {
  4717  01EB  300A               	movlw	10
  4718  01EC  0623               	xorwf	ms_tick@s_count,w
  4719  01ED  0424               	iorwf	ms_tick@s_count+1,w
  4720  01EE  1D03               	btfss	3,2
  4721  01EF  0008               	return
  4722                           
  4723                           ;main.c: 547:         sec_work();
  4724  01F0  2026               	fcall	_sec_work
  4725                           
  4726                           ;main.c: 548:         s_count = 0;
  4727  01F1  01A3               	clrf	ms_tick@s_count
  4728  01F2  01A4               	clrf	ms_tick@s_count+1
  4729  01F3  0008               	return
  4730  01F4                     __end_of_ms_tick:
  4731                           
  4732                           	psect	text37
  4733  0426                     __ptext37:	
  4734 ;; *************** function _stop_tone *****************
  4735 ;; Defined at:
  4736 ;;		line 128 in file "main.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		None
  4745 ;; Tracked objects:
  4746 ;;		On entry : 1F/0
  4747 ;;		On exit  : 1F/0
  4748 ;;		Unchanged: 1F/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1
  4750 ;;      Params:         0       0       0
  4751 ;;      Locals:         0       0       0
  4752 ;;      Temps:          0       0       0
  4753 ;;      Totals:         0       0       0
  4754 ;;Total ram usage:        0 bytes
  4755 ;; Hardware stack levels used: 1
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_ms_tick
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763  0426                     _stop_tone:	
  4764                           ;psect for function _stop_tone
  4765                           
  4766                           
  4767                           ;main.c: 129:     ff.bits.ZUM_BUSY = 0;
  4768                           
  4769                           ;incstack = 0
  4770                           ; Regs used in _stop_tone: []
  4771  0426  1278               	bcf	_ff+2,4
  4772                           
  4773                           ;main.c: 130:     ff.bits.TONE_ON = 0;
  4774  0427  10F8               	bcf	_ff+2,1
  4775                           
  4776                           ;main.c: 131:     ff.bits.TONE_OFF = 1;
  4777  0428  1578               	bsf	_ff+2,2
  4778  0429  0008               	return
  4779  042A                     __end_of_stop_tone:
  4780                           
  4781                           	psect	text38
  4782  0026                     __ptext38:	
  4783 ;; *************** function _sec_work *****************
  4784 ;; Defined at:
  4785 ;;		line 438 in file "main.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 1F/0
  4796 ;;		On exit  : 1F/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1
  4799 ;;      Params:         0       0       0
  4800 ;;      Locals:         0       0       0
  4801 ;;      Temps:          1       0       0
  4802 ;;      Totals:         1       0       0
  4803 ;;Total ram usage:        1 bytes
  4804 ;; Hardware stack levels used: 1
  4805 ;; Hardware stack levels required when called: 1
  4806 ;; This function calls:
  4807 ;;		_minute_tick
  4808 ;;		_rele_tick
  4809 ;;		_sec_30_work
  4810 ;; This function is called by:
  4811 ;;		_ms_tick
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815  0026                     _sec_work:	
  4816                           ;psect for function _sec_work
  4817                           
  4818                           
  4819                           ;main.c: 446:     sec_count++;
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _sec_work: [wreg+status,2+status,0+pclath+cstack]
  4823  0026  3001               	movlw	1
  4824  0027  00F1               	movwf	??_sec_work
  4825  0028  0871               	movf	??_sec_work,w
  4826  0029  07BE               	addwf	_sec_count,f
  4827                           
  4828                           ;main.c: 447:     if (!ff.bits.MOVING_ALLOWED) {
  4829  002A  1BF8               	btfsc	_ff+2,7
  4830  002B  2833               	goto	i1l413
  4831                           
  4832                           ;main.c: 448:         if (time_moving_wait > 0) {
  4833  002C  083C               	movf	_time_moving_wait,w
  4834  002D  1903               	btfsc	3,2
  4835  002E  2832               	goto	i1l414
  4836                           
  4837                           ;main.c: 449:             time_moving_wait--;
  4838  002F  3001               	movlw	1
  4839  0030  02BC               	subwf	_time_moving_wait,f
  4840                           
  4841                           ;main.c: 450:         } else {
  4842  0031  2833               	goto	i1l413
  4843  0032                     i1l414:
  4844                           
  4845                           ;main.c: 451:             ff.bits.MOVING_ALLOWED = 1;
  4846  0032  17F8               	bsf	_ff+2,7
  4847  0033                     i1l413:	
  4848                           ;main.c: 453:     }
  4849                           
  4850                           
  4851                           ;main.c: 454:     if (ff.bits.NORMAL_WORK_MODE_ON) {
  4852  0033  1C79               	btfss	_ff+3,0
  4853  0034  2842               	goto	i1l1997
  4854                           
  4855                           ;main.c: 455:         if (ff.bits.OPENED){
  4856  0035  1D77               	btfss	_ff+1,2
  4857  0036  2841               	goto	i1l1995
  4858                           
  4859                           ;main.c: 456:             time_rotation++;
  4860  0037  3001               	movlw	1
  4861  0038  07A0               	addwf	_time_rotation,f
  4862  0039  3000               	movlw	0
  4863  003A  1803               	skipnc
  4864  003B  3001               	movlw	1
  4865  003C  07A1               	addwf	_time_rotation+1,f
  4866  003D  3000               	movlw	0
  4867  003E  1803               	skipnc
  4868  003F  3001               	movlw	1
  4869  0040  07A2               	addwf	_time_rotation+2,f
  4870  0041                     i1l1995:
  4871                           
  4872                           ;main.c: 458:         rele_tick();
  4873  0041  20FC               	fcall	_rele_tick
  4874  0042                     i1l1997:
  4875                           
  4876                           ;main.c: 461:     if (ff.bits.ALARM_ON) {
  4877  0042  1C76               	btfss	_ff,0
  4878  0043  285B               	goto	i1l418
  4879                           
  4880                           ;main.c: 463:         if (sec_count == 30|| sec_count==60) {
  4881  0044  301E               	movlw	30
  4882  0045  063E               	xorwf	_sec_count,w
  4883  0046  1903               	btfsc	3,2
  4884  0047  284C               	goto	i1l2003
  4885  0048  303C               	movlw	60
  4886  0049  063E               	xorwf	_sec_count,w
  4887  004A  1D03               	btfss	3,2
  4888  004B  284D               	goto	i1l2005
  4889  004C                     i1l2003:
  4890                           
  4891                           ;main.c: 464:             sec_30_work();
  4892  004C  23DF               	fcall	_sec_30_work
  4893  004D                     i1l2005:
  4894                           
  4895                           ;main.c: 467:         ff.bits.LED_ON = !ff.bits.LED_ON;
  4896  004D  1003               	clrc
  4897  004E  1D79               	btfss	_ff+3,2
  4898  004F  1403               	setc
  4899  0050  3000               	movlw	0
  4900  0051  3D09               	addwfc	9,w
  4901  0052  00F1               	movwf	??_sec_work
  4902  0053  0DF1               	rlf	??_sec_work,f
  4903  0054  0DF1               	rlf	??_sec_work,f
  4904  0055  0879               	movf	_ff+3,w
  4905  0056  0671               	xorwf	??_sec_work,w
  4906  0057  39FB               	andlw	-5
  4907  0058  0671               	xorwf	??_sec_work,w
  4908  0059  00F9               	movwf	_ff+3
  4909                           
  4910                           ;main.c: 469:     } else if (ff.bits.ALARM_OFF) {
  4911  005A  2873               	goto	i1l2015
  4912  005B                     i1l418:
  4913  005B  1CF6               	btfss	_ff,1
  4914  005C  2873               	goto	i1l2015
  4915                           
  4916                           ;main.c: 471:         static char iled;;main.c: 472:         iled++;
  4917  005D  3001               	movlw	1
  4918  005E  00F1               	movwf	??_sec_work
  4919  005F  0871               	movf	??_sec_work,w
  4920  0060  07B8               	addwf	sec_work@iled,f
  4921                           
  4922                           ;main.c: 473:         if (iled > 2) {
  4923  0061  3003               	movlw	3
  4924  0062  0238               	subwf	sec_work@iled,w
  4925  0063  1C03               	skipc
  4926  0064  2873               	goto	i1l2015
  4927                           
  4928                           ;main.c: 474:             ff.bits.LED_ON = !ff.bits.LED_ON;
  4929  0065  1003               	clrc
  4930  0066  1D79               	btfss	_ff+3,2
  4931  0067  1403               	setc
  4932  0068  3000               	movlw	0
  4933  0069  3D09               	addwfc	9,w
  4934  006A  00F1               	movwf	??_sec_work
  4935  006B  0DF1               	rlf	??_sec_work,f
  4936  006C  0DF1               	rlf	??_sec_work,f
  4937  006D  0879               	movf	_ff+3,w
  4938  006E  0671               	xorwf	??_sec_work,w
  4939  006F  39FB               	andlw	-5
  4940  0070  0671               	xorwf	??_sec_work,w
  4941  0071  00F9               	movwf	_ff+3
  4942                           
  4943                           ;main.c: 475:             iled = 0;
  4944  0072  01B8               	clrf	sec_work@iled
  4945  0073                     i1l2015:
  4946                           
  4947                           ;main.c: 481:     if (sec_count == 60) {
  4948  0073  303C               	movlw	60
  4949  0074  063E               	xorwf	_sec_count,w
  4950  0075  1D03               	btfss	3,2
  4951  0076  0008               	return
  4952                           
  4953                           ;main.c: 482:         minute_tick();
  4954  0077  2364               	fcall	_minute_tick
  4955                           
  4956                           ;main.c: 483:         sec_count = 0;
  4957  0078  01BE               	clrf	_sec_count
  4958  0079  0008               	return
  4959  007A                     __end_of_sec_work:
  4960                           
  4961                           	psect	text39
  4962  03DF                     __ptext39:	
  4963 ;; *************** function _sec_30_work *****************
  4964 ;; Defined at:
  4965 ;;		line 430 in file "main.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg
  4974 ;; Tracked objects:
  4975 ;;		On entry : 1F/0
  4976 ;;		On exit  : 1F/0
  4977 ;;		Unchanged: 1F/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1
  4979 ;;      Params:         0       0       0
  4980 ;;      Locals:         0       0       0
  4981 ;;      Temps:          1       0       0
  4982 ;;      Totals:         1       0       0
  4983 ;;Total ram usage:        1 bytes
  4984 ;; Hardware stack levels used: 1
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_sec_work
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992  03DF                     _sec_30_work:	
  4993                           ;psect for function _sec_30_work
  4994                           
  4995                           
  4996                           ;main.c: 431:     if (ff.bits.SIREN) {
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _sec_30_work: [wreg]
  5000  03DF  1DF8               	btfss	_ff+2,3
  5001  03E0  2BE3               	goto	i1l1899
  5002                           
  5003                           ;main.c: 432:         ff.bits.SIREN = 0;
  5004  03E1  11F8               	bcf	_ff+2,3
  5005                           
  5006                           ;main.c: 433:     } else {
  5007  03E2  0008               	return
  5008  03E3                     i1l1899:
  5009                           
  5010                           ;main.c: 434:         beep_short_count = 3;
  5011  03E3  3003               	movlw	3
  5012  03E4  00F0               	movwf	??_sec_30_work
  5013  03E5  0870               	movf	??_sec_30_work,w
  5014  03E6  00FA               	movwf	_beep_short_count
  5015  03E7  0008               	return
  5016  03E8                     __end_of_sec_30_work:
  5017                           
  5018                           	psect	text40
  5019  00FC                     __ptext40:	
  5020 ;; *************** function _rele_tick *****************
  5021 ;; Defined at:
  5022 ;;		line 277 in file "main.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;		None
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;		None
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      void 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 1F/0
  5033 ;;		On exit  : 1F/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMMON   BANK0   BANK1
  5036 ;;      Params:         0       0       0
  5037 ;;      Locals:         0       0       0
  5038 ;;      Temps:          0       0       0
  5039 ;;      Totals:         0       0       0
  5040 ;;Total ram usage:        0 bytes
  5041 ;; Hardware stack levels used: 1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_sec_work
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049  00FC                     _rele_tick:	
  5050                           ;psect for function _rele_tick
  5051                           
  5052                           
  5053                           ;main.c: 279:     if (ff.bits.OPENING && ff.bits.CLOSING) {
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _rele_tick: [wreg+status,2+status,0]
  5057  00FC  1CF7               	btfss	_ff+1,1
  5058  00FD  2900               	goto	i1l365
  5059  00FE  19F7               	btfsc	_ff+1,3
  5060  00FF  0008               	return
  5061  0100                     i1l365:	
  5062                           ;main.c: 281:     }
  5063                           
  5064                           
  5065                           ;main.c: 284:     if (ff.bits.OPENING) {
  5066  0100  1CF7               	btfss	_ff+1,1
  5067  0101  2911               	goto	i1l367
  5068                           
  5069                           ;main.c: 285:         if (time_rele_power > 0) {
  5070  0102  0831               	movf	_time_rele_power,w
  5071  0103  0432               	iorwf	_time_rele_power+1,w
  5072  0104  1903               	btfsc	3,2
  5073  0105  2911               	goto	i1l367
  5074                           
  5075                           ;main.c: 286:             time_rele_power--;
  5076  0106  3001               	movlw	1
  5077  0107  02B1               	subwf	_time_rele_power,f
  5078  0108  3000               	movlw	0
  5079  0109  3BB2               	subwfb	_time_rele_power+1,f
  5080                           
  5081                           ;main.c: 287:             if (time_rele_power == 0) {
  5082  010A  0831               	movf	_time_rele_power,w
  5083  010B  0432               	iorwf	_time_rele_power+1,w
  5084  010C  1D03               	btfss	3,2
  5085  010D  2911               	goto	i1l367
  5086                           
  5087                           ;main.c: 288:                 ff.bits.RELE_POWER_ON = 0;
  5088  010E  12F7               	bcf	_ff+1,5
  5089                           
  5090                           ;main.c: 289:                 ff.bits.OPENED = 1;
  5091  010F  1577               	bsf	_ff+1,2
  5092                           
  5093                           ;main.c: 290:                 ff.bits.OPENING = 0;
  5094  0110  10F7               	bcf	_ff+1,1
  5095  0111                     i1l367:	
  5096                           ;main.c: 293:     }
  5097                           
  5098                           
  5099                           ;main.c: 296:     if (ff.bits.CLOSING) {
  5100  0111  1DF7               	btfss	_ff+1,3
  5101  0112  0008               	return
  5102                           
  5103                           ;main.c: 298:         if (time_rele_gap == 0) {
  5104  0113  082D               	movf	_time_rele_gap,w
  5105  0114  042E               	iorwf	_time_rele_gap+1,w
  5106  0115  1D03               	btfss	3,2
  5107  0116  2923               	goto	i1l1877
  5108                           
  5109                           ;main.c: 299:             if (time_rele_power > 0) {
  5110  0117  0831               	movf	_time_rele_power,w
  5111  0118  0432               	iorwf	_time_rele_power+1,w
  5112  0119  1903               	btfsc	3,2
  5113  011A  2921               	goto	i1l372
  5114                           
  5115                           ;main.c: 300:                 ff.bits.RELE_POWER_ON = 1;
  5116  011B  16F7               	bsf	_ff+1,5
  5117                           
  5118                           ;main.c: 301:                 time_rele_power--;
  5119  011C  3001               	movlw	1
  5120  011D  02B1               	subwf	_time_rele_power,f
  5121  011E  3000               	movlw	0
  5122  011F  3BB2               	subwfb	_time_rele_power+1,f
  5123                           
  5124                           ;main.c: 302:             } else {
  5125  0120  2927               	goto	i1l1879
  5126  0121                     i1l372:
  5127                           
  5128                           ;main.c: 303:                 ff.bits.RELE_POWER_ON = 0;
  5129  0121  12F7               	bcf	_ff+1,5
  5130  0122  2927               	goto	i1l1879
  5131  0123                     i1l1877:
  5132                           
  5133                           ;main.c: 306:             time_rele_gap--;
  5134  0123  3001               	movlw	1
  5135  0124  02AD               	subwf	_time_rele_gap,f
  5136  0125  3000               	movlw	0
  5137  0126  3BAE               	subwfb	_time_rele_gap+1,f
  5138  0127                     i1l1879:
  5139                           
  5140                           ;main.c: 309:         if (time_rele_control > 0) {
  5141  0127  082F               	movf	_time_rele_control,w
  5142  0128  0430               	iorwf	_time_rele_control+1,w
  5143  0129  1903               	btfsc	3,2
  5144  012A  0008               	return
  5145                           
  5146                           ;main.c: 310:             time_rele_control--;
  5147  012B  3001               	movlw	1
  5148  012C  02AF               	subwf	_time_rele_control,f
  5149  012D  3000               	movlw	0
  5150  012E  3BB0               	subwfb	_time_rele_control+1,f
  5151                           
  5152                           ;main.c: 311:             if (time_rele_control == 0) {
  5153  012F  082F               	movf	_time_rele_control,w
  5154  0130  0430               	iorwf	_time_rele_control+1,w
  5155  0131  1D03               	btfss	3,2
  5156  0132  0008               	return
  5157                           
  5158                           ;main.c: 312:                 ff.bits.RELE_CONTROL_ON = 0;
  5159  0133  1377               	bcf	_ff+1,6
  5160                           
  5161                           ;main.c: 313:                 ff.bits.CLOSED = 1;
  5162  0134  1677               	bsf	_ff+1,4
  5163                           
  5164                           ;main.c: 314:                 ff.bits.CLOSING = 0;
  5165  0135  11F7               	bcf	_ff+1,3
  5166  0136  0008               	return
  5167  0137                     __end_of_rele_tick:
  5168                           
  5169                           	psect	text41
  5170  0364                     __ptext41:	
  5171 ;; *************** function _minute_tick *****************
  5172 ;; Defined at:
  5173 ;;		line 410 in file "main.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0
  5182 ;; Tracked objects:
  5183 ;;		On entry : 1F/0
  5184 ;;		On exit  : 1F/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1
  5187 ;;      Params:         0       0       0
  5188 ;;      Locals:         0       0       0
  5189 ;;      Temps:          1       0       0
  5190 ;;      Totals:         1       0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used: 1
  5193 ;; This function calls:
  5194 ;;		Nothing
  5195 ;; This function is called by:
  5196 ;;		_sec_work
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200  0364                     _minute_tick:	
  5201                           ;psect for function _minute_tick
  5202                           
  5203                           
  5204                           ;main.c: 414:     if (time_melody > 0) {
  5205                           
  5206                           ;incstack = 0
  5207                           ; Regs used in _minute_tick: [wreg+status,2+status,0]
  5208  0364  083D               	movf	_time_melody,w
  5209  0365  1903               	btfsc	3,2
  5210  0366  0008               	return
  5211                           
  5212                           ;main.c: 415:         time_melody--;
  5213  0367  3001               	movlw	1
  5214  0368  02BD               	subwf	_time_melody,f
  5215                           
  5216                           ;main.c: 416:         if (time_melody == 0) {
  5217  0369  083D               	movf	_time_melody,w
  5218  036A  1D03               	btfss	3,2
  5219  036B  0008               	return
  5220                           
  5221                           ;main.c: 417:             ff.bits.SIREN = 1;
  5222  036C  15F8               	bsf	_ff+2,3
  5223                           
  5224                           ;main.c: 418:             time_melody = MELODY_REPEAT_DELAY;
  5225  036D  3003               	movlw	3
  5226  036E  00F0               	movwf	??_minute_tick
  5227  036F  0870               	movf	??_minute_tick,w
  5228  0370  00BD               	movwf	_time_melody
  5229  0371  0008               	return
  5230  0372                     __end_of_minute_tick:
  5231                           
  5232                           	psect	text42
  5233  0279                     __ptext42:	
  5234 ;; *************** function _ms_200_work *****************
  5235 ;; Defined at:
  5236 ;;		line 488 in file "main.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;		None
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;		None
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  1    wreg      void 
  5243 ;; Registers used:
  5244 ;;		wreg, status,2, status,0, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 1F/0
  5247 ;;		On exit  : 1F/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1
  5250 ;;      Params:         0       0       0
  5251 ;;      Locals:         0       0       0
  5252 ;;      Temps:          0       0       0
  5253 ;;      Totals:         0       0       0
  5254 ;;Total ram usage:        0 bytes
  5255 ;; Hardware stack levels used: 1
  5256 ;; Hardware stack levels required when called: 3
  5257 ;; This function calls:
  5258 ;;		_beep_double
  5259 ;;		_beep_long
  5260 ;;		_beep_short
  5261 ;; This function is called by:
  5262 ;;		_ms_tick
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266  0279                     _ms_200_work:	
  5267                           ;psect for function _ms_200_work
  5268                           
  5269                           
  5270                           ;main.c: 489:     if (ff.bits.ALARM_ON) {
  5271                           
  5272                           ;incstack = 0
  5273                           ; Regs used in _ms_200_work: [wreg+status,2+status,0+pclath+cstack]
  5274  0279  1C76               	btfss	_ff,0
  5275  027A  2A88               	goto	i1l431
  5276                           
  5277                           ;main.c: 490:         if (ff.bits.SIREN) {
  5278  027B  19F8               	btfsc	_ff+2,3
  5279  027C  2A81               	goto	i1l2025
  5280  027D  2A83               	goto	i1l2027
  5281  027E                     i1l2033:
  5282  027E  083A               	movf	_beep_long_count,w
  5283  027F  1903               	btfsc	3,2
  5284  0280  2A8D               	goto	i1l2037
  5285  0281                     i1l2025:
  5286                           
  5287                           ;main.c: 491:             beep_double();
  5288  0281  2416               	fcall	_beep_double
  5289                           
  5290                           ;main.c: 492:         } else {
  5291  0282  0008               	return
  5292  0283                     i1l2027:
  5293                           
  5294                           ;main.c: 493:             if (beep_short_count > 0) {
  5295  0283  087A               	movf	_beep_short_count,w
  5296  0284  1903               	btfsc	3,2
  5297  0285  0008               	return
  5298                           
  5299                           ;main.c: 494:                 beep_short();
  5300  0286  2372               	fcall	_beep_short
  5301  0287  0008               	return
  5302  0288                     i1l431:
  5303  0288  1CF6               	btfss	_ff,1
  5304  0289  0008               	return
  5305                           
  5306                           ;main.c: 500:         if ((beep_short_count > 0) && (beep_long_count > 0)) {
  5307  028A  087A               	movf	_beep_short_count,w
  5308  028B  1D03               	btfss	3,2
  5309  028C  2A7E               	goto	i1l2033
  5310  028D                     i1l2037:
  5311                           
  5312                           ;main.c: 503:             if (beep_short_count > 0) {
  5313  028D  087A               	movf	_beep_short_count,w
  5314  028E  1903               	btfsc	3,2
  5315  028F  2A91               	goto	i1l2041
  5316                           
  5317                           ;main.c: 504:                 beep_short();
  5318  0290  2372               	fcall	_beep_short
  5319  0291                     i1l2041:
  5320                           
  5321                           ;main.c: 506:             if (beep_long_count > 0) {
  5322  0291  083A               	movf	_beep_long_count,w
  5323  0292  1903               	btfsc	3,2
  5324  0293  0008               	return
  5325                           
  5326                           ;main.c: 507:                 beep_long();
  5327  0294  2380               	fcall	_beep_long
  5328  0295  0008               	return
  5329  0296                     __end_of_ms_200_work:
  5330                           
  5331                           	psect	text43
  5332  0416                     __ptext43:	
  5333 ;; *************** function _beep_double *****************
  5334 ;; Defined at:
  5335 ;;		line 152 in file "main.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 1F/0
  5346 ;;		On exit  : 1F/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1
  5349 ;;      Params:         0       0       0
  5350 ;;      Locals:         0       0       0
  5351 ;;      Temps:          0       0       0
  5352 ;;      Totals:         0       0       0
  5353 ;;Total ram usage:        0 bytes
  5354 ;; Hardware stack levels used: 1
  5355 ;; Hardware stack levels required when called: 2
  5356 ;; This function calls:
  5357 ;;		_beep_long
  5358 ;;		_beep_short
  5359 ;; This function is called by:
  5360 ;;		_ms_200_work
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364  0416                     _beep_double:	
  5365                           ;psect for function _beep_double
  5366                           
  5367                           
  5368                           ;main.c: 153:     if (ff.bits.LAST_BEEP_LONG) {
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _beep_double: [wreg+status,2+status,0+pclath+cstack]
  5372  0416  1FF9               	btfss	_ff+3,7
  5373  0417  2C1A               	goto	i1l1853
  5374                           
  5375                           ;main.c: 154:         beep_short();
  5376  0418  2372               	fcall	_beep_short
  5377                           
  5378                           ;main.c: 155:     } else {
  5379  0419  0008               	return
  5380  041A                     i1l1853:
  5381                           
  5382                           ;main.c: 156:         beep_long();
  5383  041A  2380               	fcall	_beep_long
  5384  041B  0008               	return
  5385  041C                     __end_of_beep_double:
  5386                           
  5387                           	psect	text44
  5388  0372                     __ptext44:	
  5389 ;; *************** function _beep_short *****************
  5390 ;; Defined at:
  5391 ;;		line 134 in file "main.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;		None
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2, status,0, pclath, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 1F/0
  5402 ;;		On exit  : 1F/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMMON   BANK0   BANK1
  5405 ;;      Params:         0       0       0
  5406 ;;      Locals:         0       0       0
  5407 ;;      Temps:          0       0       0
  5408 ;;      Totals:         0       0       0
  5409 ;;Total ram usage:        0 bytes
  5410 ;; Hardware stack levels used: 1
  5411 ;; Hardware stack levels required when called: 1
  5412 ;; This function calls:
  5413 ;;		_start_tone
  5414 ;; This function is called by:
  5415 ;;		_beep_double
  5416 ;;		_ms_200_work
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420  0372                     _beep_short:	
  5421                           ;psect for function _beep_short
  5422                           
  5423                           
  5424                           ;main.c: 135:     if (!ff.bits.ZUM_BUSY) {
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _beep_short: [wreg+status,2+status,0+pclath+cstack]
  5428  0372  1A78               	btfsc	_ff+2,4
  5429  0373  0008               	return
  5430                           
  5431                           ;main.c: 136:         if (beep_short_count > 0) beep_short_count--;
  5432  0374  087A               	movf	_beep_short_count,w
  5433  0375  1903               	btfsc	3,2
  5434  0376  2B79               	goto	i1l1827
  5435  0377  3001               	movlw	1
  5436  0378  02FA               	subwf	_beep_short_count,f
  5437  0379                     i1l1827:
  5438                           
  5439                           ;main.c: 137:         time_tone = SHORT_ZUMMER_DELAY;
  5440  0379  301E               	movlw	30
  5441  037A  00AB               	movwf	_time_tone
  5442  037B  3000               	movlw	0
  5443  037C  00AC               	movwf	_time_tone+1
  5444                           
  5445                           ;main.c: 138:         ff.bits.LAST_BEEP_LONG = 0;
  5446  037D  13F9               	bcf	_ff+3,7
  5447                           
  5448                           ;main.c: 139:         start_tone();
  5449  037E  242A               	fcall	_start_tone
  5450  037F  0008               	return
  5451  0380                     __end_of_beep_short:
  5452                           
  5453                           	psect	text45
  5454  0380                     __ptext45:	
  5455 ;; *************** function _beep_long *****************
  5456 ;; Defined at:
  5457 ;;		line 143 in file "main.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0, pclath, cstack
  5466 ;; Tracked objects:
  5467 ;;		On entry : 1F/0
  5468 ;;		On exit  : 1F/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1
  5471 ;;      Params:         0       0       0
  5472 ;;      Locals:         0       0       0
  5473 ;;      Temps:          0       0       0
  5474 ;;      Totals:         0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used: 1
  5477 ;; Hardware stack levels required when called: 1
  5478 ;; This function calls:
  5479 ;;		_start_tone
  5480 ;; This function is called by:
  5481 ;;		_beep_double
  5482 ;;		_ms_200_work
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486  0380                     _beep_long:	
  5487                           ;psect for function _beep_long
  5488                           
  5489                           
  5490                           ;main.c: 144:     if (!ff.bits.ZUM_BUSY) {
  5491                           
  5492                           ;incstack = 0
  5493                           ; Regs used in _beep_long: [wreg+status,2+status,0+pclath+cstack]
  5494  0380  1A78               	btfsc	_ff+2,4
  5495  0381  0008               	return
  5496                           
  5497                           ;main.c: 145:         if (beep_long_count > 0) beep_long_count--;
  5498  0382  083A               	movf	_beep_long_count,w
  5499  0383  1903               	btfsc	3,2
  5500  0384  2B87               	goto	i1l1839
  5501  0385  3001               	movlw	1
  5502  0386  02BA               	subwf	_beep_long_count,f
  5503  0387                     i1l1839:
  5504                           
  5505                           ;main.c: 146:         time_tone = LONG_ZUMMER_DELAY;
  5506  0387  3082               	movlw	130
  5507  0388  00AB               	movwf	_time_tone
  5508  0389  3000               	movlw	0
  5509  038A  00AC               	movwf	_time_tone+1
  5510                           
  5511                           ;main.c: 147:         ff.bits.LAST_BEEP_LONG = 1;
  5512  038B  17F9               	bsf	_ff+3,7
  5513                           
  5514                           ;main.c: 148:         start_tone();
  5515  038C  242A               	fcall	_start_tone
  5516  038D  0008               	return
  5517  038E                     __end_of_beep_long:
  5518                           
  5519                           	psect	text46
  5520  042A                     __ptext46:	
  5521 ;; *************** function _start_tone *****************
  5522 ;; Defined at:
  5523 ;;		line 122 in file "main.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;		None
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;		None
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		None
  5532 ;; Tracked objects:
  5533 ;;		On entry : 1F/0
  5534 ;;		On exit  : 1F/0
  5535 ;;		Unchanged: 1F/0
  5536 ;; Data sizes:     COMMON   BANK0   BANK1
  5537 ;;      Params:         0       0       0
  5538 ;;      Locals:         0       0       0
  5539 ;;      Temps:          0       0       0
  5540 ;;      Totals:         0       0       0
  5541 ;;Total ram usage:        0 bytes
  5542 ;; Hardware stack levels used: 1
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_beep_short
  5547 ;;		_beep_long
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551  042A                     _start_tone:	
  5552                           ;psect for function _start_tone
  5553                           
  5554                           
  5555                           ;main.c: 123:     ff.bits.ZUM_BUSY = 1;
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in _start_tone: []
  5559  042A  1678               	bsf	_ff+2,4
  5560                           
  5561                           ;main.c: 124:     ff.bits.TONE_ON = 1;
  5562  042B  14F8               	bsf	_ff+2,1
  5563                           
  5564                           ;main.c: 125:     ff.bits.TONE_OFF = 0;
  5565  042C  1178               	bcf	_ff+2,2
  5566  042D  0008               	return
  5567  042E                     __end_of_start_tone:
  5568                           
  5569                           	psect	text47
  5570  041C                     __ptext47:	
  5571 ;; *************** function _ms_100_work *****************
  5572 ;; Defined at:
  5573 ;;		line 514 in file "main.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		None
  5582 ;; Tracked objects:
  5583 ;;		On entry : 1F/0
  5584 ;;		On exit  : 1F/0
  5585 ;;		Unchanged: 1F/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1
  5587 ;;      Params:         0       0       0
  5588 ;;      Locals:         0       0       0
  5589 ;;      Temps:          0       0       0
  5590 ;;      Totals:         0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used: 1
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_ms_tick
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600  041C                     _ms_100_work:	
  5601                           ;psect for function _ms_100_work
  5602                           
  5603                           
  5604                           ;main.c: 515:     if (ff.bits.NORMAL_WORK_MODE_ON || ff.bits.UNIVERSAL_VORK_MODE_ON) {
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _ms_100_work: []
  5608  041C  1879               	btfsc	_ff+3,0
  5609  041D  2C20               	goto	i1l446
  5610  041E  1CF9               	btfss	_ff+3,1
  5611  041F  0008               	return
  5612  0420                     i1l446:
  5613                           
  5614                           ;main.c: 516:         ff.bits.ALLOW_MEASURE = 1;
  5615  0420  1676               	bsf	_ff,4
  5616  0421  0008               	return
  5617  0422                     __end_of_ms_100_work:
  5618                           
  5619                           	psect	text48
  5620  038E                     __ptext48:	
  5621 ;; *************** function _TMR0_ISR *****************
  5622 ;; Defined at:
  5623 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;		None
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;		None
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  1    wreg      void 
  5630 ;; Registers used:
  5631 ;;		wreg, status,2, status,0, pclath, cstack
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMMON   BANK0   BANK1
  5637 ;;      Params:         0       0       0
  5638 ;;      Locals:         0       0       0
  5639 ;;      Temps:          0       0       0
  5640 ;;      Totals:         0       0       0
  5641 ;;Total ram usage:        0 bytes
  5642 ;; Hardware stack levels used: 1
  5643 ;; Hardware stack levels required when called: 1
  5644 ;; This function calls:
  5645 ;;		Absolute function
  5646 ;;		_TMR0_DefaultInterruptHandler
  5647 ;;		_zummer_switch
  5648 ;; This function is called by:
  5649 ;;		_INTERRUPT_InterruptManager
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653  038E                     _TMR0_ISR:	
  5654                           ;psect for function _TMR0_ISR
  5655                           
  5656                           
  5657                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
  5658                           
  5659                           ;incstack = 0
  5660                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5661  038E  110B               	bcf	11,2	;volatile
  5662                           
  5663                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
  5664  038F  0020               	movlb	0	; select bank0
  5665  0390  0843               	movf	_timer0ReloadVal,w	;volatile
  5666  0391  0095               	movwf	21	;volatile
  5667                           
  5668                           ;mcc_generated_files/tmr0.c: 116:     if(TMR0_InterruptHandler)
  5669  0392  083F               	movf	_TMR0_InterruptHandler,w
  5670  0393  0440               	iorwf	_TMR0_InterruptHandler+1,w
  5671  0394  1903               	btfsc	3,2
  5672  0395  0008               	return
  5673                           
  5674                           ;mcc_generated_files/tmr0.c: 117:     {;mcc_generated_files/tmr0.c: 118:         TMR0_In
      +                          terruptHandler();
  5675  0396  0840               	movf	_TMR0_InterruptHandler+1,w
  5676  0397  008A               	movwf	10
  5677  0398  083F               	movf	_TMR0_InterruptHandler,w
  5678  0399  000A               	callw
  5679  039A  3183               	pagesel	$
  5680  039B  0008               	return
  5681  039C                     __end_of_TMR0_ISR:
  5682                           
  5683                           	psect	text49
  5684  044C                     __ptext49:	
  5685 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5686 ;; Defined at:
  5687 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  1    wreg      void 
  5694 ;; Registers used:
  5695 ;;		None
  5696 ;; Tracked objects:
  5697 ;;		On entry : 1F/0
  5698 ;;		On exit  : 1F/0
  5699 ;;		Unchanged: 1F/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1
  5701 ;;      Params:         0       0       0
  5702 ;;      Locals:         0       0       0
  5703 ;;      Temps:          0       0       0
  5704 ;;      Totals:         0       0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used: 1
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_TMR0_Initialize
  5711 ;;		_TMR0_ISR
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715  044C                     _TMR0_DefaultInterruptHandler:	
  5716                           ;psect for function _TMR0_DefaultInterruptHandler
  5717                           
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5721  044C  0008               	return
  5722  044D                     __end_of_TMR0_DefaultInterruptHandler:
  5723                           
  5724                           	psect	text50
  5725  03B4                     __ptext50:	
  5726 ;; *************** function _zummer_switch *****************
  5727 ;; Defined at:
  5728 ;;		line 581 in file "main.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;		None
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      void 
  5735 ;; Registers used:
  5736 ;;		status,0
  5737 ;; Tracked objects:
  5738 ;;		On entry : 1F/0
  5739 ;;		On exit  : 1F/2
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1
  5742 ;;      Params:         0       0       0
  5743 ;;      Locals:         0       0       0
  5744 ;;      Temps:          0       0       0
  5745 ;;      Totals:         0       0       0
  5746 ;;Total ram usage:        0 bytes
  5747 ;; Hardware stack levels used: 1
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_start_setup
  5752 ;;		_TMR0_ISR
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756  03B4                     _zummer_switch:	
  5757                           ;psect for function _zummer_switch
  5758                           
  5759                           
  5760                           ;incstack = 0
  5761                           ; Regs used in _zummer_switch: [status,0]
  5762                           ;main.c: 586:     do { LATAbits.LATA5 = ~LATAbits.LATA5; } while(0);
  5763  03B4  1003               	clrc
  5764  03B5  0022               	movlb	2	; select bank2
  5765  03B6  1E8C               	btfss	12,5	;volatile
  5766  03B7  1403               	setc
  5767  03B8  1C03               	btfss	3,0
  5768  03B9  2BBD               	goto	u200_20
  5769  03BA  0022               	movlb	2	; select bank2
  5770  03BB  168C               	bsf	12,5	;volatile
  5771  03BC  0008               	return
  5772  03BD                     u200_20:
  5773  03BD  0022               	movlb	2	; select bank2
  5774  03BE  128C               	bcf	12,5	;volatile
  5775  03BF  0008               	return
  5776  03C0                     __end_of_zummer_switch:
  5777  007E                     btemp	set	126	;btemp
  5778  007E                     int$flags	set	126
  5779  007E                     wtemp0	set	126
  5780                           
  5781                           	psect	idloc
  5782                           
  5783                           ;Config register IDLOC0 @ 0x8000
  5784                           ;	unspecified, using default values
  5785  8000                     	org	32768
  5786  8000  3FFF               	dw	16383
  5787                           
  5788                           ;Config register IDLOC1 @ 0x8001
  5789                           ;	unspecified, using default values
  5790  8001                     	org	32769
  5791  8001  3FFF               	dw	16383
  5792                           
  5793                           ;Config register IDLOC2 @ 0x8002
  5794                           ;	unspecified, using default values
  5795  8002                     	org	32770
  5796  8002  3FFF               	dw	16383
  5797                           
  5798                           ;Config register IDLOC3 @ 0x8003
  5799                           ;	unspecified, using default values
  5800  8003                     	org	32771
  5801  8003  3FFF               	dw	16383
  5802                           
  5803                           	psect	config
  5804                           
  5805                           ;Config register CONFIG1 @ 0x8007
  5806                           ;	Oscillator Selection
  5807                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  5808                           ;	Watchdog Timer Enable
  5809                           ;	WDTE = ON, WDT enabled
  5810                           ;	Power-up Timer Enable
  5811                           ;	PWRTE = ON, PWRT enabled
  5812                           ;	MCLR Pin Function Select
  5813                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  5814                           ;	Flash Program Memory Code Protection
  5815                           ;	CP = OFF, Program memory code protection is disabled
  5816                           ;	Data Memory Code Protection
  5817                           ;	CPD = OFF, Data memory code protection is disabled
  5818                           ;	Brown-out Reset Enable
  5819                           ;	BOREN = ON, Brown-out Reset enabled
  5820                           ;	Clock Out Enable
  5821                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5822                           ;	Internal/External Switchover
  5823                           ;	IESO = ON, Internal/External Switchover mode is enabled
  5824                           ;	Fail-Safe Clock Monitor Enable
  5825                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  5826  8007                     	org	32775
  5827  8007  3FDC               	dw	16348
  5828                           
  5829                           ;Config register CONFIG2 @ 0x8008
  5830                           ;	Flash Memory Self-Write Protection
  5831                           ;	WRT = OFF, Write protection off
  5832                           ;	PLL Enable
  5833                           ;	PLLEN = OFF, 4x PLL disabled
  5834                           ;	Stack Overflow/Underflow Reset Enable
  5835                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5836                           ;	Brown-out Reset Voltage Selection
  5837                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5838                           ;	Low-Voltage Programming Enable
  5839                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  5840  8008                     	org	32776
  5841  8008  1EFF               	dw	7935

Data Sizes:
    Strings     0
    Constant    24
    Data        0
    BSS         36
    Persistent  37
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80      2      38
    BANK1            32      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> zummer_switch(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> zummer_switch(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ms_tick(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ms_tick(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_get_wsp
    _switch_wm->_rele_off
    _eeprom_set->_EEPROM_WriteByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _get_wsp->_ADC_GetConversion
    _open->_rele_off
    _close->_rele_off

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _ms_tick->_sec_work
    _sec_work->_minute_tick
    _sec_work->_sec_30_work

Critical Paths under _main in BANK0

    _main->_get_wsp
    _start_setup->_eeprom_set

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1429
                  _autorotation_work
                              _close
                           _fun_work
                            _get_fun
                           _get_jump
                            _get_wsp
                      _hardware_work
                        _start_setup
                          _switch_wm
 ---------------------------------------------------------------------------------
 (1) _switch_wm                                            1     1      0       0
                                              3 COMMON     1     1      0
                           _rele_off
 ---------------------------------------------------------------------------------
 (1) _start_setup                                          0     0      0    1333
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                         _eeprom_set
 ---------------------------------------------------------------------------------
 (2) _eeprom_set                                           2     2      0     637
                                              0 BANK0      2     2      0
                    _EEPROM_ReadByte
                   _EEPROM_WriteByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WriteByte                                     4     3      1     572
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _EEPROM_ReadByte                                      3     3      0      31
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     348
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     174
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR0_SetInterruptHandler                             2     0      2     174
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _hardware_work                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_wsp                                              4     4      0      96
                                              4 COMMON     2     2      0
                                              0 BANK0      2     2      0
                  _ADC_GetConversion
                        _clear_alarm
                        _start_alarm
 ---------------------------------------------------------------------------------
 (2) _start_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clear_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_jump                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _get_fun                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _fun_work                                             1     1      0       0
                                              3 COMMON     1     1      0
                              _close
                               _open
 ---------------------------------------------------------------------------------
 (2) _open                                                 0     0      0       0
                            _go_open
                        _go_open_alt
                           _rele_off
 ---------------------------------------------------------------------------------
 (3) _go_open_alt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _close                                                0     0      0       0
                           _go_close
                       _go_close_alt
                           _rele_off
 ---------------------------------------------------------------------------------
 (2) _rele_off                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _go_close_alt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _go_close                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autorotation_work                                    1     1      0       0
                                              2 COMMON     1     1      0
                     _go_close_short
                            _go_open
 ---------------------------------------------------------------------------------
 (3) _go_open                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _go_close_short                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0       0
                           _TMR0_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                            _ms_tick *
 ---------------------------------------------------------------------------------
 (7) _ms_tick                                              0     0      0       0
                        _ms_100_work
                        _ms_200_work
                           _sec_work
                          _stop_tone
 ---------------------------------------------------------------------------------
 (8) _stop_tone                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _sec_work                                             1     1      0       0
                                              1 COMMON     1     1      0
                        _minute_tick
                          _rele_tick
                        _sec_30_work
 ---------------------------------------------------------------------------------
 (9) _sec_30_work                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _rele_tick                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _minute_tick                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ms_200_work                                          0     0      0       0
                        _beep_double
                          _beep_long
                         _beep_short
 ---------------------------------------------------------------------------------
 (9) _beep_double                                          0     0      0       0
                          _beep_long
                         _beep_short
 ---------------------------------------------------------------------------------
 (9) _beep_short                                           0     0      0       0
                         _start_tone
 ---------------------------------------------------------------------------------
 (9) _beep_long                                            0     0      0       0
                         _start_tone
 ---------------------------------------------------------------------------------
 (10) _start_tone                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ms_100_work                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                      _zummer_switch *
 ---------------------------------------------------------------------------------
 (7) _zummer_switch                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _autorotation_work
     _go_close_short
     _go_open
   _close
     _go_close
     _go_close_alt
     _rele_off
   _fun_work
     _close
     _open
       _go_open
       _go_open_alt
       _rele_off
   _get_fun
   _get_jump
   _get_wsp
     _ADC_GetConversion
     _clear_alarm
     _start_alarm
   _hardware_work
   _start_setup
     _SYSTEM_Initialize
       _ADC_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR2_Initialize
         _TMR2_SetInterruptHandler
       _WDT_Initialize
     _TMR0_SetInterruptHandler
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
     _eeprom_set
       _EEPROM_ReadByte
       _EEPROM_WriteByte
   _switch_wm
     _rele_off

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _zummer_switch *
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
     _ms_tick *
       _ms_100_work
       _ms_200_work
         _beep_double
           _beep_long
             _start_tone
           _beep_short
             _start_tone
         _beep_long
         _beep_short
       _sec_work
         _minute_tick
         _rele_tick
         _sec_30_work
       _stop_tone

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      32       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      2      26       6       47.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      32       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed May 18 12:48:00 2022

        __end_of_TMR2_SetInterruptHandler 040A                        get_fun@fun_counter 0036  
                                      l61 02DA                                        _RD 0CA8  
                                      _WR 0CA9                             ?_go_close_alt 0070  
                                      _ff 0076                 __end_of_autorotation_work 00FC  
                         _timer0ReloadVal 0043                                       l334 03C6  
                                     l351 03B0                                       l336 03C4  
                                     l344 0321                                       l345 0322  
                                     l349 03AC                                       l357 03A0  
                                     l390 02BE                                       l359 03A4  
                                     l572 021D                                       l548 0350  
                                     l578 032A                                       _GIE 005F  
                             _start_alarm 0410                                       _PR2 001B  
                             _start_setup 0137                              ?_go_open_alt 0070  
                         _TMR2_Initialize 0339                                       wreg 0009  
                            ?_sec_30_work 0070                                      l2323 01FF  
                                    l2237 00DD                                      l2317 019F  
                                    l2309 0194                                      l2341 021A  
                                    l2333 020F                                      l2423 0239  
                                    l2187 02A2                                      l2525 034A  
                                    l2463 009F                                      l2297 0181  
                                    l2473 00B4                                      l2467 00AA  
                                    l2479 00BE                                      u1110 01C2  
                                    u1030 01A6                                      u1104 01BD  
                                    u1050 01AD                                      u1124 01C4  
                                    u1044 01A8                                      u1070 01B4  
                                    u1064 01AF                                      u1090 01BB  
                                    u1084 01B6                                      _LATA 010C  
                                    _LATC 010E                                      u2255 00E7  
                                    u2195 00CB                                      u2540 0238  
                                    u2647 0083                                      u2657 02D5  
                                    u2667 0173                                      _TMR0 0015  
                                    _TMR2 001A                                      _WREN 0CAA  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _main 0348                                      _open 039C  
                                    fsr0h 0005                                      indf0 0000  
                                    fsr0l 0004                      EEPROM_WriteByte@addr 0075  
                                    btemp 007E                           ?_go_close_short 0070  
                                    start 0016                            ??_go_close_alt 0072  
                 __end_of_TMR0_Initialize 0306            ??_TMR0_DefaultInterruptHandler 0070  
           __end_of_OSCILLATOR_Initialize 03FE                                     ?_main 0070  
                                   _EEADR 0191                                     ?_open 0070  
                                   _T2CON 001C                          __end_of_RELE_GAP 0444  
                                   i1l114 0014                                     i1l108 000B  
                                   i1l413 0033                                     i1l414 0032  
                                   i1l431 0288                                     i1l418 005B  
                                   i1l372 0121                                     i1l365 0100  
                                   i1l446 0420                                     i1l367 0111  
                                   _TRISA 008C                                     _TRISC 008E  
                         ??_hardware_work 0072                 ?_TMR0_SetInterruptHandler 0072  
                        __end_of_TMR0_ISR 039C                           __end_of_get_fun 01A1  
                        __end_of_TMR2_ISR 03D6                           __end_of_get_wsp 00C0  
                         __end_of_go_open 0318                                     _close 03A8  
                          _WDT_Initialize 0422                           __end_of_ms_tick 01F4  
                          __pbitbssCOMMON 03D8                        _SHORT_ZUMMER_DELAY 044A  
                                   pclath 000A                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 043D  
                         __initialization 0017                            eeprom_set@vers 0045  
                            __end_of_main 0356                              __end_of_open 03A8  
                 __end_of_TMR2_Initialize 0348               ?_INTERRUPT_InterruptManager 0070  
                _TMR2_SetInterruptHandler 0404                                    ??_main 0076  
                                  ??_open 0073                              ?_minute_tick 0070  
                  __end_of_WDT_Initialize 0426                                    ?_close 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  _EEDATA 0193                                    _EECON2 0196  
                                  _APFCON 011D                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  i1l2003 004C                                    i1l2005 004D  
                                  i1l2015 0073                                    i1l2041 0291  
                                  i1l2033 027E                                    i1l2025 0281  
                                  i1l2027 0283                                    i1l2037 028D  
                                  i1l2143 01EB                                    u200_20 03BD  
                                  i1l2129 01DC                                    i1l1827 0379  
                                  i1l1853 041A                                    i1l1839 0387  
                                  i1l1877 0123                                    i1l1879 0127  
                                  i1l1899 03E3                                    i1l1995 0041  
                                  i1l1997 0042                          _GOOD_WSP_VOLTAGE 0431  
                                  _OSCCON 0099                                    _WDTCON 0097  
                        __end_of_get_jump 021C                          __end_of_go_close 025B  
             __end_of_MELODY_REPEAT_DELAY 0440                          ?_TMR0_Initialize 0070  
                       ??_EEPROM_ReadByte 0072                          __end_of_fun_work 02B2  
                __end_of_EEPROM_WriteByte 023C                          __end_of_sec_work 007A  
                               ??_get_fun 0072                          __end_of_rele_off 0329  
                               ??_get_wsp 0074                                 ??_go_open 0072  
           __end_of_RELE_POWER_WORK_DELAY 0446                                 ??_ms_tick 0072  
                         ?_WDT_Initialize 0070                    EEPROM_WriteByte@status 03D8  
                ADC_GetConversion@channel 0073                     _HIGH_WATER_RESISTANSE 0439  
                 __end_of_TMR2_StartTimer 043F  TMR0_SetInterruptHandler@InterruptHandler 0072  
TMR2_SetInterruptHandler@InterruptHandler 0072                      __end_of_go_close_alt 03CB  
                       _SYSTEM_Initialize 03F0                   __end_of__initialization 0023  
                      _AUTOROTATION_DELAY 0435                        ?_SYSTEM_Initialize 0070  
                           _UP_RESISTANSE 0437                            __pcstackCOMMON 0070  
                     ??_SYSTEM_Initialize 0075                     __end_of_zummer_switch 03C0  
                               ?_TMR0_ISR 0070                                 ?_TMR2_ISR 0070  
                           __end_of_close 03B4                          ?_TMR2_Initialize 0070  
                            ?_start_alarm 0070               get_wsp@bad_measures_counter 0037  
                          _OPTION_REGbits 0095                              ?_start_setup 0070  
                                 ??_close 0073                                _beep_short 0372  
               __end_of_SYSTEM_Initialize 03F7                          ??_go_close_short 0072  
                              __pbssBANK0 0020                                __pmaintext 0348  
        __end_of_TMR0_SetInterruptHandler 0410                                ??_TMR0_ISR 0070  
                              ??_TMR2_ISR 0072                           _time_rele_power 0031  
                              __pintentry 0004                         _time_rele_control 002F  
                              _eeprom_set 0356                                   _OSCTUNE 0098  
                       __end_of_beep_long 038E                          ?_TMR2_StartTimer 0070  
                               ?_get_jump 0070                                 ?_go_close 0070  
                               ?_fun_work 0070                                 ?_sec_work 0070  
                               ?_rele_off 0070                      _ADC_InterruptHandler 0033  
              ??_TMR2_SetInterruptHandler 0074                             ??_beep_double 0070  
   __end_of_RELE_POWER_AUTOROTATION_DELAY 0445             _RELE_POWER_AUTOROTATION_DELAY 0444  
                __end_of_GOOD_WSP_VOLTAGE 0433                                   __ptext1 02B2  
                                 __ptext2 0137                                   __ptext3 0356  
                                 __ptext4 021C                                   __ptext5 0329  
                                 __ptext6 043D                                   __ptext7 03F0  
                                 __ptext8 0422                                   __ptext9 0339  
                                 _get_fun 016C                                   _get_wsp 007A  
                                 _go_open 0306                     _OSCILLATOR_Initialize 03F7  
                               _T2CONbits 001C                  ??_PIN_MANAGER_Initialize 0072  
                                 _ms_tick 01CB                     __end_of_hardware_work 01CB  
                             ?_beep_short 0070                                   clrloop0 03FF  
                              ??_get_jump 0072                                ??_go_close 0072  
                       __end_of_rele_tick 0137                      end_of_initialization 0023  
                              ??_fun_work 0073                           _EEPROM_ReadByte 0329  
                              ??_sec_work 0071                                ??_rele_off 0072  
                           ??_clear_alarm 0072                             ??_ms_100_work 0070  
                           ??_ms_200_work 0070                            _FUN_MEAS_COUNT 0447  
                            _go_close_alt 03C0                          ??_WDT_Initialize 0072  
            __end_of_LOW_WATER_RESISTANSE 043D                  _TMR0_SetInterruptHandler 040A  
                               _PORTAbits 000C                                 _PORTCbits 000E  
                       ?_EEPROM_WriteByte 0072                         __end_of_stop_tone 042A  
                     __end_of_beep_double 041C                         __end_of_switch_wm 02C8  
                             ?_eeprom_set 0070                        ??_EEPROM_WriteByte 0073  
                               _TRISAbits 008C                                 _TRISCbits 008E  
                      EEPROM_WriteByte@dt 0072                                _start_tone 042A  
                              get_wsp@res 0044                    __end_of_FUN_MEAS_COUNT 0448  
    __end_of_TMR2_DefaultInterruptHandler 044C              _TMR2_DefaultInterruptHandler 044B  
                     __end_of_clear_alarm 0431                            _ADC_Initialize 03E8  
                  ?_OSCILLATOR_Initialize 0070                       __end_of_ms_100_work 0422  
                     __end_of_ms_200_work 0296                             ??_go_open_alt 0072  
                     start_initialization 0017                     _RELE_POWER_WORK_DELAY 0445  
                           ??_sec_30_work 0070                   __end_of_EEPROM_ReadByte 0339  
                        _beep_short_count 007A                               _beep_double 0416  
                  __end_of_ADC_Initialize 03F0             ?_TMR2_DefaultInterruptHandler 0070  
                       _AUTOROTATION_DAYS 0441                               __pbssCOMMON 0076  
                               ___latbits 0000                             __pcstackBANK0 0044  
                     __end_of_go_open_alt 03DF                              sec_work@iled 0038  
                             ?_start_tone 0070                                 _beep_long 0380  
                     __end_of_sec_30_work 03E8                      _LOW_WATER_RESISTANSE 043B  
                   _TMR0_InterruptHandler 003F                                 __pnvBANK0 003F  
                             _clear_alarm 042E                    _PIN_MANAGER_Initialize 02DE  
                             _ms_100_work 041C                               _ms_200_work 0279  
                         ?_ADC_Initialize 0070              ??_INTERRUPT_InterruptManager 0072  
               __end_of_AUTOROTATION_DAYS 0442                                  ?_get_fun 0070  
                                ?_get_wsp 0070                                  ?_go_open 0070  
                           ??_minute_tick 0070                                  ?_ms_tick 0070  
                            ??_beep_short 0070                            _WSP_MEAS_COUNT 0448  
                        ?_EEPROM_ReadByte 0070                                 _sec_count 003E  
                       ??_TMR0_Initialize 0074                                ?_beep_long 0070  
                                _LATAbits 010C                                  _LATCbits 010E  
                               _rele_tick 00FC                                 clear_ram0 03FE  
                                _PIE1bits 0091                                  _RELE_GAP 0443  
              ??_TMR0_SetInterruptHandler 0074                                  _PIR1bits 0011  
                               _time_meas 003B                          _time_moving_wait 003C  
                                _TMR0_ISR 038E                                 _time_tone 002B  
                                _TMR2_ISR 03CB                             _zummer_switch 03B4  
                      __end_of_beep_short 0380                           _beep_long_count 003A  
                              _ADCON0bits 009D                              ??_eeprom_set 0044  
          ??_TMR2_DefaultInterruptHandler 0070                               _go_open_alt 03D6  
               ?_TMR2_SetInterruptHandler 0072                    __end_of_WSP_MEAS_COUNT 0449  
                               _stop_tone 0426                                 _switch_wm 02B2  
                             _sec_30_work 03DF                           ms_tick@ms_count 0025  
                     __end_of_minute_tick 0372                         _beep_double_count 0039  
                       ??_TMR2_Initialize 0074                                ?_rele_tick 0070  
                   __end_of_UP_RESISTANSE 0439                       _MELODY_REPEAT_DELAY 043F  
                       _ADC_GetConversion 02C8                           _JUMP_MEAS_COUNT 0446  
                      __end_of_eeprom_set 0364                            ?_zummer_switch 0070  
                 ??_OSCILLATOR_Initialize 0072                        ?_ADC_GetConversion 0070  
                           ??_start_alarm 0072                __end_of_SHORT_ZUMMER_DELAY 044B  
                              _ANSELAbits 018C                                _ANSELCbits 018E  
                     ??_ADC_GetConversion 0072                             ??_start_setup 0076  
                              ?_stop_tone 0070                             _time_rele_gap 002D  
                              ?_switch_wm 0070                                  __ptext10 0404  
                                __ptext11 02F3                                  __ptext20 02C8  
                                __ptext12 040A                                  __ptext21 01F4  
                                __ptext13 02DE                                  __ptext30 00C0  
                                __ptext22 016C                                  __ptext14 03F7  
                                __ptext31 0306                                  __ptext23 0296  
                                __ptext15 03E8                                  __ptext40 00FC  
                                __ptext32 025B                                  __ptext24 039C  
                                __ptext16 01A1                                  __ptext41 0364  
                                __ptext25 03D6                                  __ptext17 007A  
                                __ptext50 03B4                                  __ptext42 0279  
                                __ptext34 03CB                                  __ptext26 03A8  
                                __ptext18 0410                                  __ptext43 0416  
                                __ptext35 044B                                  __ptext27 0318  
                                __ptext19 042E                                  __ptext44 0372  
                                __ptext36 01CB                                  __ptext28 03C0  
                                __ptext45 0380                                  __ptext37 0426  
                                __ptext29 023C                                  __ptext46 042A  
                                __ptext38 0026                                  __ptext47 041C  
                                __ptext39 03DF                                  __ptext48 038E  
                                __ptext49 044C                                  _get_jump 01F4  
                                _go_close 023C                           _BAD_WSP_VOLTAGE 0433  
                           _time_rotation 0020                               ??_beep_long 0070  
                                _fun_work 0296      __end_of_TMR0_DefaultInterruptHandler 044D  
            _TMR0_DefaultInterruptHandler 044C                                  _sec_work 0026  
               __end_of_ADC_GetConversion 02DE                                  _rele_off 0318  
                       _MOVING_WAIT_DELAY 0440                              ?_beep_double 0070  
                                int$flags 007E                         ??_TMR2_StartTimer 0072  
      __end_of_INTERRUPT_InterruptManager 0016                _INTERRUPT_InterruptManager 0004  
                          ms_tick@s_count 0023                      get_jump@jump_counter 0035  
                             _minute_tick 0364                                _INTCONbits 000B  
           __end_of_HIGH_WATER_RESISTANSE 043B                            __pstringtext10 043B  
                          __pstringtext11 0443                            __pstringtext12 0444  
                          __pstringtext13 0445                            __pstringtext14 0446  
                          __pstringtext15 0447                            __pstringtext16 0448  
                          __pstringtext17 0449                            __pstringtext18 044A  
                           _hardware_work 01A1                       __end_of_start_alarm 0416  
                     __end_of_start_setup 016C                                  intlevel1 0000  
                            ??_start_tone 0070                   __end_of_JUMP_MEAS_COUNT 0447  
                 ?_PIN_MANAGER_Initialize 0070                               ??_rele_tick 0070  
               __end_of_MOVING_WAIT_DELAY 0441                         _LONG_ZUMMER_DELAY 0449  
                     EEPROM_ReadByte@addr 0074                          ??_ADC_Initialize 0072  
                            ?_clear_alarm 0070                            _go_close_short 025B  
           ?_TMR0_DefaultInterruptHandler 0070                           ??_zummer_switch 0070  
                            ?_ms_100_work 0070                              ?_ms_200_work 0070  
                           __pstringtext1 0431                             __pstringtext2 0433  
                           __pstringtext3 0435                             __pstringtext4 0437  
                           __pstringtext5 043F                             __pstringtext6 0440  
                           __pstringtext7 0441                             __pstringtext8 0442  
                           __pstringtext9 0439                        __end_of_start_tone 042E  
                              _OPTION_REG 0095                         _time_zummer_short 0029  
     __end_of_FRIMWARE_VERSION_EEPROM_ADR 0443               _FRIMWARE_VERSION_EEPROM_ADR 0442  
                             _time_melody 003D                         _autorotation_work 00C0  
                         _TMR0_Initialize 02F3                __end_of_AUTOROTATION_DELAY 0437  
                 __end_of_BAD_WSP_VOLTAGE 0435                        ?_autorotation_work 0070  
                             ??_stop_tone 0070                               ??_switch_wm 0073  
                          ?_hardware_work 0070                          _time_zummer_long 0027  
          __end_of_PIN_MANAGER_Initialize 02F3                       ??_autorotation_work 0072  
               __end_of_LONG_ZUMMER_DELAY 044A                          _EEPROM_WriteByte 021C  
                  __end_of_go_close_short 0279                     _TMR2_InterruptHandler 0041  
